[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Interactive and dynamic graphics for high-dimensional data using R",
    "section": "",
    "text": "Although there are many resources available for data visualization, there are few comprehensive resources on high-dimensional data visualisation. This book fills this gap by providing a comprehensive and up-to-date guide to visualising high-dimensional data and models, with R.\nHigh-dimensional data spaces are fascinating places. You may think that there’s a lot of ways to plot one or two variables, and a lot of types of patterns that can be found. You might use a density plot and see skewness or a dot plot to find outliers. A scatterplot of two variables might reveal a non-linear relationship or a barrier beyond which no observations exist. We don’t as yet have so many different choices of plot types for high-dimensions, but these types of patterns are also what we seek in scatterplots of high-dimensional data. The additional dimensions can clarify these patterns, that clusters are likely to be more distinct. Observations that did not appear to be very different can be seen to be lonely anomalies in high-dimensions, that no other observations have quite the same combination of values.\nIf you encounter an error, you can report it as an issue at the Github repo for this book.\nPlease make a small reproducible example and report the error encountered. Reproducible examples have these components:"
  },
  {
    "objectID": "index.html#audience",
    "href": "index.html#audience",
    "title": "Interactive and dynamic graphics for high-dimensional data using R",
    "section": "Audience",
    "text": "Audience\nHigh-dimensional data arises in many fields such as biology, social sciences, finance, and more. Anyone who is doing exploratory data analysis and model fitting for more than two variables will benefit from learning how to effectively visualise high-dimensions. This book will be useful for students and teachers of mulitvariate data analysis and machine learning, and researchers, data analysts, and industry professionals who work in these areas."
  },
  {
    "objectID": "index.html#how-to-use-the-book",
    "href": "index.html#how-to-use-the-book",
    "title": "Interactive and dynamic graphics for high-dimensional data using R",
    "section": "How to use the book?",
    "text": "How to use the book?\nThe book is written with explanations followed by examples with R code. The toolbox chapter provides an overview of the primary high-dimensional visualisation methods. The remaining chapters focus on different application areas and how to use the high-dimensional visualisation to complement commonly used analytical methods.\n\nWhat should I know before reading this book?\nThe examples assume that you already use R, and have a working knowledge of base R and tidyverse way of thinking about data analysis. It also assumes that you have some knowledge of statistical methods, and some experience with machine learning methods.\nIf you feel like you need build up your skills in these areas in preparation for working through this book, these are our recommended resources:\n\nR for Data Science by Wickham and Grolemund for learning about tidyverse.\nIntroduction to Modern Statistics by Çetinkaya-Rundel and Hardin to learn about introductory statistics.\nHands-On Machine Learning with R by Boehmke and Greenwell to learn about machine learning."
  },
  {
    "objectID": "index.html#setting-up-your-workflow",
    "href": "index.html#setting-up-your-workflow",
    "title": "Interactive and dynamic graphics for high-dimensional data using R",
    "section": "Setting up your workflow",
    "text": "Setting up your workflow\nTo get started set up your computer with the current versions of R and Rstudio Desktop.\nIn addition, we have made an R package to share the data and functions used in this book, called mulgar.12\n\ninstall.packages(\"mulgar\")\n#| or the development version\ndevtools::install_github(\"dicook/mulgar\")"
  },
  {
    "objectID": "intro.html#notation-conventions-and-r-objects",
    "href": "intro.html#notation-conventions-and-r-objects",
    "title": "1  Introduction",
    "section": "1.1 Notation conventions and R objects",
    "text": "1.1 Notation conventions and R objects\nData matrix"
  },
  {
    "objectID": "intro.html#whats-different-about-space-beyond-2d",
    "href": "intro.html#whats-different-about-space-beyond-2d",
    "title": "1  Introduction",
    "section": "1.2 What’s different about space beyond 2D",
    "text": "1.2 What’s different about space beyond 2D\n\nCubes\nA lot of Ursula’s work like the figures in the burning sage paper could be useful here\nA good spot to introduce a metaphor for the tour"
  },
  {
    "objectID": "intro.html#interactive-and-dynamic-graphics-literature",
    "href": "intro.html#interactive-and-dynamic-graphics-literature",
    "title": "1  Introduction",
    "section": "1.3 Interactive and dynamic graphics literature",
    "text": "1.3 Interactive and dynamic graphics literature\nA short history of the literature, how does that stat graphics literature differ from info vis?"
  },
  {
    "objectID": "intro.html#an-opening-case-study",
    "href": "intro.html#an-opening-case-study",
    "title": "1  Introduction",
    "section": "1.4 An opening case study",
    "text": "1.4 An opening case study\nTo give a taste of the approach used in the book"
  },
  {
    "objectID": "intro.html#the-big-picture-of-the-book",
    "href": "intro.html#the-big-picture-of-the-book",
    "title": "1  Introduction",
    "section": "1.5 The big picture of the book",
    "text": "1.5 The big picture of the book\n\nOutline of the different chapters"
  },
  {
    "objectID": "toolbox.html",
    "href": "toolbox.html",
    "title": "2  Toolbox",
    "section": "",
    "text": "Description and explanation of primary methods used throughout the book. Mostly focusing on tour methods.\nWe need a really nice friendly introduction to tour methods\nAnd finally how to save tours, and make plot of single projection\nNeed to include - half_range - standardizing variables"
  },
  {
    "objectID": "dimension.html#principal-component-analysis-pca",
    "href": "dimension.html#principal-component-analysis-pca",
    "title": "3  Dimension reduction",
    "section": "3.1 Principal component analysis (PCA)",
    "text": "3.1 Principal component analysis (PCA)\nThis is a statistical technique used to reduce the dimensionality of a large dataset while retaining as much information as possible. PCA identifies the underlying structure of the data by finding a new set of variables, known as principal components (PCs), that are linear combinations of the original variables. The PCs can be used as a new set of variables to represent the data in a lower-dimensional space.\nPCA is conducted by finding the directions where the projected data has the highest variance, that is, are most spread. Because the goal is to find a smaller number of variables that contain the similar information, the amount of variance explained by the selected PCs is examined.\nPCA summarises linear relationships, and the dimension reduction is achieved by using combinations of variables that are highly correlated. However, high correlation can also occur when there are outliers, or clustering. PCA is commonly used to detect these patterns also. PCA also is not very effective when the distribution of the variables is highly skewed, so it can be helpful to transform variables before computing the PCA.\nWe would start by examining the data using a grand tour. The goal is to check whether there might be potential issues for PCA, such as skewness, outliers or clustering, or even non-linear dependencies.\nWe’ll use the AFLW data as the example. This data has player statistics for all the matches in the 2021 season. We would be interested to know which variables contain similar information, and thus might be combined into single variables. We would expect that 30 statistics possibly group into a few small sets, such as offensive and defensive skills. We might also expect that some of the statistics are skewed, most players have low values and just a handful of players are stellar. It is also possible that there are some extreme values. These are interesting features, but they will distract from the main purpose of grouping the statistics. Thus the tour is used to check for potential problems with the data prior to conducting PCA.\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tourr)\nlibrary(mulgar)\ndata(aflw)\naflw_std <- aflw %>%\n  mutate_if(is.numeric, function(x) (x-\n      mean(x, na.rm=TRUE))/\n      sd(x, na.rm=TRUE))\n\nTo look at all of the 30 player statistics in a grand tour use the animate_xy() function as follows:\n\nanimate_xy(aflw_std[,7:35], half_range=0.9)\n\n\n\nCode\nrender_gif(aflw_std[,7:35], \n           grand_tour(), \n           display_xy(half_range=0.9),\n           gif_file=\"gifs/aflw_gt.gif\",\n           frames=500,\n           loop=FALSE)\n\n\nThe gif here is the saved version of the grand tour, made using the render_gif() function.\n\n\n\nGrand tour of the AFLW player statistics\n\n\nThe data is surprisingly good! There is a small amount of skewness, and there are no major outliers. Skewness indicates that most players have reasonably similar skills (bunching of points), except for some key players (moderate outliers). The skewness could be reduced by applying a log or square root transformation to some variables prior to running the PCA. However, we elect not to do this because there are no major issues that would affect PCA. The moderate outliers are players that are interesting and we’d like to be able to explore these more with the analysis.\nBelow we have the conventional summary of the PCA, a scree plot showing the reduction in variance to be explained when each additional PC is considered. It is also conventional to look at a table summarising the proportions of variance explained by PCs, but with 30 variables it is easier to make some decision on the number of PCs needed based on the scree plot.\n\n\nCode\naflw_pca <- prcomp(aflw_std[,7:35], \n               scale = FALSE, \n               retx=TRUE)\n\nggscree(aflw_pca)\n\n\n\n\n\nFigure 3.1: Scree plot showing decay in variance of PCs.\n\n\n\n\nFrom the scree plot in Figure 3.1, we see a sharp drop from one to two, two to three and then smaller drops. After four PCs the variance drops again at six PCs and then gradually decays. We will choose four PCs to examine more closely. This explains 67.2% of the variance.\n\n\nCode\nlibrary(gt)\naflw_pca$rotation[,1:4] %>%\n  as_tibble(rownames=\"Variable\") %>% \n  arrange(desc(PC1), desc(PC2), desc(PC3)) %>%\n  gt() %>%\n  fmt_number(columns = c(PC1, PC2, PC3, PC4),\n             decimals = 2)\n\n\n\n\n\n\nTable 3.1:  Coefficients for the first four PCs. \n  \n  \n    \n      Variable\n      PC1\n      PC2\n      PC3\n      PC4\n    \n  \n  \n    disposals\n0.31\n−0.05\n−0.03\n0.07\n    possessions\n0.31\n−0.03\n−0.07\n0.09\n    kicks\n0.29\n−0.04\n0.09\n−0.12\n    metres\n0.28\n−0.03\n0.10\n−0.15\n    contested\n0.28\n0.01\n−0.12\n0.23\n    uncontested\n0.28\n−0.06\n−0.01\n−0.05\n    turnovers\n0.27\n−0.01\n−0.01\n−0.29\n    clearances\n0.23\n0.00\n−0.29\n0.19\n    clangers\n0.23\n−0.02\n−0.06\n−0.33\n    handballs\n0.23\n−0.04\n−0.19\n0.31\n    frees_for\n0.21\n0.02\n−0.13\n0.18\n    marks\n0.21\n0.03\n0.32\n0.02\n    tackles\n0.20\n0.01\n−0.28\n0.09\n    time_pct\n0.16\n−0.04\n0.35\n−0.02\n    intercepts\n0.13\n−0.28\n0.24\n0.03\n    rebounds_in50\n0.13\n−0.28\n0.24\n−0.06\n    frees_against\n0.13\n0.03\n−0.16\n−0.23\n    assists\n0.09\n0.23\n0.00\n0.05\n    bounces\n0.09\n0.03\n0.02\n−0.28\n    behinds\n0.09\n0.32\n0.08\n−0.02\n    shots\n0.08\n0.38\n0.12\n−0.03\n    tackles_in50\n0.07\n0.27\n−0.18\n0.03\n    marks_in50\n0.06\n0.34\n0.18\n0.04\n    contested_marks\n0.05\n0.16\n0.34\n0.15\n    goals\n0.04\n0.37\n0.16\n0.03\n    accuracy\n0.04\n0.34\n0.10\n0.06\n    one_pct\n0.03\n−0.21\n0.33\n0.08\n    disposal\n0.02\n−0.13\n0.20\n0.50\n    hitouts\n−0.04\n0.00\n−0.03\n0.32\n  \n  \n  \n\n\n\n\n\nWhen there are as many variables as this, it can be hard to digest the combinations of variables most contributing to each PC. Rearranging the table by sorting on a selected PC can help. Table 3.1 has been sorted according to the PC 1 coefficients.\nPC 1 is primarily composed of disposals, possessions, kicks, metres, uncontested, contested, …. Actually almost all variables positively contribute, albeit in different amounts! It is quite common in PCA for the first PC to be a combination of all variables, although it might commonly be a closer to equal contribution, and it tells us that there is one main direction of variation in the data. For PC 1 in the AFLW data, PCA is telling us that the primary variation is through a combination of skills, and this maps to basic football playing skills, where some skills (e.g. disposals, possessions, kicks, …) are more important.\nThus the second PC might be the more interesting. PC 2 is primarily a combination of shots, goals, marks_in50, accuracy, and behinds contrasted against rebounds_in50 and intercepts. The negative coefficients are primary offensive skills and the positive coefficients are defensive skills. This PC is reasonable measure of the offensive vs defensive skills of a player.\nWe would continue to interpret each PC by examining large coefficients to help decide how many PCs are a suitable summary of the information in the data. Briefly, PC 3 is a measure of worth of the player because time_pct has a large coefficient, so players that are on the field longer will contribute strongly to this new variable. It also has large (and opposite) contributions from clearances, tackles, contested_marks. PC 4 appears to be related to aggressive play with clangers, turnovers, bounces and frees_against featuring. So all four PCs have useful information. (Note, if we had continued to examine large coefficients on PC 5 we would find that all variables already have had reasonably large coefficients on PC 1-4, which supports restricting attention to the first four.)\n\nIdeally, when we tour the four PCs, we’d like to be able to stop and identify players. This involves creating a pre-computed animation, with additional mouse-over. This is only feasible with a small number of observations, like the AFLW data, because all of the animation frames are constructed in a single object and passed to plotly. This object gets large very quickly!\n\n\nCode\nlibrary(plotly)\nlibrary(htmlwidgets)\nset.seed(20)\nb <- basis_random(4, 2)\naflw_pct <- tourr::save_history(aflw_pca$x[,1:4], \n                    tour_path = grand_tour(),\n                    start = b,\n                    max_bases = 5)\n# To reconstruct projected data plots, later\nsave(aflw_pct, file=\"data/aflw_pct.rda\") \naflw_pcti <- interpolate(aflw_pct, 0.1)\naflw_anim <- render_anim(aflw_pca$x[,1:4],\n                         frames=aflw_pcti, \n             obs_labels=paste0(aflw$surname,\n                               aflw$given_name))\n\naflw_gp <- ggplot() +\n     geom_path(data=aflw_anim$circle, \n               aes(x=c1, y=c2,\n                   frame=frame), linewidth=0.1) +\n     geom_segment(data=aflw_anim$axes, \n                  aes(x=x1, y=y1, \n                      xend=x2, yend=y2, \n                      frame=frame), \n                  linewidth=0.1) +\n     geom_text(data=aflw_anim$axes, \n               aes(x=x2, y=y2, \n                   frame=frame, \n                   label=axis_labels), \n               size=5) +\n     geom_point(data=aflw_anim$frames, \n                aes(x=P1, y=P2, \n                    frame=frame, \n                    label=obs_labels), \n                alpha=0.8) +\n     xlim(-1,1) + ylim(-1,1) +\n     coord_equal() +\n     theme_bw() +\n     theme(axis.text=element_blank(),\n         axis.title=element_blank(),\n         axis.ticks=element_blank(),\n         panel.grid=element_blank())\naflw_pctour <- ggplotly(aflw_gp,\n                        width=500,\n                        height=550) %>%\n       animation_button(label=\"Go\") %>%\n       animation_slider(len=0.8, x=0.5,\n                        xanchor=\"center\") %>%\n       animation_opts(easing=\"linear\", transition = 0)\n\nhtmlwidgets::saveWidget(aflw_pctour,\n          file=\"html/aflw_pca.html\",\n          selfcontained = TRUE)\n\n\n\n\n\nFigure 3.2: Animation of AFLW four PCs with interactive labelling.\n\n\n\n\n\nFrom Figure 3.2 the shape of the four PCs is similar to that of all the variables, bunching of points in the centre with a lot of moderate outliers.\n\n\nCode\nlibrary(plotly)\nload(\"data/aflw_pct.rda\")\naflw_pcti <- interpolate(aflw_pct, 0.1)\nf18 <- matrix(aflw_pcti[,,18], ncol=2)\np18 <- render_proj(aflw_pca$x[,1:4], f18, \n                   obs_labels=paste0(aflw$surname,\n                               aflw$given_name))\npg18 <- ggplot() +\n  geom_path(data=p18$circle, aes(x=c1, y=c2)) +\n  geom_segment(data=p18$axes, aes(x=x1, y=y1, xend=x2, yend=y2)) +\n  geom_text(data=p18$axes, aes(x=x2, y=y2, label=rownames(p18$axes))) +\n  geom_point(data=p18$data_prj, aes(x=P1, y=P2, label=obs_labels)) +\n  xlim(-1,1) + ylim(-1, 1) +\n  ggtitle(\"Frame 18\") +\n  theme_bw() +\n  theme(aspect.ratio=1,\n    axis.text=element_blank(),\n    axis.title=element_blank(),\n    axis.ticks=element_blank(),\n    panel.grid=element_blank())\nggplotly(pg18, width=650, height=650)\n\n\n\n\n\nFigure 3.3: Frame 18 replotted so that players can be identified on mouseover.\n\n\n\nFor any particular frame, like 18 re-plotted in Figure 3.3, we can investigate further. Here there is a branching pattern, where the branch points in the direction of PC 1. Mouseover the players at the tip of this branch and we find players like Alyce Parker, Brittany Bonnici, Dana Hooker, Kiara Bowers. If you look up the bios of these players you’ll find they all have generally good player descriptions like “elite disposals”, “powerful left foot”, “hard-running midfielder”, “best and fairest”.\nIn the direction of PC 2, you’ll find players like Lauren Ahrens, Stacey Livingstone who are star defenders. Players in this end of PC 1, have high scores on intercepts and rebounds_in50.\nAnother interesting frame for inspecting PC 2 is 59. PC 2 at one end has players with high goal scoring skills, and the other good defending skills. So mousing over the other end of PC 2 finds players like Gemma Houghton and Katie Brennan who are known for their goal scoring. The branch pattern is an interesting one, because it tells us there is some combination of skills that are lacking among all players, primarily this appears to be there some distinction between defenders skills and general playing skills. It’s not as simple as this because the branching is only visible when PC 1 and PC 2 are examined with PC 3.\nPCA is useful for getting a sense of the variation in a high-dimensional data set. Interpreting the principal components is often useful, but it can be discombobulating. For the AFLW data it would be good to think about it as a guide to the main directions of variation and to follow with a more direct engineering of variables into interesting player characteristics. For example, calculate offensive skill as an equal combination of goals, accuracy, shots, behinds. A set of new variables specifically computed to measure particular skills would make explaining an analysis easier.\n\n3.1.1 Model in the data space\n\n\nCode\ndata(pisa)\npisa_std <- apply(pisa[,-1], 2, function(x) (x-mean(x))/sd(x))[sample(1:nrow(pisa), 1000),c(1:5, 11:15, 21:25)]\npisa_pca <- prcomp(pisa_std)\nggscree(pisa_pca)\nanimate_xy(pisa_std, half_range=1)\n\npisa_model <- pca_model(pisa_pca, s=2)\n\npisa_all <- rbind(pisa_model$points, pisa_std)\nanimate_xy(pisa_all, edges=pisa_model$edges, edges.col=\"orange\")"
  },
  {
    "objectID": "regression.html#support-vector-machine",
    "href": "regression.html#support-vector-machine",
    "title": "4  Regression methods",
    "section": "4.1 Support vector machine",
    "text": "4.1 Support vector machine\n% http://www.support-vector-machines.org/SVM_osh.html % wikipedia\nA support vector machine (SVM) is a binary classification method. An SVM looks for gaps between clusters in the data, based on the extreme observations in each class. In this sense it mirrors the graphical approach described at the start of this chapter, in which we searched for gaps between groups. We describe this method more fully than we did the other algorithms for two reasons: first, because of its apparent similarity to the graphical approach, and second, because it is difficult to find a simple explanation of the method in the literature.\nThe algorithm takes an \\(n \\times p\\) data matrix, where each column is scaled to [$-\\(1,1] and each row is labeled as one of two classes (\\)y_i=+1$ or \\(-1\\)), and finds a hyperplane that separates the two groups, if they are separable. Each row of the data matrix is a vector in \\(p\\)-dimensional space, denoted as\n% Should this be represented as a row instead of a column? dfs\n[ =]\nand the separating hyperplane can be written as\n[ ’+ b = 0 ]\nwhere \\(\\blW = [ w_1~~ w_2 ~~ \\dots ~~ w_p]'\\) is the normal vector to the separating hyperplane and \\(b\\) is a constant. The best separating hyperplane is found by maximizing the margin of separation between the two classes as defined by two parallel hyperplanes:\n[ ‘+ b = 1, ~~~~~ ’+ b = -1. ]\nThese hyperplanes should maximize the distance from the separating hyperplane and have no points between them, capitalizing on any gap between the two classes. The distance from the origin to the separating hyperplane is \\(|b|/||\\blW||\\), so the distance between the two parallel margin hyperplanes is \\(2/||\\blW||=2/\\sqrt{w_1^2+\\dots +w_p^2}\\). Maximizing this is the same as minimizing \\(||\\blW||/2\\). To ensure that the two classes are separated, and that no points lie between the margin hyperplanes we need:\n[ ’_i + b , ~~~ ~~~’_i + b ~~~i=1, …, n ]\nwhich corresponds to\n\\[\\begin{eqnarray}\ny_i(\\blW'\\blX_i+b)\\geq 1 ~~~\\forall i=1, ..., n\n\\label{svm-crit}\n\\end{eqnarray}\\]\nThus the problem corresponds to\n\nInterestingly, only the points closest to the margin hyperplanes are needed to define the separating hyperplane. We might think of these points as lying on or close to the convex hull of each cluster in the area where the clusters are nearest to each other. These points are called support vectors, and the coefficients of the separating hyperplane are computed from a linear combination of the support vectors \\(\\blW = \\sum_{i=1}^{s} y_i\\alpha_i\\blX_i\\), where \\(s\\) is the number of support vectors. We could also use \\(\\blW = \\sum_{i=1}^n y_i\\alpha_i\\blX_i\\), where \\(\\alpha_i=0\\) if \\(\\blX_i\\) is not a support vector. For a good fit the number of support vectors \\(s\\) should be small relative to \\(n\\). Fitting algorithms can achieve gains in efficiency by using only samples of the cases to find suitable support vector candidates; this approach is used in the SVMLight software.\nIn practice, the assumption that the classes are completely separable is unrealistic. Classification problems rarely present a gap between the classes, such that there are no misclassifications. relaxed the separability condition to allow some misclassified training points by adding a tolerance value \\(\\epsilon_i\\) to Equation \\(\\ref{svm-crit}\\), which results in the modified criterion \\(y_i(\\blW'\\blX_i+b)>1-\\epsilon_i, \\epsilon_i\\geq 0\\). Points that meet this criterion but not the stricter one are called slack vectors.\nNonlinear classifiers can be obtained by using nonlinear transformations of \\(\\blX_i\\), \\(\\phi(\\blX_i)\\) , which is implicitly computed during the optimization using a kernel function \\(K\\). Common choices of kernels are linear \\(K(\\blx_i,\\blx_j)=\\blx_i'\\blx_j\\), polynomial \\(K(\\blx_i,\\blx_j)=(\\gamma\\blx_i'\\blx_j+r)^d\\), radial basis \\(K(\\blx_i,\\blx_j)=\\exp(-\\gamma||\\blx_i-\\blx_j||^2)\\), or sigmoid functions \\(K(\\blx_i,\\blx_j)=\\mbox{tanh}(\\gamma\\blx_i'\\blx_j+r)\\), where \\(\\gamma>0, r,\\) and \\(d\\) are kernel parameters.\n% She didn’t say to delete the terminating colon here, but by % analogy with these rest, I will. dfs\nThe ensuing minimization problem is formulated as\n[ |||| + C_{i=1}^n _i ~~ y_i(’()+b)>1-_i ]\nwhere \\(\\epsilon_i\\geq 0\\), \\(C>0\\) is a penalty parameter guarding against over-fitting the training data and \\(\\epsilon\\) controls the tolerance for misclassification. The normal to the separating hyperplane \\(\\blW\\) can be written as \\(\\sum_{i=1}^{n} y_i\\alpha_i{\\phi(\\blX_i)}\\), where points other than the support and slack vectors will have \\(\\alpha_i=0\\). Thus the optimization problem becomes\n\\[\\begin{eqnarray*}\n\\mbox{\\em minimizing } \\frac{1}{2} \\sum_{i=1}^n\\sum_{j=1}^n y_iy_j\\alpha_i\\alpha_jK(\\blX_i,\\blX_j)+C\\sum_{i=1}^n \\epsilon_i \\\\ ~~~~~~~~~~~\\mbox{\\em subject to }\ny_i(\\blW'\\phi(\\blX)+b)>1-\\epsilon_i\n\\end{eqnarray*}\\]\n \nWe use the {} function in the package of R, which uses , to classify the oils of the four areas in the Southern region. SVM is a binary classifier, but this algorithm overcomes that limitation by comparing classes in pairs, fitting six separate classifiers, and then using a voting scheme to make predictions. To fit the SVM we also need to specify a kernel, or rely on the internal tuning tools of the algorithm to choose this for us. Automatic tuning in the algorithm chooses a radial basis, but we found that a linear kernel performed better, so that is what we used. (This accords with our earlier visual inspection of the data in Sect.~\\(\\ref{class-plots}\\).) Here is the R code used to fit the model:\nThese are our misclassification tables:\n\n\nThe training error is \\(9/246=0.037\\), and the test error is \\(6/77=0.078\\). (The training error is the same as that of the neural network classifier, but the test error is lower.) Most error is associated with Sicily, which we have seen repeatedly to be an especially difficult class to separate. In the training data there are no other errors, and in the test data there are just two samples from Calabria mistakenly classified. Figure~\\(\\ref{olive-svm}\\) illustrates our examination of the misclassified cases, one in each row of the figure. (Points corresponding to Sicily were removed from all four plots.) Each of the two cases is brushed (using a filled red circle) in the plot of misclassification table and viewed in a linked 2D tour. Both of these cases are on the edge of their clusters so the confusion of classes is reasonable.\n% Figure 14\n% Figure 15\nThe linear SVM classifier uses 20 support vectors and 29 slack vectors to define the separating planes between the four areas. It is interesting to examine which points are selected as support vectors, and where they are located in the data space. For each pair of classes, we expect to find some projection in which the support vectors line up on either side of the margin of separation, whereas the slack vectors lie closer to the boundary, perhaps mixed in with the points of other classes.\n The plots in Fig.~\\(\\ref{olive-svm2}\\) represent our use of the 2D tour, augmented by manual manipulation,~to look for these projections. (The Sicilian points are again removed.) The support vectors are represented by open circles and the slack vectors by open rectangles, and we have been able to find a number of projections in which the support vectors are on the opposing outer edge of the point clouds for each cluster.\nThe linear SVM does a very nice job with this difficult classification. The accuracy is almost perfect on three classes, and the misclassifications are quite reasonable mistakes, being points that are on the extreme edges of their clusters. However, this method joins the list of those defeated by the difficult problem of distinguishing the Sicilian oils from the rest.\n\nFor some classification problems, it is possible to get a good picture of the boundary between two classes. With LDA and SVM classifiers the boundary is described by the equation of a hyperplane. For others the boundary can be determined by evaluating the classifier on points sampled in the data space, using either a regular grid or some more efficient sampling scheme.\n% Figure 16\n We use the R package to generate points illustrating boundaries, add those points to the original data, and display them in GGobi. Figure~\\(\\ref{olive-classifly}\\) shows projections of boundaries between pairs of classes in the . In each example, we used the 2D tour with manual control~to focus the view on a projection that revealed the boundary between two groups.\n% Needs to be checked\nThe top two plots show tour projections of the North (purple) and Sardinia (green) oils where the two classes are separated and the boundary appears in gray. The LDA boundary (shown at left) slices too close to the Northern oils. This might be due to the violation of the LDA assumption that the two groups have equal variance; since that is not true here, it places the boundary too close to the group with the larger variance. The SVM boundary (at right) is a bit closer to the Sardinian oils than the LDA boundary is, yet it is still a tad too close to the oils from the North.\nThe bottom row of plots examines the more difficult classification of the areas of the South, focusing on separating the South Apulian oils (in pink), which is the largest sample, from the oils of the other areas (all in orange). Perfect separation between the classes does not occur. Both plots are tour projections showing SVM boundaries, the left plot generated by a linear kernel and the right one by a radial kernel. Recall that the radial kernel was selected automatically by the SVM software we used, whereas we actually chose to use a linear kernel. These pictures illustrate that the linear basis yields a more reasonable boundary between the two groups. The shape of the clusters of the two groups is approximately the same, and there is only a small overlap of the two. The linear boundary fits this structure neatly. The radial kernel wraps around the South Apulian oils."
  },
  {
    "objectID": "LDA.html",
    "href": "LDA.html",
    "title": "5  Linear discriminant analysis and MANOVA",
    "section": "",
    "text": "Discriminant analysis dates to the early 1900s. It’s one of the most elegant and simple techniques for both modeling separation between groups, and producing a low-dimensional representation of the differences between groups.\nFisher’s linear discriminant computes a linear combination of the variables that separates two classes by comparing the differences between class means with the variance of values within each class. It makes no assumptions about the distribution of the data.\nLinear discriminant analysis (LDA), as proposed by , formalizes Fisher’s approach, by recognising that it arises from making the assumption that the data values for each class arise from a \\(p\\)-dimensional multivariate normal distribution, sharing a common variance-covariance matrix with data from other classes. When this assumption holds, Fisher’s linear discriminant gives the optimal separation between the two groups.\nFor two equally weighted groups, where \\(Y\\) is coded as \\(\\{0, 1\\}\\), the LDA rule is:\nAllocate a new observation \\(\\blX_0\\) to group 1 if\n\\[(\\bar{\\blX}_1-\\bar{\\blX}_2)'\\blS^{-1}_{\\rm pooled}\\blX_0 \\geq\n  \\frac{1}{2}(\\bar{\\blX}_1-\\bar{\\blX}_2)'\\blS^{-1}_{\\rm pooled}\n  (\\bar{\\blX}_1+\\bar{\\blX}_2)\\]\nelse allocate it to group 2,\nwhere ${}_k $ are the class mean vectors of an \\(n\\times p\\) data matrix \\(\\blX_k ~~(k=1,2)\\),\n\\[\\blS_{\\rm pooled} = \\frac{(n_1-1) \\blS_1}{(n_1-1)+(n_2-1)} + \\frac{(n_2-1) \\blS_2}{(n_1-1)+(n_2-1)}\\]\nis the pooled variance–covariance matrix, and\n\\[\\blS_k = \\frac{1}{n-1}\\sum_{i=1}^{n}\n(\\blX_{ki}-\\bar{\\blX}_k)(\\blX_{ki}-\\bar{\\blX}_k)', ~~k=1,2\\]\nis the class variance–covariance matrix. The linear discriminant part of this rule is \\((\\bar{\\blX}_1-\\bar{\\blX}_2)'\\blS^{-1}_{\\rm pooled}\\), which defines the linear combination of variables that best separates the two groups. To define a classification rule, we compute the value of the new observation \\(\\blX_0\\) on this line and compare it with the value of the average of the two class means \\((\\bar{\\blX}_1+\\bar{\\blX}_2)/2\\) on the same line. %Computing the value of the new observation \\(\\blX_0\\) on this %line and comparing it with the value of the average of the two class %means \\((\\bar{\\blX}_1+\\bar{\\blX}_2)/2\\) on this line gives the %classification rule.\nFor multiple \\((g)\\) classes, the rule and the discriminant space are constructed using the between-group sum-of-squares matrix,\n\\[\\blB=\\sum_{k=1}^g n_k(\\bar{\\blX}_k-\\bar{\\blX})(\\bar{\\blX}_k-\\bar{\\blX})'\\]\nwhich measures the differences between the class means, compared with the overall data mean \\(\\bar{\\blX}\\) and the within-group sum-of-squares matrix,\n\\[\\blW =\n\\sum_{k=1}^g\\sum_{i=1}^{n_k}\n(\\blX_{ki}-\\bar{\\blX}_k)(\\blX_{ki}-\\bar{\\blX}_k)'\\]\nwhich measures the variation of values around each class mean. The linear discriminant space is generated by computing the eigenvectors (canonical coordinates) of \\(\\blW^{-1}\\blB\\), and this is the space where the group means are most separated with respect to the pooled variance–covariance. The resulting classification rule is to allocate a new observation to the class with the highest value of\n\\[\\bar{\\blX}_k'\\blS^{-1}_{\\rm pooled}\\blX_0 -\n\\frac{1}{2}\\bar{\\blX}_k'\\blS^{-1}_{\\rm pooled}\\bar{\\blX}_k ~~~k=1,...,g\\]\nwhich results in allocating the new observation into the class with the closest mean.\nThis LDA approach is widely applicable, but it is useful to check the underlying assumptions on which it depends: (1) that the cluster structure corresponding to each class forms an ellipse, showing that the class is consistent with a sample from a multivariate normal distribution, and (2) that the variance of values around each mean is nearly the same. Figure~\\(\\ref{lda-assumptions}\\) illustrates two datasets, of which only one is consistent with these assumptions. Other parametric models, such as quadratic discriminant analysis or logistic regression, also depend on assumptions about the data which should be validated. \n% Figure 1\nOur description is derived from (VR02?) and (Ri96?). A good general treatment of parametric methods for supervised classification can be found in (JW02?) or another similar multivariate analysis textbook. Missing from multivariate textbooks is a good explanation of the use of interactive graphics both to check the assumptions underlying the methods and to explore the results. This chapter fills this gap.\nAlgorithmic methods have overtaken parametric methods in the practice of supervised classification. A parametric method such as linear discriminant analysis yields a set of interpretable output parameters, so it leaves a clear trail helping us to understand what was done to produce the results. An algorithmic method, on the other hand, is more or less a black box, with various input parameters that are adjusted to tune the algorithm. The algorithm’s input and output parameters do not always correspond in any obvious way to the interpretation of the results. All the same, these methods can be very powerful and their use is not limited by requirements about variable distributions as is the case with parametric methods."
  },
  {
    "objectID": "forests.html#trees",
    "href": "forests.html#trees",
    "title": "6  Trees and forests",
    "section": "6.1 Trees",
    "text": "6.1 Trees\nThe tree algorithm is a widely used algorithmic method. The tree algorithm generates a classification rule by sequentially splitting the data into two buckets. Splits are made between sorted data values of individual variables, with the goal of obtaining pure classes on each side of the split. The inputs for a simple tree classifier commonly include (1) an impurity measure, an indication of the relative diversity among the cases in the terminal nodes; (2) a parameter that sets the minimum number of cases in a node, or the minimum number of observations in a terminal node of the tree; and (3) a complexity measure that controls the growth of a tree, balancing the use of a simple generalizable tree against a more accurate tree tailored to the sample. When applying tree methods, exploring the effects of the input parameters on the tree is instructive; for example, it helps us to assess the stability of the tree model.\nAlthough algorithmic models do not depend on distributional assumptions, that does not mean that every algorithm is suitable for all data. For example, the tree model works best when all variables are independent within each class, because it does not take such dependencies into account. As always, visualization can help us to determine whether a particular model should be applied. In classification problems, it is useful to explore the cluster structure, comparing the clusters with the classes and looking for evidence of correlation within each class. The upper left-hand plot in Fig.~\\(\\ref{lda-assumptions}\\) shows a strong correlation between and within each cluster, which indicates that the tree model may not give good results for the . The plots in Fig.~\\(\\ref{misclassifications}\\) provide added evidence. They use background color to display the class predictions for LDA and a tree. The LDA boundaries, which are formed from a linear combination of and , look more appropriate than the rectangular boundaries of the tree classifier.\n% Figure 2\n and include thorough discussions of algorithms for supervised classification presented from a modeling perspective with a theoretical emphasis. is an early volume describing and illustrating both classical statistical methods and algorithms for supervised classification. All three books contain some excellent examples of the use of graphics to examine two-dimensional (2D) boundaries generated by different classifiers. The discussions in these and other writings on data mining algorithms take a less exploratory approach than that of this chapter, and they lack treatments of the use of graphics to examine the high-dimensional spaces in which the classifiers operate.\n \nA classifier’s performance is usually assessed using its error or, conversely, its accuracy. Error is calculated by comparing the predicted class with the known true class, using a misclassification table. For example, below are the respective misclassification tables for LDA and the tree classifier applied to the :\nThe total error is the number of misclassified samples divided by the total number of cases: \\(4/74=0.054\\) for LDA and \\(5/74=0.068\\) for the tree classifier.\nIt is informative to study the misclassified cases and to see which pockets of the data space contain more error. The misclassified cases for LDA and tree classifiers are highlighted (large orange \\(\\times\\)es and large green circles) in Fig.~\\(\\ref{misclassifications}\\). Some errors made by the tree classifier, such as the uppermost large green circle, seem especially egregious. As noted earlier, they result from the limitations of the algorithm when variables are correlated.\n\nTo be useful, the error estimate should predict the performance of the classifier on new samples not yet seen. However, if the error is calculated using the same data that was used by the classifier, it is likely to be too low. Many methods are used to avoid double-dipping from the data, including several types of . A simple example of cross-validation is to split the data into a training sample (used by the classifier) and a test sample (used for calculating error).\n \nEnsemble methods build cross-validation into the error calculations. Ensembles are constructed by using multiple classifiers and by pooling the predictions using a voting scheme. A random forest , for example, builds in cross-validation by constructing multiple trees, each of which is generated by randomly sampling the input variables and the cases. Because each tree is built using a sample of the cases, there is in effect a training sample and a test sample for each tree. (See Sect.~\\(\\ref{random-forests}\\) for more detail.)"
  },
  {
    "objectID": "forests.html#random-forests",
    "href": "forests.html#random-forests",
    "title": "6  Trees and forests",
    "section": "6.2 Random forests",
    "text": "6.2 Random forests\nA random forest is a classifier that is built from multiple trees generated by randomly sampling the cases and the variables. The random sampling (with replacement) of cases has the fortunate effect of creating a training (in-bag'') and a test (out-of-bag’’) sample for each tree computed. The class of each case in the out-of-bag sample for each tree is predicted, and the predictions for all trees are combined into a vote for the class identity.\nA random forest is a computationally intensive method, a ``black box’’ classifier, but it produces various diagnostics that make the outcome less mysterious. Some diagnostics that help us to assess the model are the votes, the measures of variable importance, the error estimate, and as usual, the misclassification tables.\n\nWe test the method on the by building a random forest classifier of 500 trees, using the R package :\n% Insert page break to avoid breaking the R output.\n% Figure 11\nEach tree used a random sample of four of the eight variables, as well as a random sample of about a third of the 572 cases. The votes are displayed in the left-hand plot of Fig.~\\(\\ref{olive-forest}\\), next to a projection from a 2D tour. Since there are three classes, the votes form a triangle, with one vertex for each region, with oils from the South at the far right, Sardinian oils at the top, and Northern oils at the lower left. Samples that are consistently classified correctly are close to the vertices; cases that are commonly misclassified are further from a vertex. Although forests perfectly classify this data, the number of points falling between the Northern and the Sardinian vertices suggests some potential for error in classifying future samples.\nFor more understanding of the votes, we turn to another diagnostic: variable importance. Forests return two measures of variable importance, both of which give similar results. Based on the Gini measure, the most important variables, in order, are , , , , , , , and .\nSome of this ordering is as expected, given the initial graphical inspection of the data (Sect.~\\(\\ref{class-plots}\\)). The importance of was our first discovery, as shown in the top row of Fig.~\\(\\ref{olive-1d}\\). And yes, is next in importance: The first two plots in Fig.~\\(\\ref{olive-2d}\\) make that clear. The surprise is that the forest should consider to be less important than . This is not what we found, as shown in the right-hand plot in that figure.\nDid we overlook something important in our earlier investigation? We return to the use of the manual manipulation of the tour to see whether does in fact perform better than at finding a gap between the two regions. But it does not. By overlooking the importance of , the random forest never finds an adequate gap between the oils of the Northern and the Sardinian regions, and that probably explains why there is more confusion about some Northern samples than there should be.\nWe rebuild the forest using a new variable constructed from a linear combination of and (), just as we did when applying the single tree classifier. Since correlated variables reduce each other’s importance, we need to remove and when we add . Once we have done this, the confusion between Northern and Sardinian oils disappears (Fig.~\\(\\ref{olive-forest}\\), lower plot): The points are now tightly clumped at each vertex, which indicates more certainty in their class predictions. The new variable becomes the second most important variable according to the importance diagnostic.\n% Need R code here and output - variable importance\nClassifying the oils by the three large s is too easy a problem for forests; they are designed to tackle more challenging classification tasks. We will use them to examine the oils from the areas in the Southern region (North and South Apulia, Calabria, and Sicily). Remember the initial graphical inspection of the data, which showed that oils from the four areas were not completely separable. The samples from Sicily overlapped those of the three other areas. We will use a forest classifier to see how well it can differentiate the Southern oils by :\n% Insert newpage to pull the first two lines to the next page\nAfter experimenting with several input parameters, we show the results for a forest of 1,500 trees, sampling two variables at each tree node, and yielding an error rate of 0.068. The misclassification table is:\nThe error of the forest is surprisingly low, but the error is definitely not uniform across classes. Predictions for Sicily are wrong about a third of the time. Figure~\\(\\ref{olive-forest2}\\) shows some more interesting aspects of the results. For this figure, the following table describes the correspondence between area and symbol:\n\nLook first at the top row of the figure. The misclassification table is represented by a jittered scatterplot, at the left. A plot from a 2D tour of the four voting variables is in the center. Because there are four groups, the votes lie on a 3D tetrahedron (a simplex). The votes from three of the areas are pretty well separated, one at each ``corner,’’ but those from Sicily overlap all of them. Remember that when points are clumped at the vertex, class members are consistently predicted correctly. Since this does not occur for Sicilian oils, we see that there is more uncertainty in the predictions for this area.\nThe plot at right confirms this observation. It is a projection from a 2D tour of the four most important variables, showing a pattern we have seen before. We can achieve pretty good separation of the oils from North Apulia, Calabria, and South Apulia, but the oils from Sicily overlap all three clusters. Clearly these are tough samples to classify correctly.\n% Figure 12\nWe remove the Sicilian oils from the plots so we can focus on the other three areas (bottom row of plots). The points representing North Apulian oils form a very tight cluster at a vertex, with three exceptions. Two of these points are misclassified as Calabrian, and we have highlighted them as large filled circles by painting the misclassification plot.\nThe pattern of the votes (middle plot) suggests that there is high certainty in the predictions for North Apulian oils, with the exception of these two samples. When we watch the votes in the tour for a while, we see that the votes of these two samples travel as if they were in a cluster all their own, which is distinct from the remaining North Apulian oils.\nHowever, when we look at the data, we find the votes for these two samples a bit puzzling. We watch the four most important variables in the tour for a while (as in the right plot), and these two points do not behave as if they were in a distinct cluster; they travel with the rest of the samples from North Apulia. They do seem to be outliers with respect their class, but they are not so far from their group — it is a bit surprising that the forest has trouble classifying these cases.\nRather than exploring the other misclassifications, we leave that for the reader.\nIn summary, a random forest is a useful method for tackling tough classification problems. Its diagnostics provide a rich basis for graphical exploration, which helps us to digest and evaluate the solution."
  },
  {
    "objectID": "forests.html#exercises",
    "href": "forests.html#exercises",
    "title": "6  Trees and forests",
    "section": "Exercises",
    "text": "Exercises\n\nFor the :\n\nSplit the samples from North Italy into \\(2/3\\) training and \\(1/3\\) test samples for each area.\nBuild a tree model to classify the oils by for the three areas of North Italy. Which are the most important variables? Make plots of these variables. What is the accuracy of the model for the training and test sets?\nBuild a random forest to classify oils into the three areas of North Italy. Compare the order of importance of variables with what you found from a single tree. Make a parallel coordinate plot in the order of variable importance."
  },
  {
    "objectID": "nn.html",
    "href": "nn.html",
    "title": "7  Neural networks and deep learning",
    "section": "",
    "text": "Neural networks for classification can be thought of as additive models where explanatory variables are transformed, usually through a logistic function, added to other explanatory variables, transformed again, and added again to yield class predictions. Aside from the data mining literature, mentioned earlier, a good comprehensive and accessible description for statisticians can be found in . The model can be formulated as:\n[ = f(x) = (+{h=1}^{s} w{h}(h+{i=1}^{p} w_{ih}x_i)) ]\n\nwhere \\(x\\) is the vector of explanatory variable values, \\(y\\) is the target value, \\(p\\) is the number of variables, \\(s\\) is the number of nodes in the single hidden layer, and \\(\\phi\\) is a fixed function, usually a linear or logistic function. This model has a single hidden layer and univariate output values. The model is fit by minimizing the sum of squared differences between observed values and fitted values, and the minimization does not always converge. A neural network is a black box that accepts inputs, computes, and spits out predictions. With graphics, some insight into the black box can be gained. We use the feed-forward neural network provided in the {} package of R to illustrate.\nWe continue to work with , and we look at the performance of the neural network in classifying the oils in the four areas of the South, a difficult challenge. Because the software does not include a method for computing the predictive error, we break the data into training and test samples so we can better estimate the predictive error. (We could tweak the neural network to perfectly fit all the data, but then we could not estimate how well it would perform with new data.)\n% this may need a few more words\nAfter trying several values for \\(s\\), the number of nodes in the hidden layer, we chose \\(s=4\\); we also chose a linear \\(\\phi\\), \\(decay=0.005\\), and \\(range=0.06\\). We fit the model using many different random starting values, rejecting the results until it eventually converged to a solution with a reasonably low error:\n% Insert page break to avoid breaking the R output.\nBelow are the misclassification tables for the training and test samples.\n\n\nThe training error is \\(9/246=0.037\\), and the test error is \\(12/77=0.156\\). The overall errors, as in the random forest model, are not uniform across classes. This is particularly obvious in the test error table: The error in classifying North Apulian oils is close to a third, and it is even worse for Sicilian oils, which have an almost even chance of being misclassified.\nOur exploration of the misclassifications is shown in Fig.~\\(\\ref{olive-nn}\\). (The troublesome Sicilian oils have been excluded from all plots in this figure.) Consider first the plots in the top row. The left-hand plot shows the misclassification table. Two samples of oils from North Apulia (orange \\(+\\)) have been incorrectly classified as South Apulian (pink \\(\\times\\)), and these two points have been brushed as filled orange circles. Note where these points fall in the next two plots, which are linked 2D tour projections. One of the two misclassified points is on the edge of the cluster of North Apulian points, close to the Calabrian cluster. It is understandable that there might be some confusion about this case. The other sample is on the outer edge of the North Apulian cluster, but it is far from the Calabrian cluster — this should not have been confused.\n% Figure 13\nIn the bottom row of plots, we follow the same procedure to examine the single North Apulian sample misclassified as South Apulian. It is painted as a filled orange circle in the misclassification plot and viewed in a tour. This point is on the outer edge of the North Apulian cluster, but it is closer to the Calabrian cluster than the South Apulian cluster. It would be understandable for it to be misclassified as Calabrian, so it is puzzling that it is misclassified as South Apulian.\nIn summary, a neural network is a black box method for tackling tough classification problems. It will generate different solutions each time the net is fit, some much better than others. When numerical measures suggest that a reasonable model has been found, graphics can be used to inspect the model in more detail."
  },
  {
    "objectID": "multivariate-time-series.html",
    "href": "multivariate-time-series.html",
    "title": "11  Multiple time series",
    "section": "",
    "text": "Potential topics:\n\ncomputing features, and exploring feature space linked to individual time series plots\nprojection pursuit of multiple time series, 1D indexes against time\nlongitudinal data"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "12  Data",
    "section": "",
    "text": "13 Australian Football League Women"
  },
  {
    "objectID": "dimension.html",
    "href": "dimension.html",
    "title": "Dimension reduction",
    "section": "",
    "text": "This chapter will focus on methods for reducing dimension, and how the tour can be used to assist with the common methods such as principal component analysis (PCA), multidimensional scaling (MDS), t-stochastic neighbour embedding (t-SNE), and factor analysis."
  },
  {
    "objectID": "dimension.html#exercises",
    "href": "dimension.html#exercises",
    "title": "3  Dimension reduction",
    "section": "3.3 Exercises",
    "text": "3.3 Exercises\n\nMake a scatterplot matrix of the first four PCs. Is the branch pattern visible in any pair?\nConstruct five new variables to measure these skills offense, defense, playing time, ball movement, errors. Using the tour, examine the relationship between these variables. Map out how a few players could be characterised based on these directions of skills."
  },
  {
    "objectID": "dimension.html#non-linear-dimension-reduction",
    "href": "dimension.html#non-linear-dimension-reduction",
    "title": "3  Dimension reduction",
    "section": "3.2 Non-linear dimension reduction",
    "text": "3.2 Non-linear dimension reduction\nMight need to use liminal here."
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "12  Data",
    "section": "13.1 Description",
    "text": "13.1 Description\nThis is data from the 2021 Women’s Australian Football League. These are average player statistics across the season, with game statistics provided by the fitzRoy package. If you are new to the game of AFL, there is a nice explanation on Wikipedia."
  },
  {
    "objectID": "data.html#variables",
    "href": "data.html#variables",
    "title": "12  Data",
    "section": "13.2 Variables",
    "text": "13.2 Variables\n\n\nRows: 381\nColumns: 35\n$ id              <chr> \"CD_I1001678\", \"CD_I1001679\", \"CD_I1001681\", \"CD_I1001…\n$ given_name      <chr> \"Jordan\", \"Brianna\", \"Jodie\", \"Ebony\", \"Emma\", \"Pepa\",…\n$ surname         <chr> \"Zanchetta\", \"Green\", \"Hicks\", \"Antonio\", \"King\", \"Ran…\n$ number          <int> 2, 3, 5, 12, 60, 21, 22, 23, 35, 14, 3, 8, 16, 12, 19,…\n$ team            <chr> \"Brisbane Lions\", \"West Coast Eagles\", \"GWS Giants\", \"…\n$ position        <chr> \"INT\", \"INT\", \"HFFR\", \"WL\", \"RK\", \"BPL\", \"INT\", \"INT\",…\n$ time_pct        <dbl> 63.00000, 61.25000, 76.50000, 74.90000, 85.10000, 77.4…\n$ goals           <dbl> 0.0000000, 0.0000000, 0.0000000, 0.1000000, 0.6000000,…\n$ behinds         <dbl> 0.0000000, 0.0000000, 0.5000000, 0.4000000, 0.4000000,…\n$ kicks           <dbl> 5.000000, 2.500000, 3.750000, 8.800000, 4.100000, 3.22…\n$ handballs       <dbl> 2.500000, 3.750000, 3.000000, 3.600000, 2.700000, 2.22…\n$ disposals       <dbl> 7.500000, 6.250000, 6.750000, 12.400000, 6.800000, 5.4…\n$ marks           <dbl> 1.5000000, 0.2500000, 1.0000000, 3.7000000, 2.2000000,…\n$ bounces         <dbl> 0.0000000, 0.0000000, 0.0000000, 0.6000000, 0.1000000,…\n$ tackles         <dbl> 3.000000, 2.250000, 2.250000, 3.900000, 2.000000, 1.77…\n$ contested       <dbl> 3.500000, 2.250000, 3.500000, 5.700000, 4.400000, 2.66…\n$ uncontested     <dbl> 3.500000, 4.500000, 3.000000, 7.000000, 2.800000, 1.77…\n$ possessions     <dbl> 7.000000, 6.750000, 6.500000, 12.700000, 7.200000, 4.4…\n$ marks_in50      <dbl> 1.0000000, 0.0000000, 0.2500000, 0.5000000, 0.9000000,…\n$ contested_marks <dbl> 1.0000000, 0.0000000, 0.0000000, 0.4000000, 1.2000000,…\n$ hitouts         <dbl> 0.0000000, 0.0000000, 0.0000000, 0.0000000, 19.4000000…\n$ one_pct         <dbl> 0.0000000, 1.5000000, 0.5000000, 1.2000000, 2.6000000,…\n$ disposal        <dbl> 60.25000, 67.15000, 37.20000, 65.96000, 61.72000, 66.8…\n$ clangers        <dbl> 2.000000, 0.500000, 2.500000, 3.100000, 2.400000, 1.33…\n$ frees_for       <dbl> 1.0000000, 0.5000000, 0.2500000, 2.5000000, 0.5000000,…\n$ frees_against   <dbl> 1.0000000, 0.5000000, 1.2500000, 1.3000000, 1.1000000,…\n$ rebounds_in50   <dbl> 0.0000000, 0.5000000, 0.2500000, 1.1000000, 0.0000000,…\n$ assists         <dbl> 0.00000000, 0.00000000, 0.00000000, 0.20000000, 0.2000…\n$ accuracy        <dbl> 0.00000, 0.00000, 0.00000, 5.00000, 30.00000, 0.00000,…\n$ turnovers       <dbl> 1.500000, 1.000000, 2.500000, 4.000000, 1.700000, 1.22…\n$ intercepts      <dbl> 2.0000000, 2.0000000, 0.5000000, 5.3000000, 1.3000000,…\n$ tackles_in50    <dbl> 0.5000000, 0.0000000, 0.7500000, 0.5000000, 0.5000000,…\n$ shots           <dbl> 0.5000000, 0.0000000, 0.7500000, 1.0000000, 1.2000000,…\n$ metres          <dbl> 72.50000, 58.50000, 76.00000, 225.90000, 89.80000, 76.…\n$ clearances      <dbl> 0.5000000, 0.2500000, 1.2500000, 0.4000000, 0.9000000,…"
  },
  {
    "objectID": "data.html#purpose",
    "href": "data.html#purpose",
    "title": "12  Data",
    "section": "13.3 Purpose",
    "text": "13.3 Purpose\nThe primary analysis is to summarise the variation using principal component analysis, which gives information about relationships between the statistics or skills sets common in players. One also might be tempted to cluster the players, but there are no obvious clusters so it could be frustrating. At best one could partition the players into groups, while recognising there are no absolutely distinct and separated groups."
  },
  {
    "objectID": "data.html#source",
    "href": "data.html#source",
    "title": "12  Data",
    "section": "13.4 Source",
    "text": "13.4 Source\nSee the information provided with the fitzRoy package."
  },
  {
    "objectID": "data.html#australian-football-league-women",
    "href": "data.html#australian-football-league-women",
    "title": "12  Data",
    "section": "12.1 Australian Football League Women",
    "text": "12.1 Australian Football League Women\n\nDescription\nThis is data from the 2021 Women’s Australian Football League. These are average player statistics across the season, with game statistics provided by the fitzRoy package. If you are new to the game of AFL, there is a nice explanation on Wikipedia.\n\n\nVariables\n\n\nRows: 381\nColumns: 35\n$ id              <chr> \"CD_I1001678\", \"CD_I1001679\", \"CD_I1001681\", \"CD_I1001…\n$ given_name      <chr> \"Jordan\", \"Brianna\", \"Jodie\", \"Ebony\", \"Emma\", \"Pepa\",…\n$ surname         <chr> \"Zanchetta\", \"Green\", \"Hicks\", \"Antonio\", \"King\", \"Ran…\n$ number          <int> 2, 3, 5, 12, 60, 21, 22, 23, 35, 14, 3, 8, 16, 12, 19,…\n$ team            <chr> \"Brisbane Lions\", \"West Coast Eagles\", \"GWS Giants\", \"…\n$ position        <chr> \"INT\", \"INT\", \"HFFR\", \"WL\", \"RK\", \"BPL\", \"INT\", \"INT\",…\n$ time_pct        <dbl> 63.00000, 61.25000, 76.50000, 74.90000, 85.10000, 77.4…\n$ goals           <dbl> 0.0000000, 0.0000000, 0.0000000, 0.1000000, 0.6000000,…\n$ behinds         <dbl> 0.0000000, 0.0000000, 0.5000000, 0.4000000, 0.4000000,…\n$ kicks           <dbl> 5.000000, 2.500000, 3.750000, 8.800000, 4.100000, 3.22…\n$ handballs       <dbl> 2.500000, 3.750000, 3.000000, 3.600000, 2.700000, 2.22…\n$ disposals       <dbl> 7.500000, 6.250000, 6.750000, 12.400000, 6.800000, 5.4…\n$ marks           <dbl> 1.5000000, 0.2500000, 1.0000000, 3.7000000, 2.2000000,…\n$ bounces         <dbl> 0.0000000, 0.0000000, 0.0000000, 0.6000000, 0.1000000,…\n$ tackles         <dbl> 3.000000, 2.250000, 2.250000, 3.900000, 2.000000, 1.77…\n$ contested       <dbl> 3.500000, 2.250000, 3.500000, 5.700000, 4.400000, 2.66…\n$ uncontested     <dbl> 3.500000, 4.500000, 3.000000, 7.000000, 2.800000, 1.77…\n$ possessions     <dbl> 7.000000, 6.750000, 6.500000, 12.700000, 7.200000, 4.4…\n$ marks_in50      <dbl> 1.0000000, 0.0000000, 0.2500000, 0.5000000, 0.9000000,…\n$ contested_marks <dbl> 1.0000000, 0.0000000, 0.0000000, 0.4000000, 1.2000000,…\n$ hitouts         <dbl> 0.0000000, 0.0000000, 0.0000000, 0.0000000, 19.4000000…\n$ one_pct         <dbl> 0.0000000, 1.5000000, 0.5000000, 1.2000000, 2.6000000,…\n$ disposal        <dbl> 60.25000, 67.15000, 37.20000, 65.96000, 61.72000, 66.8…\n$ clangers        <dbl> 2.000000, 0.500000, 2.500000, 3.100000, 2.400000, 1.33…\n$ frees_for       <dbl> 1.0000000, 0.5000000, 0.2500000, 2.5000000, 0.5000000,…\n$ frees_against   <dbl> 1.0000000, 0.5000000, 1.2500000, 1.3000000, 1.1000000,…\n$ rebounds_in50   <dbl> 0.0000000, 0.5000000, 0.2500000, 1.1000000, 0.0000000,…\n$ assists         <dbl> 0.00000000, 0.00000000, 0.00000000, 0.20000000, 0.2000…\n$ accuracy        <dbl> 0.00000, 0.00000, 0.00000, 5.00000, 30.00000, 0.00000,…\n$ turnovers       <dbl> 1.500000, 1.000000, 2.500000, 4.000000, 1.700000, 1.22…\n$ intercepts      <dbl> 2.0000000, 2.0000000, 0.5000000, 5.3000000, 1.3000000,…\n$ tackles_in50    <dbl> 0.5000000, 0.0000000, 0.7500000, 0.5000000, 0.5000000,…\n$ shots           <dbl> 0.5000000, 0.0000000, 0.7500000, 1.0000000, 1.2000000,…\n$ metres          <dbl> 72.50000, 58.50000, 76.00000, 225.90000, 89.80000, 76.…\n$ clearances      <dbl> 0.5000000, 0.2500000, 1.2500000, 0.4000000, 0.9000000,…\n\n\n\n\nPurpose\nThe primary analysis is to summarise the variation using principal component analysis, which gives information about relationships between the statistics or skills sets common in players. One also might be tempted to cluster the players, but there are no obvious clusters so it could be frustrating. At best one could partition the players into groups, while recognising there are no absolutely distinct and separated groups.\n\n\nSource\nSee the information provided with the fitzRoy package.\n\n\nPre-processing\nThe code for downloading and pre-processing the data is available at the mulgar website in the data-raw folder. The data provided by the fitzRoy package was pre-processed to reduce the variables to only those that relate to player skills and performance. It is possible that using some transformations on the variables would be useful to make them less skewed."
  },
  {
    "objectID": "data.html#notes-to-self",
    "href": "data.html#notes-to-self",
    "title": "12  Data",
    "section": "12.2 Notes to self",
    "text": "12.2 Notes to self\nThere were fifteen datasets listed in chapter 7 of the first edition. Several of these were related to networks which we are not including this time. I have tried to give a mix of things on a variety of topics. It would be nice to see if there’s updated versions of the “tips” (there seems to be a lot of noise in the literature here and no open datasets) and Di’s music data (perhaps we could scrape our own spotify accounts to get an equivalent), there are also a few audio challenge datasets like FSD50K . I think it would be useful to have more unstructured data sets like natural text that we have used for 1010.\n\nOther possible sources for data\nThere are now many search engines available for datasets that originate from research contexts that list licensing information and DOIs:\n\nhttps://zenodo.org (mostly ecology/biology)\nhttps://datadryad.org/stash (mostly biology)\nhttps://dataverse.harvard.edu/dataverse/harvard/ (mostly social sciences, but has a mixture of things)\nThere’s also a big list of datasets here: https://docs.google.com/spreadsheets/d/1ejOJTNTL5ApCuGTUciV0REEEAqvhI2Rd2FCoj7afops/edit#gid=0 (all psychology related)\nTidyTuesday\n\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-03-29/readme.md Would need to rearrange data to look at count, participation, revenue, expenditure\n\ngapminder\naccounting records\nLyn’s ecology data\nlearningtower, yowie"
  },
  {
    "objectID": "pca.html#exercises",
    "href": "pca.html#exercises",
    "title": "2  Principal component analysis (PCA)",
    "section": "2.1 Exercises",
    "text": "2.1 Exercises\n\nMake a scatterplot matrix of the first four PCs. Is the branch pattern visible in any pair?\nConstruct five new variables to measure these skills offense, defense, playing time, ball movement, errors. Using the tour, examine the relationship between these variables. Map out how a few players could be characterised based on these directions of skills."
  },
  {
    "objectID": "nldr.html",
    "href": "nldr.html",
    "title": "3  Non-linear dimension reduction",
    "section": "",
    "text": "Might need to use liminal here."
  },
  {
    "objectID": "supervised.html",
    "href": "supervised.html",
    "title": "Supervised learning",
    "section": "",
    "text": "This chapter will methods for visualising data and models when there is a response variable."
  },
  {
    "objectID": "unsupervised.html",
    "href": "unsupervised.html",
    "title": "Unsupervised learning",
    "section": "",
    "text": "This chapter will methods for visualising data and models when there is no response variable."
  },
  {
    "objectID": "hierarchical-clustering.html",
    "href": "hierarchical-clustering.html",
    "title": "8  Hierarchical clustering",
    "section": "",
    "text": "The aim of unsupervised classification, or cluster analysis, is to organize observations into similar groups. Cluster analysis is a commonly used, appealing, and conceptually intuitive, statistical method. Some of its uses include market segmentation, where customers are grouped into clusters with similar attributes for targeted marketing; gene expression analysis, where genes with similar expression patterns are grouped together; and the creation of taxonomies of animals, insects, or plants. A cluster analysis results in a simplification of a dataset for two reasons: first, because the dataset can be summarized by a description of each cluster, and second, because each cluster, which is now relatively homogeneous, can be analyzed separately. Thus, it can be used to effectively reduce the size of massive amounts of data.\nOrganizing objects into groups is a task that seems to come naturally to humans, even to small children, and perhaps this is why it is an apparently intuitive method in data analysis. However, cluster analysis is more complex than it initially appears. Many people imagine that it will produce neatly separated clusters like those in the top left plot of (ideal-clusters?), but it almost never does. Such ideal clusters are rarely encountered in real data, so we often need to modify our objective from find the natural clusters in this data'' toorganize the cases into groups that are similar in some way.’’ Even though this may seem disappointing when compared with the ideal, it is still often an effective means of simplifying and understanding a dataset.\n% Figure 1\nAt the heart of the clustering process is the work of discovering which variables are most important for defining the groups. It is often true that we only require a subset of the variables for finding clusters, whereas another subset (called ) has no impact. In the bottom left plot of Fig.~\\(\\ref{ideal-clusters}\\), it is clear that the variable plotted horizontally is important for splitting this data into two clusters, whereas the variable plotted vertically is a nuisance variable. Nuisance is an apt term for these variables, because they can radically change the interpoint distances and impair the clustering process. \nDynamic graphical methods help us to find and understand the cluster structure in high dimensions. With the tools in our toolbox, primarily tours, along with linked scatterplots and parallel coordinate plots, we can see clusters in high-dimensional spaces. We can detect gaps between clusters, the shape and relative positions of clusters, and the presence of nuisance variables. We can even find unusually shaped clusters, like those in the bottom right plot in Fig.~\\(\\ref{ideal-clusters}\\). In simple situations we can use graphics alone to group observations into clusters, using a ``spin and brush’’ method. In more difficult data problems, we can assess and refine numerical solutions using graphics. \nThis chapter discusses the use of interactive and dynamic graphics in the clustering of data. Section \\(\\ref{clust-bg}\\) introduces cluster analysis, focusing on interpoint distance measures. Section \\(\\ref{clust-graphics}\\) describes an example of a purely graphical approach to cluster analysis, the spin and brush method. In the example shown in that section, we were able to find simplifications of the data that had not been found using numerical clustering methods, and to find a variety of structures in high-dimensional space. Section \\(\\ref{clust-num}\\) describes methods for {reducing} the interpoint distance matrix to an intercluster distance matrix using hierarchical algorithms and model-based clustering, and shows how graphical tools are used to assess the results of numerical methods. Section \\(\\ref{clust-recap}\\) summarizes the chapter and revisits the data analysis strategies used in the examples. A good companion to the material presented in this chapter is , which provides data and code for practical examples of cluster analysis using R. Section \\(\\ref{clust-recap}\\) summarizes the chapter and revisits the data analysis strategies used in the examples.\n~\nBefore we can begin finding groups of cases that are similar, we need to decide on a definition of similarity. How is similarity defined? Consider a dataset with three cases and four variables, described in matrix format as\n\\[\\begin{eqnarray*}\n\\blX = \\left[ \\begin{array}{c}\n     \\blX_1 \\\\ \\blX_2 \\\\ \\blX_3 \\\\\n%\\blX_4 \\\\\n%     \\blX_5 \\\\ \\blX_6 \\\\ \\blX_7 \\\\ \\blX_8 \\\\ \\blX_9\n     \\end{array} \\right] =\n     \\left[ \\begin{array}{rrrr}\n       7.3 & 7.6 & 7.7 & 8.0 \\\\\n       7.4 & 7.2 & 7.3 & 7.2 \\\\\n%       6.7 & 7.2 & 7.1 & 7.4 \\\\\n       4.1 & 4.6 & 4.6 & 4.8 \\\\\n%       5.9 & 6.7 & 6.7 & 6.6 \\\\\n%       8.8 & 8.2 & 8.1 & 8.1 \\\\\n%       6.1 & 6.5 & 6.4 & 6.6 \\\\\n%       6.3 & 6.1 & 6.7 & 6.6 \\\\\n%       8.3 & 8.3 & 8.6 & 8.5 \\\\\n     \\end{array} \\right]\n\\end{eqnarray*}\\]\nwhich is plotted in Fig.~\\(\\ref{similarity1}\\). The Euclidean distance between two cases (rows of the matrix) is defined as\n\\[\\begin{eqnarray*}\nd_{\\rm Euc}(\\blX_i,\\blX_j) &=& ||\\blX_i-\\blX_j|| %\\\\\n% &=& \\sqrt{(X_{i1}-X_{j1})^2+\\dots + (X_{ip}-X_{jp})^2},\n~~~~~~i,j=1,\\dots, n,\n\\end{eqnarray*}\\]\nwhere \\(||\\blX_i||=\\sqrt{X_{i1}^2+X_{i2}^2+\\dots +X_{ip}^2}\\). For example, the Euclidean distance between cases 1 and 2 in the above data, is\n[ = 1.0. ]\n\nFor the three cases, the interpoint Euclidean distance matrix is\n\\[\\begin{eqnarray*}\nd_{\\rm Euc} =\n\\left[ \\begin{array}{ccc}\n0.0  ~&     &   \\\\\n1.0 ~&  0.0 ~  &  \\\\\n6.3 ~& 5.5 ~&  0.0 ~ \\\\\n\\end{array} \\right]\n\\begin{array}{r}\n\\blX_1 \\\\ \\blX_2 \\\\ \\blX_3 \\\\\n\\end{array}\n\\end{eqnarray*}\\]\n% Figure 2\nCases 1 and 2 are more similar to each other than they are to case 3, because the Euclidean distance between cases 1 and 2 is much smaller than the distance between cases 1 and 3 and between cases 2 and 3.\nThere are many different ways to calculate similarity. In recent years similarity measures based on correlation distance have become common. Correlation distance is typically used where similarity of structure is more important than similarity in magnitude.\n\nAs an example, see the parallel coordinate plot of the sample data at the right of Fig.~\\(\\ref{similarity1}\\). Cases 1 and 3 are widely separated, but their shapes are similar (low, medium, medium, high). Case 2, although overlapping with Case 1, has a very different shape (high, medium, medium, low). The correlation between two cases is defined as\n\\[\\begin{eqnarray}\n\\rho(\\blX_i,\\blX_j) = \\frac{(\\blX_i-c_i)'(\\blX_j-c_j)}\n{\\sqrt{(\\blX_i-c_i)'(\\blX_i-c_i)} \\sqrt{(\\blX_j-c_j)'(\\blX_j-c_j)}}\n\\label{corc}\n\\end{eqnarray}\\]\nWhen \\(c_i, c_j\\) are the sample means \\(\\bar{\\blX}_i,\\bar{\\blX}_j\\), then \\(\\rho\\) is the Pearson correlation coefficient. If, indeed, they are set at 0, as is commonly done, \\(\\rho\\) is a generalized correlation that describes the angle between the two data vectors. The correlation is then converted to a distance metric; one equation for doing so is as follows:\n\\[\\begin{eqnarray*}\nd_{\\rm Cor}(\\blX_i,\\blX_j) = \\sqrt{2(1-\\rho(\\blX_i,\\blX_j))}\n\\end{eqnarray*}\\]\n%Distance measures built on correlation are effectively %angular distances between points, because for two vectors \\(\\blX_i\\) and %\\(\\blX_j\\), \\(\\cos (\\angle(\\blX_i,\\blX_j)) \\propto \\blX_i'\\blX_j\\). The above distance metric will treat cases that are strongly negatively correlated as the most distant.\nThe interpoint distance matrix for the sample data using \\(d_{\\rm Cor}\\) and the Pearson correlation coefficient is\n\\[\\begin{eqnarray*}\nd_{\\rm Cor} =\n\\left[ \\begin{array}{rrrrrrrrr}\n0.0  ~&     &  \\\\\n3.6 ~ & 0.0 ~ &  \\\\\n0.1 ~ & 3.8 ~ &  0.0 ~\\\\\n\\end{array} \\right]\n\\end{eqnarray*}\\] % dist4 in R code\nBy this metric, cases 1 and 3 are the most similar, because the correlation distance is smaller between these two cases than the other pairs of cases.\n\nNote that these interpoint distances differ dramatically from those for Euclidean distance. As a consequence, the way the cases would be clustered is also be very different. Choosing the appropriate distance measure is an important part of a cluster analysis.\nAfter a distance metric has been chosen and a cluster analysis has been performed, the analyst must evaluate the results, and this is actually a difficult task. A cluster analysis does not generate \\(p\\)-values or other numerical criteria, and the process tends to produce hypotheses rather than testing them. Even the most determined attempts to produce the ``best’’ results using modeling and validation techniques may result in clusters that, although seemingly significant, are useless for practical purposes. As a result, cluster analysis is best thought of as an exploratory technique, and it can be quite useful despite the lack of formal validation because of its power in data simplification.\nThe context in which the data arises is the key to assessing the results. If the clusters can be characterized in a sensible manner, and they increase our knowledge of the data, then we are on the right track. To use an even more pragmatic criterion, if a company can gain an economic advantage by using a particular clustering method to carve up their customer database, then that is the method they should use.\n% This paragraph is a bit orphaned here. It should be part of a % longer discussion about assessing results. dfs %We’ve already drawn your attention to the parallel coordinate plot in %Fig.~\\(\\ref{similarity1}\\). It’s a helpful plotting method to use with %cluster analysis, both for exploring the data and for assessing the %results.\n% Introduce different clustering techniques here? hierarchical, k-means, % model-based, self-organizing maps.\n~\n \nA purely graphical spin and brush approach to cluster analysis works well when there are good separations between groups, even when there are marked differences in variance structures between groups or when groups have non-linear boundaries. It does not work very well when there are clusters that overlap, or when there are no distinct clusters but rather we simply wish to partition the data. In these situations it may be better to begin with a numerical solution and to use visual tools to evaluate it, perhaps making refinements subsequently. Several examples of the spin and brush approach are documented in the literature, such as and .\n\nThis description of the spin and brush approach on , a particle physics dataset, follows that in . The data contains seven variables. We have no labels for the data, so when we begin, all the points have the same color and glyph. Watch the data in a tour for a few minutes and you will see that there are no natural clusters, but there is clearly structure.\n%%% Difficulty rating, no separated clusters, low-dimensional %%% structure embedded in high-d….\n \nWe will use the projection pursuit guided tour to help us find that structure. We will tour on the principal components, rather than the raw variables, because that improves the performance of the projection pursuit indexes. Two indexes are useful for detecting clusters: holes and central mass. The holes index is sensitive to projections where there are few points (i.e., a hole) in the center. The central mass index is the opposite: It is sensitive to projections that have too many points in the center. These indexes are explained in Chap.~\\(\\ref{toolbox}\\).\nThe holes index is usually the most useful for clustering, but not for the particle physics data, because it does not have a ``hole’’ at the center. The central mass index is the most appropriate here. Alternate between optimization (a guided tour) and the unguided grand tour to find local maxima, each of which is a projection that is potentially useful for revealing clusters. The process is illustrated in Fig.~\\(\\ref{prim7-tour}\\).\nThe top left plot shows the initial default projection, the second principal component plotted against the first. The plot next to it shows the projected data corresponding to the first local maximum found by the guided tour. It has three strands of points stretching out from the central clump and several outliers. We brush the points along each strand, in red, blue, and orange, and we paint the outliers with open circles. (See the next two plots.) We continue by choosing a new random start for the guided tour, and then waiting until new territory in the data is discovered. \nThe optimization settles on a projection where there are three strands visible, as observed in the leftmost plot in the second row. Two strands have been previously brushed, but a new one has appeared; this is painted yellow.\nWe also notice that there is another new strand hidden below the red strand. It is barely distinguishable from the red strand in this projection, but the two strands separate widely in other projections. It is tricky to brush it, because it is not well separated in this projection. We use a trick: Hide the red points, brush the new strand green, and ``unhide’’ the red points again (middle plot in the second row).\nFive clusters have been easily identified, and now finding new clusters in this data is increasingly difficult. After several more alternations between the grand tour and the guided tour, we find something new (shown in the rightmost plot in the second row): One more strand has emerged, and we paint it pink.\n% Figure 3\nThe results at this stage are summarized by the bottom row of plots. There is a very visible triangular component (in gray) revealed when all of the colored points are hidden. We check the shape of this cluster by drawing lines between outer points to contain the inner ones. Touring after the lines are drawn helps to check how well they match the shape of the clusters. The colored groups pair up at each vertex, and we draw in the shape of these too — a single line matches the structures reasonably well.\nThe final step of the spin and brush clustering is to clean up this solution, touching up the color groups by continuing to tour, and repainting a point here and there. When we finish, we have found seven clusters in this data that form a very strong geometric object in the data space: a two-dimensional (2D) triangle, with two one-dimensional (1D) strands extending in different directions from each vertex. The lines confirm our understanding of this object’s shape, because the points stay close to the lines in all of the projections observed in a tour.\n% Figure 4\nThe next stage of cluster analysis is to characterize the nature of the clusters. To do that, we would calculate summary statistics for each cluster, and plot the clusters (Fig.~\\(\\ref{prim7-model}\\)). When we plot the clusters of the particle physics data, we find that the 2D triangle exists primarily in the plane defined by X3 and X5. If you do the same, notice that the variance in measurements for the gray group is large in variables X3 and X5, but negligible in the other variables. The linear pieces can also be characterized by their distributions on each of the variables. With this example, we have shown that it is possible to uncover very unusual clusters in data without any domain knowledge.\nHere are several tips about the spin and brush approach.\nFinally, the spin and brush method will not work well if there are no clear separations in the data, and the clusters are high-dimensional, unlike the low-dimensional clusters found in this example.\n~\n\n \nHierarchical cluster algorithms sequentially fuse neighboring points to form ever-larger clusters, starting from a full interpoint distance matrix. is described by a ``linkage method’’: For example, single linkage uses the smallest interpoint distance between the members of a pair of clusters, complete linkage uses the maximum interpoint distance, and average linkage uses the average of the interpoint distances. A good discussion on cluster analysis can be found in or .\n% I changed the text to match the figure. %(Middle row) Clusters 1, 3 and 5 carve up the base %triangle of the data. (Bottom row) Clusters 4 and 6 divide one of the %arms, and cluster 7 is a singleton cluster.\nFigure~\\(\\ref{prim7-hier}\\) contains several plots that illustrate the results of the hierarchical clustering of the particle physics data; we used Euclidean interpoint distances and the average linkage method. This is computed by:\n\nThe dendrogram at the top shows the result of the clustering process. Several large clusters were fused late in the process, with heights (indicated by the height of the horizontal segment connecting two clusters) well above those of the first joins; we will want to look at these. Two points were fused with the rest at the very last stages, which indicates that they are outliers and have been assigned to singleton clusters.\n% Figure 5\n We cut the dendrogram to produce nine clusters because we would expect to see seven clusters and a few outliers based on our observations from the spin and brush approach, and our choice looks reasonable given the structure of the dendrogram. (In practice, we would usually explore the clusters corresponding to several different cuts of the dendrogram.) We assign each cluster an integer identifier, and in the following plots, you see the results of highlighting one cluster at a time and then running the grand tour to focus on the placement of that cluster within the data. This R code follows this sequence of actions:\nThe top three plots show, respectively, clusters 1, 2, and 3: These clusters roughly divide the main triangular section of the data into three. The bottom row of plots show clusters labeled 5, and 6, which lie along the linear pieces, and cluster 7, which is a singleton cluster corresponding to an outlier in the data.\nThe results are reasonably easy to interpret. Recall that the basic geometry underlying this data is that there is a 2D triangle with two linear strands extending from each vertex. The hierarchical average linkage clustering of the particle physics data using nine clusters essentially divides the data into three chunks in the neighborhood of each vertex (clusters 1, 2, and 3), three pieces at the ends of the six linear strands (4, 5, and 6), and three clusters containing outliers (7, 8, and 9). This data provides a big challenge for any cluster algorithm — low-dimensional pieces embedded in high-dimensional space — and we are not surprised that no algorithm that we have tried will extract the structure we found using interactive tools.\nThe particle physics dataset is ill-suited to hierarchical clustering, but this extreme failure is an example of a common problem. When performing cluster analysis, we want to group the observations into clusters without knowing the distribution of the data. How many clusters are appropriate? What do the clusters look like? Could we just as confidently divide the data in several different ways and get very different but equally valid interpretations? Graphics can help us assess the results of a cluster analysis by helping us explore the distribution of the data and the characteristics of the clusters.\n\nModel-based clustering fits a multivariate normal mixture model to the data. It uses the EM algorithm to fit the parameters for the mean, variance–covariance of each population, and the mixing proportion. The variance–covariance matrix is re-parametrized using an eigen-decomposition\n[ _k = _kD_kA_kD_k’, ~~~k=1, , g ~~ ]\nresulting in several model choices, ranging from simple to complex:\nNote the distribution descriptions spherical'' andellipsoidal.’’ These are descriptions of the shape of the variance–covariance for a multivariate normal distribution. A standard multivariate normal distribution has a variance–covariance matrix with zeros in the off-diagonal elements, which corresponds to spherically shaped data. When the variances (diagonals) are different or the variables are correlated, then the shape of data from a multivariate normal is ellipsoidal.\n\n\nThe models are typically scored using the Bayes Information Criterion (BIC), which is based on the log likelihood, number of variables, and number of mixture components. They should also be assessed using graphical methods, as we demonstrate using the data. %To introduce the methods We start with two of the five real-valued variables ( and ) and one (Blue).\nThe goal is to determine whether model-based methods can discover clusters that will distinguish between the two sexes.\n% Figure 6 – too large for the page, but maybe it can just % be reduced in the R code.\nFigure~\\(\\ref{model-based1}\\) contains the plots we will use to examine the results of model-based clustering on this reduced dataset. The top leftmost plot shows the data, with male and female crabs distinguished by color and glyph. The two sexes correspond to long cigar-shaped objects that overlap a bit, particularly for smaller crabs. The ``cigars’’ are not perfectly regular: The variance of the data is smaller at small values for both sexes, so that our cigars are somewhat wedge-shaped. The orientation of the longest direction of variance differs slightly between groups too: The association has a steeper slope for female crabs than for males, because female crabs have relatively larger than male crabs. With the heterogeneity in variance–covariance, this data does not strictly adhere to the multivariate normal mixture model underlying model-based methods, but we hope that the departure from regularity is not so extreme that it prevents the model from working.\nThe top right plot shows the BIC results for a full range of models, EEE, EEV, and VVV variance–covariance parametrization for one to nine clusters:\nThe best model, EEV-2, used the equal volume, equal shape, and different orientation variance–covariance parametrization and divided the data into two clusters. This solution seems to be perfect! We can imagine that this result corresponds to two equally shaped ellipses that intersect near the lowest values of the data and angle toward higher values. We will check by drawing ellipses representing the variance–covariance parametrization on the data plots. The parameter estimates are used to scale and center the ellipses:\nyielding the plots in the middle and bottom rows of Fig.~\\(\\ref{model-based1}\\). In the plot of the data alone, cluster id is used for the color and glyph of points. (Compare this plot with the one directly above it, in which the classes are known.) Cluster 1 mostly corresponds to the female crabs, and cluster 2 to the males, except that all the small crabs, both male and female, have been assigned to cluster 1. In the rightmost plot, we have added ellipses representing the estimated variance–covariances. The ellipses are the same shape, as specified by the model, but the ellipse for cluster 2 is shifted toward the large values.\nThe next two best models, according to the BIC values, are EEV-3 and VVV-2. The plots in the bottom row display representations of the variance–covariances for these models. EEV-3 organizes the crabs into three clusters according to the size, not the sex, of the crabs. The VVV-2 solution is similar to EEV-2.\nWhat solution is the best for this data? If the EEV-3 model had done what we intuitively expected, it would have been ideal: The sexes of smaller crabs are indistinguishable, so they should be afforded their own cluster, whereas larger crabs could be clustered into males and females. However, the cluster that includes the small crabs also includes a fair number of middle-sized female crabs.\nFinally, model-based clustering did not discover the true gender clusters. Still, it produced a useful and interpretable clustering of the crabs.\nPlots are indispensable for choosing an appropriate cluster model. It is easy to visualize the models when there are only two variables but increasingly difficult as the number of variables grows. Tour methods save us from producing page upon page of plots. They allow us to look at many projections of the data, which enables us to conceptualize the shapes and relationships between clusters in more than two dimensions.\nFigure~\\(\\ref{model-based2}\\) displays the graphics for the corresponding high-dimensional investigation using all five variables and four classes (two species, two sexes) of the . The cluster analysis is much more difficult now. Can model-based clustering uncover these four groups?\nIn the top row of plots, we display the raw data, before modeling. Each plot is a tour projection of the data, colored according to the four true classes. The blue and purple points are the male and female crabs of the blue species, and the yellow and orange points are the male and female crabs of the orange species. This table will help you keep track:\nThe clusters corresponding to the classes are long thin wedges in five dimensions (5D), with more separation and more variability at larger values, as we saw in the subset just discussed. The rightmost plot shows the ``looking down the barrel’’ view of the wedges. At small values the points corresponding to the sexes are mixed (leftmost plot). The species are reasonably well separated even for small crabs (middle plot). The variance–covariance is wedge-shaped rather than elliptical, but again we hope that modeling based on the normal distribution that has elliptical variance–covariance will be adequate.\n% Figure 7\nIn the results from model-based clustering, there is very little difference in BIC value for variance–covariance models EEE, EEV, VEV, and VVV, with a number of clusters from three to eight. The best model is EEV-3, and EEV-4 is second best. We know that three clusters is insufficient to capture the four classes we have in mind, so we examine the four-cluster solution.\nThe bottom row of plots in Fig.~\\(\\ref{model-based2}\\) illustrates the four-cluster model in three different projections, matching the projections in the top row showing the data.\nIn each view, the ellipsoids representing the variance–covariance estimates for the four clusters are shown in four shades of gray, because none of these match any actual cluster in the data. Remember that these are 2D projections of 5D ellipsoids. The resulting clusters from the model do not match the true classes very well. The result roughly captures the two species, as we see in the plots in the first column, where the species are separated both in the data and in the ellipses. On the other hand, the grouping corresponding to is completely missed: See the plots in the middle and right-hand columns, where sexes are separated in the actual data but the ellipses are not separated. Just as in the smaller subset (two variables, one species) discussed earlier, there is a cluster for the smaller crabs of both species and sexes. The results of model-based clustering on the full 5D data are very unsatisfactory.\nIn summary, plots of the data and parameter estimates for model-based cluster analysis are very useful for understanding the solution, and choosing an appropriate model. Tours are very helpful for examining the results in higher dimensions, for arbitrary numbers of variables.\n% Also, using principal components rather than the raw variables…\n\nA self-organizing map (SOM) is constructed using a constrained \\(k\\)-means algorithm. A 1D or 2D net is stretched through the data. The knots, in the net, form the cluster means, and the points closest to the knot are considered to belong to that cluster. The similarity of nodes (and their corresponding clusters) is defined as proportional to their distance from one another on the net.\nWe will demonstrate SOM using the music data. The data has 62 cases, each one corresponding to a piece of music. For each piece there are seven variables: the artist, the type of music, and five characteristics, based on amplitude and frequency, that were computed using the first 40 seconds of the piece on CD. The music used included popular rock songs by Abba, the Beatles, and the Eels; classical compositions by Vivaldi, Mozart and Beethoven; and several new wave pieces by Enya. Figure~\\(\\ref{music-som}\\) displays a typical view of the results of clustering using SOM on the music data. Each data point corresponds to a piece of music and is labeled by the band or the composer. The map was generated by this R code:\nThe left plot in Fig.~\\(\\ref{music-som}\\) is called the 2D map view. Here we have used a \\(6\\times 6\\) net pulled through the 5D data. The net that was wrapped through the high-dimensional space is straightened and laid out flat, and the points, like fish in a fishing net, are laid out where they have been trapped. In the plot shown here, the points have been jittered slightly, away from the knots of the net, so that the labels do not overlap too much. If the fit is good, the points that are close together in this 2D map view are close together in the high-dimensional data space and close to the net as it was placed in the high-dimensional space.\nMuch of the structure in the map is no surprise: The rock (purple) and classical tracks (green) are on opposing corners, with rock in the upper right and classical in the lower left. The Abba tracks are all grouped at the top and left of the map. The Beatles and Eels tracks are mixed. There are some unexpected associations: For example, one Beatles song, which turns out to be ``Hey Jude,’’ is mixed among the classical compositions!\n% Figure 8\nConstruction of a self-organizing map is a dimension reduction method, akin to multidimensional scaling or principal component analysis . Using principal component analysis to find a low-dimensional approximation of the similarity between music pieces, yields the second plot in Fig.~\\(\\ref{music-som}\\). There are many differences between the two representations. The SOM has a more even spread of music pieces across the grid, in contrast to the stronger clumping of points in the PCA view. Indeed, the PCA view shows several outliers, notably one of the Vivaldi compositions, which could lead us to learn things about the data that we might miss by relying exclusively on the SOM. \nThese two methods, SOM and PCA, have provided two contradictory clustering models. How can we determine which is the more accurate description of the data structure? An important part of model assessment is plotting the model in relation to the data. Although plotting the low-dimensional map is the common way to graphically assess the SOM results, it is woefully limited. If a model has flaws, they may not show up in this view and will only appear in plots of the model in the data space. We will use the grand tour to create these plots, and this will help us assess the two models.\n%Although the reduced dimension view is the common way to graphically %assess the SOM results, it is woefully limited. What might appear to %be an appealing result when seen in the map view may in fact be a poor %fit, but we may not realize that without looking at plots of the model %in the data space.\nWe will use a grand tour to view the net wrapped in among the data, hoping to learn how the net converged to this solution, and how it wrapped through the data space. Actually, it is rather tricky to fit a SOM: Like many algorithms, it has a number of parameters and initialization conditions that affect the outcome.\nTo set up the data, we will need to add variables containing the map coordinates to the data:\nBecause this data has several useful categorical labels for each row, we will want to keep this information in the data when it is loaded into GGobi:\nAdd the edges that form the SOM net:\nAnd finally color the points according to the type of music:\nThe results can be seen in Figs.~\\(\\ref{clust-SOMa}\\) and \\(\\ref{clust-SOMb}\\). The plots show two different states of the fitting process and of the SOM net cast through the data. In both fits, a \\(6\\times 6\\) grid is used and the net is initialized in the direction of the first two principal components. In both fits the variables were standardized to have mean equal to zero and standard deviation equal to 1. The first SOM fit, shown in \\(\\ref{clust-SOMa}\\), was obtained using the default settings; it gave terrible results. At the left is the map view, in which the fit looks deceptively reasonable. The points are spread evenly through the grid, with rock tracks (purple) at the upper right, classical tracks (green) at the lower left, and new wave tracks (the three black rectangles) in between. The tour view in the same figure, however, shows the fit to be inadequate. The net is a flat rectangle in the 5D space and has not sufficiently wrapped through the data. This is the result of stopping the algorithm too soon, thus failing to let it converge fully.\n% Figure 9\n% Figure 10\nFigure \\(\\ref{clust-SOMb}\\) shows our favorite fit to the data. The data was standardized, we used a 6$$6 net, and we ran the SOM algorithm for 1,000 iterations. The map is at the top left, and it matches the map already shown in Fig.~\\(\\ref{music-som}\\), except for the small jittering of points in the earlier figure. The other three plots show different projections from the grand tour. The upper right plot shows how the net curves with the nonlinear dependency in the data: The net is warped in some directions to fit the variance pattern. At the bottom right we see that one side of the net collects a long separated cluster of the Abba tracks. We can also see that the net has not been stretched out to the full extent of the range of the data. It is tempting to manually manipulate the net to stretch it in different directions and update the fit.\nIt turns out that the PCA view of the data more accurately reflects the structure in the data than the map view. The music pieces really are clumped together in the 5D space, and there are a few outliers. \n \nTo compare the results of two methods we commonly compute a confusion table. For example, Table \\(\\ref{confusion}\\) is the confusion table for five-cluster solutions for the data from \\(k\\)-means and Ward’s linkage hierarchical clustering, generated by:\nThe numerical labels of clusters are arbitrary, so these can be rearranged to better digest the table. There is a lot of agreement between the two methods: Both methods agree on the cluster for 48 tracks out of 62, or 77% of the time. We want to explore the data space to see where the agreement occurs and where the two methods disagree.\n% Figure 11\n\nIn Fig.~\\(\\ref{clust-compare}\\), we link jittered plots of the confusion table for the two clustering methods with 2D tour plots of the data. The first column contains two jittered plots of the confusion table. In the top row of the figure, we have highlighted a group of 14 points that both methods agree form a cluster, painting them as orange triangles. From the plot at the right, we see that this cluster is a closely grouped set of points in the data space. From the tour axes we see that has the largest axis pointing in the direction of the cluster separation, which suggests that music pieces in this cluster are characterized by high values on (variable 3 in the data); that is, they have large variance in frequency. By further investigating which tracks are in this cluster, we can learn that it consists of a mix of tracks by the Beatles (Penny Lane,''Help,’’ Yellow Submarine,'' ...)  and the Eels (Saturday Morning,’’ ``Love of the Loveless,’’ …).\nIn the bottom row of the figure, we have highlighted a second group of tracks that were clustered together by both methods, painting them again using orange triangles. In the plot to the right, we see that this cluster is closely grouped in the data space. Despite that, this cluster is a bit more difficult to characterize. It is oriented mostly in the negative direction of (variable 4), so it would have smaller values on this variable. But this vertical direction in the plot also has large contributions from variables 3 () and 7 (). If you label these eight points on your own, you will see that they are all Abba songs (Dancing Queen,''Waterloo,’’ ``Mamma Mia,’’ …). % slightly reworded this last sentence to make it clear that this % is not shown in any figure but still state the result. dfs\nWe have explored two groups of tracks where the methods agree. In a similar fashion, we could also explore the tracks where the methods disagree.\n\nThe final step in a cluster analysis is to characterize the clusters. Actually, we have engaged in cluster characterization throughout the examples, because it is an intrinsic part of assessing the results of any cluster analysis. If we cannot detect any numerical or qualitative differences between clusters, then our analysis was not successful, and we start over with a different distance metric or algorithm.\nHowever, once we are satisfied that we have found a set of clusters that can be differentiated from one another, we want to describe them more formally, both quantitatively and qualitatively. We characterize them quantitatively by computing such statistics as cluster means and standard deviations for each variable. We can look at these results in tables and in plots, and we can refine the qualitative descriptions of the clusters we made during the assessment process.\n\nThe parallel coordinate plot is often used during this stage. Figure~\\(\\ref{clust-char}\\) shows the parallel coordinate plot for the first of the clusters of music pieces singled out for study in the previous section. Ward’s hierarchical linkage and \\(k\\)-means both agreed that these music pieces form a cluster. Since the matrix and the number of clusters are both small, we plot the raw data; for larger problems, we might plot cluster statistics as well [see, for example, ].\n% figure 12\nThis cluster containing a mix of Beatles and Eels music has high values on , medium values of , high values of , high values of , and varied values. That is, these pieces of music have a large variance in frequency, high frequency, and high energy relative to the other music pieces.\n%\n~\n% Generating clusters % Interpreting clusters % Model assessment % confusion tables % SOM – grid % model-based – compare ellipse to shape\nGraphics are invaluable for cluster analysis, whether they are used to find clusters or to interpret and evaluate the results of a cluster analysis arrived at by other means.\nThe spin and brush approach can be used to get an initial look at the data and to find clusters, and occasionally, it is sufficient. When the clustering is the result of an algorithm, a very useful first step is to paint the points by cluster membership and to look at the data to see whether the clustering seems sensible. How many clusters are there, and how big are they? What shape are they, and do they overlap one another? Which variables have contributed most to the clustering? Can the clusters be qualitatively described? All the plots we have described can be useful: scatterplots, parallel coordinate plots, and area plots, as well as static plots like dendrograms.\nWhen the clusters have been generated by a model, we should also use graphics to help us assess the model. If the model makes distributional assumptions, we can generate ellipses and compare them with the clusters to see whether the shapes are consistent. For self-organizing maps the tour can assist in uncovering problems with the fit, such as when the map wraps in on itself through the data making it appear that some cases are far apart when they are truly close together. A confusion table can come alive with linked brushing, so that mismatches and agreements between methods can be explored. \n% Euclidean distance, vs standardizing each row… % Principal component coordinates vs raw variables."
  },
  {
    "objectID": "temporal.html",
    "href": "temporal.html",
    "title": "Time series",
    "section": "",
    "text": "computing features, and exploring feature space linked to individual time series plots\nprojection pursuit of multiple time series, 1D indexes against time"
  }
]