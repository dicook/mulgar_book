{
  "hash": "c813f1c74a5a0c97c187cf42b248ed5e",
  "result": {
    "engine": "knitr",
    "markdown": "## Non-linear dimension reduction\n\nNon-linear dimension reduction (NLDR) aims to find a single low-dimensional representation of the high-dimensional data that shows the main features of the data. If there are separated clusters present then it might be a layout where the clusters are all distinct, in a way that a single linear projection could not reveal. For observations falling on a low-dimensional non-linear manifold in high dimensions the NLDR might unfold or unroll it so that they are represented in a plane where the distances are similar to their distance along the manifold. \n\n\\index{manifold}\n\\index{interpoint distance}\n\nMost techniques only require an interpoint similarity or distance matrix as the main ingredient, rather than the full $p$-dimensional data. A classic example where only this information is the morse code data reported by @morsecode, and available in the `xgobi` software [@xgobi]. The data contains the counts of the number of times that a letter is mistaken for another letter collected in an experimental study. However, here we focus on problems where the full $p$-dimensional data is available, so we can also compare structure perceived using the tour on the high-dimensional space, relative to structure revealed in the low-dimensional embedding.\n\n::: {.content-visible when-format=\"html\"}\n::: info\nA common myth is that non-linear dimension reduction captures non-linear patterns in the high-dimensional data. It may or may not do this. The term means that the methods transform the data non-linearly into a useful (or not) visual representation.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n\\infobox{A common myth is that non-linear dimension reduction captures non-linear patterns in the high-dimensional data. It may or may not do this. The term means that the methods transform the data non-linearly into a useful (or not) visual representation.}\n\n:::\n\n## Classical methods\n\nIn statistics, methods for non-linear dimension reduction arise with multidimensional scaling (MDS) [@Kr64a].  Classically, MDS minimises some function of the difference between two interpoint distance matrices, the distance between points in the high-dimensions, and in the low-dimensional representations using a stress function ($C_{L2}$):\n\n$$\nC_{L2} = \\left(\\sum_{i, j=1; i\\neq j}^n (d_p(i,j) - d_k(i,j))^2\\right)^{1/2}\n$$\nwhere $(d_p(i,j))$ are the distances between all pairs of points in $p$-dimensions, and $d_k(i,j)$ is the distance between the points in the low-dimensional ($k$) space. PCA is a special case of MDS, in that, the first two PCs provide the solution to the above equation if distance is Euclidean. Each PC is a linear projection, but generally MDS can provide non-linear transformations to represent unusual high-dimensional patterns. \n\nThe choices for defining $d_p$ are many, including ones that are locally, using say $k$ nearest neighbours, or globally computed. Distances can also be transformed using some function, including ranks instead of actual distance. Another approach modifies the stress function the $L_2$-norm, by replacing the 2 with an arbitrary power. Others yet use transformations of the distances. A good resource for learning about MDS and the many choices is @BG05.\n\n\\index{data!swiss roll}\n\nThe methods *isomap* [@isomap] and *local linear embedding* (LLE) are two methods where local distance is used, and they were designed to unwrap data from a manifold. @fig-swiss-pdf illustrates how the results on the classic swiss roll data can differ according to method, in useful ways. The observations lie on a 2D non-linear manifold in 3D. The data is a manufactured example introduced to illustrate the ability of isomap and LLE to unwrap the swiss roll and lay out the points in a rectangle as though one was travelling along the surface. \n\n\\index{software!Rdimtools}\n\\index{software!cardinalR}\n\\index{dimension reduction!isomap}\n\\index{dimension reduction!local linear embedding (LLE)}\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-swiss-html layout=\"[[33, 33, 33]]\"}\n\n![tour](gifs/swiss.gif){width=280 alt=\"Rotating 3D plot where points are spread uniformly on a swiss roll shape.\"}\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![PCA](5-nldr_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-alt='This is an untitled chart has x-axis \\'PC2\\' and y-axis \\'PC3\\' with no labels or legend. Colour is used to show a variable d. The chart is a set of 1652 solid circle points laid out in a spiral pattern, with colours starting with one end of the rainbow smoothly transitioning the the other end of the rainbow scale at the other end of the spiral.' width=100%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![isomap](5-nldr_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-alt='This is an untitled chart has x-axis \\'PC2\\' and y-axis \\'PC3\\' with no labels or legend. Colour is used to show a variable d. The chart is a set of 1652 solid circle points laid out in a slightly squashed rectangle, with colours starting with one end of the rainbow on the left and smoothly transitioning the the other end of the rainbow scale at the right.' width=100%}\n:::\n:::\n\n\n\n\n\n\n\n\nThe classic swiss roll data constructed to illustrate isomap, as shown in (a) a tour, (b) lowest two principal components, (c) NLDR provided by isomap. The spiral can be discovered by many methods, including different principal compoents depending on the scaling of the data, or using projection pursuit, or nonlinear MDS. Being able to unwrap the spiral and lay out the points along a plane is achieved by isomap and LLE with careful choice of parameters. Colour indicates distance along this spiral.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {#fig-swiss-pdf layout=\"[[33, 33, 33]]\"}\n\n![tour](images/swiss.png){width=143 fig-alt=\"Single projection from a rotating 3D plot where points are spread in a swiss roll shape.\"}\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![PCA](5-nldr_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-alt='This is an untitled chart has x-axis \\'PC2\\' and y-axis \\'PC3\\' with no labels or legend. Colour is used to show a variable d. The chart is a set of 1652 solid circle points laid out in a spiral pattern, with colours starting with one end of the rainbow smoothly transitioning the the other end of the rainbow scale at the other end of the spiral.' width=100%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![isomap](5-nldr_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-alt='This is an untitled chart has x-axis \\'PC2\\' and y-axis \\'PC3\\' with no labels or legend. Colour is used to show a variable d. The chart is a set of 1652 solid circle points laid out in a slightly squashed rectangle, with colours starting with one end of the rainbow on the left and smoothly transitioning the the other end of the rainbow scale at the right.' width=100%}\n:::\n:::\n\n\n\n\n\n\n\n\nThe classic swiss roll data constructed to illustrate isomap, as shown in (a) a random tour projection, (b) lowest two principal components, (c) NLDR provided by isomap. The spiral can be discovered by many methods, including different principal compoents depending on the scaling of the data, or using projection pursuit, or nonlinear MDS. Being able to unwrap the spiral and lay out the points along a plane is achieved by isomap and LLE with careful choice of parameters. Colour indicates distance along this spiral. {{< fa play-circle >}}\n:::\n:::\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n\n\\index{dimension reduction!MDS}\n\\index{dimension reduction!t-SNE}\n\\index{dimension reduction!UMAP}\n\nThe swiss roll data is interesting in the sense that from a visual perspective it is interesting to be able to *discover* the spiral structure. Particularly this would be a more challenging if the 2D spiral was in data with more than three variables, and all the additional ones were noise (like `z` in this example). Methods like projection pursuit, PCA or MDS can discover the spiral if all variables are measured on the same scale (say -1, 1) but not standardised because the variance of the spiral shape is different from that of noise. \nBeing able to discover the manifold (here, a 2D surface matching a swiss roll) can be useful for conducting further analysis. The points are now organised according to distance relative to the manifold on which they live. This layout is like taming a lion, it feels like an achievement, but realistically it is very difficult to achieve from these methods: data scale choice or a different number of $k$ nearest neighbours, changes the layout dramatically. Organising the points into distance along the spiral could have equally been achieved by discovering the spiral, and computing radial distance, as done to produce the colouring of points in @fig-swiss-pdf. This approach would also extend beyond 3D, to any additional number of noise dimensions.\n\n## Contemporary approaches\n\n\\index{software!uwot}\n\\index{software!Rtsne}\n\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Two non-linear embeddings of the non-linear clusters data: (a) t-SNE, (b) UMAP. One suggests five clusters and the other four, and also disagree on the cluster shapes.](5-nldr_files/figure-pdf/fig-nldr-clusters-1.pdf){#fig-nldr-clusters fig-alt='This chart has two plots titled \\'(a) t-SNE\\', with x-axis \\'tsne1\\' and y-axis \\'tsne2\\', and \\'(b) UMAP\\' with x-axis \\'umap1\\' anf y-axis \\'umap2\\'. The chart \\'(a)\\' is a set of 1268 solid circle points arranged with a strip going from bottom let to top right, two C-shapes above and below the line and two small concetration of dots at the middle bottom and top. The points in chart \\'(b)\\' are arranged like a tilted smiley face.' width=100%}\n:::\n:::\n\n\n\n\n\n\n\n\nPopular methods in current use for NLDR include t-SNE [@Maaten2008] and UMAP [@McInnes2018]. These approaches use a different approach for comparing the high-dimensional and low-dimensional distances, based on Kullback-Leibler divergence:\n\n$$\nC_{KL} = \\sum_{i,j} p_{ij}\\log\\left(\\frac{p_{ij}}{q_{ij}}\\right)\n$$\nwhere $i,j$ indicate two observations in the data, and $p_{ij}, q_{ij}$ are the probability distributions of the distances in $p$ and $k$ dimensions, respectively. To obtain $p_{ij}$ the interpoint distances are computed, and normalised by dividing by $\\sum_{i,j} p_{ij}$, as is done similarly to obtain $q_{ij}$. A further step in t-SNE is transforming the distances through the CDF of a specified distribution (Gaussian in $p$-D and $t$-distribution in $k$-D) to reflect differences is volume between the high and low dimensional spaces, akin to the transformation used in the sage tour (@sagetour). (See @fig-density illustrating the crowding effect.) The normalisation effectively means small distances, like distances between points that are in a cluster, even if clusters are bigger or smaller, become relatively closer in comparison with all the large distances. \n\nIn practice, the optimisation is conducted with a likelihood function:\n\n$$\nC_{LV} = \\sum_{i \\neq j} p_{ij} \\log\\left(w_{ij}\\right) + \\gamma \\sum_{i \\neq j} \\log\\left(w_{ij}\\right)\n$$\nwhere $w_{ij}$ are the unnormalised similarities in the $k$-dimensional representation, and the second component weighted by $\\gamma$ adds a repulsive force to push points apart. UMAP optimises a variation of $C_{LV}$. Both t-SNE and UMAP are designed with cluster structure in mind, and may provide useful low-dimensional representations of clustering in high-dimensions. \n\n@fig-nldr-clusters shows two NLDR views of the `clusters_nonlin` data set from the `mulgar` package. Both suggest that there are four clusters, and that some clusters are non-linearly shaped. They disagree on the type of non-linear pattern, where t-SNE represents one cluster as a wavy-shape and UMAP both have a simple parabolic shape.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n![Grand tour of the nonlinear clusters data set, shows four clusters. Two are very small and spherical in shape. One is large, and has a sine wave shape, and the other is fairly small with a bent rod shape.](gifs/clusters_nonlin.gif){#fig-clusters-nonlin-html fig-alt=\"Animating plot of four variables, where different scatterplots of the porjections show two small spherical clusters, one C-shape cluster and and S-shaped stripe of points.\"}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n::: {#fig-clusters-nonlin-pdf layout-ncol=2}\n\n![](images/clusters_nonlin_60.png){width=220 fig-alt=\"2D projection from 4D shown as a scatterplot. Points are organised with a small curve cluster at top left, a slight but large S-shape on the right, and two small circular clumps in the middle. There is a large circle with segments in overlaying the plot with a large segment labelled 'x2' pointing to 8 o'clock, 'x1' pointing to 1 o'clock, 'x3' pointing to 5:30, and smaller 'x4' pointing to 4 o'clock.\"}\n\n![](images/clusters_nonlin_272.png){width=220 fig-alt=\"2D projection from 4D shown as a scatterplot. Points are organised with a large S-shape from top left to bottom right, surrounded by two small circular clumps and a small half C-shape. There is a large circle with segments in overlaying the plot with a large segment labelled 'x2' pointing to 2 o'clock, smaller 'x1' pointing to midnight, 'x3' pointing to 10 o'clock, and smaller 'x4' pointing to 6 o'clock.\"}\n\nTwo frames from a grand tour of the nonlinear clusters data set, shows four clusters. Two are very small and spherical in shape. One is large, and has a sine wave shape, and the other is fairly small with a bent rod shape. {{< fa play-circle >}}\n:::\n:::\n\nThe full 4D data is shown with a grand tour in @fig-clusters-nonlin-pdf. The four clusters suggested by the NLDR methods can be seen. We also get a better sense of the relative size and proximity of the clusters. There are two small spherical clusters, one quite close to the end of the large sine wave cluster. The fourth cluster is relatively small, and has a slight curve, like a bent rod. The t-SNE representation is slightly more accurate than the UMAP representation. We would expect that the wavy cluster is the sine wave seen in the tour. \n\n\n::: {.content-visible when-format=\"html\"}\n::: info\nNLDR can provide useful low-dimensional summaries of high-dimensional structure but you need to check whether it is a sensible and accurate representation by comparing with what is perceived from a tour.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\infobox{NLDR can provide useful low-dimensional summaries of high-dimensional structure but you need to check whether it is a sensible and accurate representation by comparing with what is perceived from a tour.}\n:::\n\n## Assessing an NLDR layout\n\n@fig-nldr-clusters shows that NLDR can produce useful low-dimensional summaries of structure in high-dimensional data. However, it can be a frustrating exercise because **very different** representations can result depending on the parameter choices, and even the random number seeding the fit. (You can check this by changing the `set.seed` in the code above, and by changing from the default parameters.) Also, it may not be possible to represent the high-dimensional structures faithfully in low dimensions. \n\nDiagnosing a layout is an important first step to determine if it can be appropriately used in further analysis. The approach for doing this date back to the methods discussed in @ggvisjcgs. The NLDR view needs to be interactively linked to other plots of the data, and especially to a tour with the specific purpose to determine the faithfulness to the structure present in high dimensions. For example, with the data in @fig-nldr-clusters, we would want to know which of the two curved clusters in the UMAP representation correspond to the sine wave cluster.\n\n### Using `liminal`\n\\index{software!liminal}\n\n@fig-liminal-clusters-nonlin shows how the NLDR plot can be linked to a tour view, using the `liminal` package, to better understand how well the structure of the data is represented. Here we learn that the smile in the UMAP embedding is the small bent rod cluster, and that the unibrow is the sine wave. \n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(liminal)\numap_df <- data.frame(umapX = cnl_umap[, 1],\n                      umapY = cnl_umap[, 2])\nlimn_tour_link(\n  umap_df,\n  clusters_nonlin,\n  cols = x1:x4\n)\n```\n:::\n\n\n\n\n\n\n\n\n::: {#fig-liminal-clusters-nonlin layout-ncol=1}\n\n![Smile matches bent rod.](images/liminal-clusters-nonlin1.png){#fig-smile fig-alt=\"Screenshot of an interface labeled 'embed + tour' displaying two side-by-side panels with abstract black curved lines on a white background. The left panel has a shaded vertical area, while the right panel shows a smaller, more condensed version of the curved line. The interface includes buttons at the bottom for 'Play,' 'Pause,' 'Restart,' and 'Controls,' with a 'Done' button in the top right corner and a 'Cancel' button in the top left corner.\"}\n\n![Unibrow matches sine wave.](images/liminal-clusters-nonlin2.png){#fig-unibrow fi-alt=\"Screenshot of an interface labeled 'embed + tour,' showing two side-by-side panels with clusters of black dots forming abstract shapes on a white background. The left panel has a shaded vertical area and features a diagonal cluster of black dots. The right panel displays a denser, curved pattern of black dots resembling a distorted 'S' shape. The interface includes buttons at the bottom for 'Play,' 'Pause,' 'Restart,' and 'Controls,' with a 'Done' button in the top right and a 'Cancel' button in the top left.\"}\n\nTwo screenshots from liminal showing which clusters match between the UMAP representation and the tour animation. The smile corresponds to the small bent rod cluster. The unibrow matches to the sine wave cluster.\n:::\n\n### Using `detourr`\n\\index{software!detourr}\n\\index{software!crosstalk}\n\\index{software!plotly}\n\n@fig-detourr-clusters-nonlin shows how the linking is achieved using `detourr`. It uses a shared data object, as made possible by the `crosstalk` package, and the UMAP view is made interactive using `plotly`. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(detourr)\nlibrary(dplyr)\nlibrary(crosstalk)\nlibrary(plotly)\numap_df <- data.frame(umapX = cnl_umap[, 1],\n                      umapY = cnl_umap[, 2])\ncnl_df <- bind_cols(clusters_nonlin, umap_df)\nshared_cnl <- SharedData$new(cnl_df)\n\ndetour_plot <- detour(shared_cnl, tour_aes(\n  projection = starts_with(\"x\"))) |>\n    tour_path(grand_tour(2), \n                    max_bases=50, fps = 60) |>\n       show_scatter(alpha = 0.7, axes = FALSE,\n                    width = \"100%\", height = \"450px\")\n\numap_plot <- plot_ly(shared_cnl,\n                    x = ~umapX, \n                    y = ~umapY,\n                    color = I(\"black\"),\n                    height = 450) %>%\n    highlight(on = \"plotly_selected\", \n              off = \"plotly_doubleclick\") %>%\n    add_trace(type = \"scatter\", \n              mode = \"markers\")\n\nbscols(\n     detour_plot, umap_plot,\n     widths = c(5, 6)\n )\n```\n:::\n\n\n\n\n\n\n\n\n\n![Screenshot from detourr showing which clusters match between the UMAP representation and the tour animation. The smile corresponds to the small bent rod cluster.](images/detourr-clusters-nonlin.png){#fig-detourr-clusters-nonlin fig-alt=\"Screenshot of a data visualization interface displaying two scatter plots side by side. The left plot contains black and gray dots, with a dense black curved cluster near the top and a lighter scattered distribution below. The right plot is labeled with 'umapX' and 'umapY' axes and shows a more structured arrangement of points, with a distinct curved black cluster on the right and a dispersed gray cluster on the left. The interface includes toolbar icons on the left for rotation, movement, selection, and color adjustments, as well as a playback slider at the bottom.\"}\n\n## Example: `fake_trees`\n\\index{data!fake trees}\n\n@fig-liminal-trees shows a more complex example, using the `fake_trees` data. We know that the 10D data has a main branch, and 9 branches (clusters) attached to it, based on our explorations in the earlier chapters. The t-SNE view, where points are coloured by the known branch ids, is very helpful for seeing the linear branch structure. \n\nWhat we can't tell is that there is a main branch from which all of the others extend. We also can't tell which of the clusters corresponds to this branch. Linking the plot with a tour helps with this. Although, not shown in the sequence of snapshots in @fig-liminal-trees, the main branch is actually the dark blue cluster, which is separated into three pieces by t-SNE.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to run liminal on the fake trees data\"}\nlibrary(liminal)\nlibrary(Rtsne)\ndata(fake_trees)\nset.seed(2020)\ntsne <- Rtsne::Rtsne(\n  dplyr::select(fake_trees,\n                dplyr::starts_with(\"dim\")))\ntsne_df <- data.frame(tsneX = tsne$Y[, 1],\n                      tsneY = tsne$Y[, 2])\nlimn_tour_link(\n  tsne_df,\n  fake_trees,\n  cols = dim1:dim10,\n  color = branches\n)\n```\n:::\n\n\n\n\n\n\n\n\n::: {#fig-liminal-trees layout-ncol=1}\n\n![Linked views of t-SNE dimension reduction with a tour of the fake trees data. The t-SNE view clearly shows ten 1D non-linear clusters, while the tour of the full 100 variables suggests a lot more variation in the data, and less difference between clusters. ](images/fake_trees1.png){#fig-trees1 width=300}\n\n\n![Focus on the green cluster which is split by t-SNE. The shape as viewed in many linear projections shown by the tour shows that it is a single curved cluster. The split is an artifact of the t-SNE mapping.](images/fake_trees2.png){#fig-trees2 width=300}\n\n\n\n![Focus on the purple cluster which splits the green cluster in the t-SNE view. The tour shows that these two clusters are distinct, but are close in one neighbourhood of the 100D space. The close proximity in the t-SNE view is reasonable, though.](images/fake_trees3.png){#fig-trees3 width=300}\n\nThree snapshots of using the `liminal` linked views to explore how t-SNE has summarised the `fake_trees` data in 2D.\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: insight\nThe t-SNE representation clearly shows the linear structures of the data, but viewing this 10D data with the tour shows that t-SNE makes several inaccurate breaks of some of the branches. \n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\insightbox{The t-SNE representation clearly shows the linear structures of the data, but viewing this 10D data with the tour shows that t-SNE makes several inaccurate breaks of some of the branches. }\n:::\n\n\\index{data!swiss roll}\n\\index{data!penguins}\n\\index{data!fake trees}\n\\index{data!multicluster}\n\\index{data!sketches}\n\n## Exercises {-}\n\n1. Change the seed using `set.seed` and re-run the the code used for @fig-nldr-clusters. The resulting layout changes, right? What parts are persistent between different layouts, (e.g. always four clusters, always two small circular clusters, elongated cluster curves in different ways between layouts, ...)? \n\n2. Examine the effect of various choices when making a 2D layout of the swiss roll data, using isomap and LLE:\n\na. Standardise the variables.\n\nb. Change the number of nearest neighbours.\n\n3. Use t-SNE and UMAP to layout the swiss roll data. How does this compare with isomap and LLE layouts?\n\n4. This question uses the `penguins_sub` data \n\na. Generate a 2D representation using t-SNE. Plot the points mapping the colour to species. What is most surprising? (Hint: Are the three species represented by three distinct clusters?)\nb. Re-do the t-SNE representation with different parameter choices, including using different random seeds. Are the results different each time, or do you think that they could be considered to be equivalent?\nc. Use `liminal` or `detourr` to link the t-SNE representation to a tour of the penguins. Highlight the points that have been placed in an awkward position by t-SNE from others in their species. Watch them relative to the others in their species in the tour view, and think about whether there is any rationale for the awkward placement.\nd. Try again using UMAP to make the 2D representation, and use `liminal` or  `detourr` to link with a tour to explore the result.\n\n5. Conduct your best t-SNE and UMAP representations of the `aflw` data. Compare and contrast what is learned relative to a tour or the principal component analysis. \n\n6. The `cardinalR` package can be used to generate various high-dimensional shapes. Generate data with 5 irregularly shaped clusters, centering them at different points in five dimensions. Check what this looks like using a grand tour. If you were to sketch a 2D layout that describes your data, what would it look like? Use PCA, t-SNE and UMAP to make 2D layouts. Can you find a choice of parameters that comes close to your idealised sketch?\n\n7. This question uses the `multicluster` data. \n\na. Use the tour first. How many clusters do you see?\n\nb. Use UMAP to create a 2D layout. How well does this capture the clusters in the data?\n\n8. Use UMAP to create a 2D layout of the `sketches_train` data, `V1` to `V784`. Plot this with points coloured by `word` (what the person was asked to sketch). \n\n::: {.content-hidden}\n\n## Solutions to exercises {-}\n\n1. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\nThe layout changes substantially with different random seeds. The persistent information is that there are: \n\n- four clusters, although sometimes t-SNE splits the S-shape into two pieces to make five clusters\n- two of the clusters are small and circular in shape\n- two of the clusters are bigger, but the shape varies a lot between layouts\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answer to Q2\nlibrary(Rdimtools)\nlibrary(cardinalR)\nlibrary(tsibble)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)\nn_obs <- 1652  \nset.seed(259)\nswiss <- swiss_roll(n_obs, num_noise = 0)\n# Standardise\nswiss_std <- apply(swiss, 2, function(x) (x-mean(x))/sd(x))\n# Compute distance from (0,0) in first two coordinates - spiral\nswiss_std <- cbind(swiss_std, sqrt(swiss[,1]^2 +\n                           swiss[,2]^2))\ncolnames(swiss_std) <- c(\"x\", \"y\", \"z\", \"d\")\nswiss_tbl <- as_tibble(swiss_std)\nswiss_pca <- prcomp(swiss_std[,1:3], scale=FALSE)\nswiss_tbl <- bind_cols(swiss_tbl, as_tibble(swiss_pca$x))\nspiral1 <- ggplot(swiss_tbl, \n                  aes(x=PC1, \n                      y=PC3, \n                      colour=d)) +\n  geom_point() +\n  scale_colour_continuous_divergingx(palette=\"Zissou 1\",\n       mid=median(swiss_tbl$d)) + \n  theme_minimal() +\n  theme(aspect.ratio=1, \n        axis.text = element_blank(),\n        legend.position = \"none\")\n\nswiss_iso <- do.isomap(swiss_std[,1:3],\n  ndim=2, type=c(\"knn\", 30), \n  weight=FALSE)$Y\ncolnames(swiss_iso) <- c(\"iso1\", \"iso2\")\nswiss_iso <- as_tibble(swiss_iso) |>\n  bind_cols(swiss_tbl)\nspiral2 <- ggplot(swiss_iso, \n                  aes(x=iso1, \n                      y=iso2, \n                      colour=d)) + \n  geom_point() +\n  scale_colour_continuous_divergingx(palette=\"Zissou 1\",\n       mid=median(swiss_iso$d)) + \n  theme_minimal() +\n  theme(aspect.ratio=1, \n        axis.text = element_blank(),\n        legend.position = \"none\")\n\nspiral1 + spiral2 + plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![](5-nldr_files/figure-pdf/unnamed-chunk-13-1.pdf){fig-pos='H' width=80%}\n:::\n:::\n\n\n\n\n\n\n\n\nThe spiral is in a different pair of principal components. If one also changes the `knn` parameter to 30 for isomap, the layout changes to show one end of the spiral joining with the other end.\n\nPlaying with the scale of the third variable from 10-50 also changes the resulting layout.\n\n3. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answer to Q3\nn_obs <- 1652  \nset.seed(259)\nswiss <- swiss_roll(n_obs, num_noise = 0)\nswiss[,3] <- swiss[,3] * 3 \nswiss <- cbind(swiss, sqrt(swiss[,1]^2 +\n                           swiss[,2]^2))\ncolnames(swiss) <- c(\"x\", \"y\", \"z\", \"d\")\nswiss_tbl <- as_tibble(swiss)\nset.seed(111)\nswiss_tsne <- Rtsne::Rtsne(swiss[,1:3])$Y\ncolnames(swiss_tsne) <- c(\"tsne1\", \"tsne2\")\nswiss_tsne <- as_tibble(swiss_tsne) |>\n  bind_cols(swiss_tbl)\nswiss_tsne <- ggplot(swiss_tsne, \n                  aes(x=tsne1, \n                      y=tsne2, \n                      colour=d)) +\n  geom_point() +\n  scale_colour_continuous_divergingx(palette=\"Zissou 1\",\n       mid=median(swiss_tbl$d)) + \n  theme_minimal() +\n  theme(aspect.ratio=1, \n        axis.text = element_blank(),\n        legend.position = \"none\")\n\nset.seed(111)\nswiss_umap <- uwot::umap(swiss[,1:3])\ncolnames(swiss_umap) <- c(\"umap1\", \"umap2\")\nswiss_umap <- as_tibble(swiss_umap) |>\n  bind_cols(swiss_tbl)\nswiss_umap <- ggplot(swiss_umap, \n                  aes(x=umap1, \n                      y=umap2, \n                      colour=d)) +\n  geom_point() +\n  scale_colour_continuous_divergingx(palette=\"Zissou 1\",\n       mid=median(swiss_tbl$d)) + \n  theme_minimal() +\n  theme(aspect.ratio=1, \n        axis.text = element_blank(),\n        legend.position = \"none\")\n\nswiss_tsne + swiss_umap + plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![](5-nldr_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H' width=80%}\n:::\n:::\n\n\n\n\n\n\n\n\nThe default settings are used. The layouts are quite different from the other NLDR. The points are grouped into *lacier* patterns. UMAP breaks it into chunks. \n\n4. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n7. There are 6 clusters. These can be hard to see with the tour because three are tiny and close together. They are easily seen in the UMAP view which shows six very separated clusters, three small and three large.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n8. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n:::\n\n## Project {-}\n\nGene expressions measured as scRNA-Seq of 2622 human peripheral blood mononuclear cells data is available from the `Seurat` R package [@seurat1, @seurat2, @seurat3, @seurat4]. The paper web site has code to extract and pre-process the data, which follow the tutorial at https://satijalab.org/seurat/articles/pbmc3k_tutorial.html. The processed data, containing the first 50 PCs is provided with the book, as `pbmc_pca_50.rds`. \n\nThe original paper [@chen2023] used UMAP on the first 15 PCs to find a representation of the data to illustrate the clustering. They used the default settings of the `RunUMAP()` function in `Seurat`, without setting a seed.\n\nGenerate the t-SNE and UMAP representations of the first 9 PCs of data, using their default settings. They should be quite different. (We use 9 PCs because the scree plot in the data pre-processing suggests that 15 is too many.) Based on your examination of the data in a tour, which method yields the more accurate representation? Explain what the structure in the 2D is relative to that seen in the tour.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "5-nldr_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}