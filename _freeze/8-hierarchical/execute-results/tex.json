{
  "hash": "113646cbba3e3abb77e2c4fde9f0076a",
  "result": {
    "engine": "knitr",
    "markdown": "# Hierarchical clustering {#sec-hclust}\n\n\\index{cluster analysis!algorithms}\n\n\\index{cluster analysis!hierarchical} \\index{cluster analysis!intercluster distance (linkage)}\n\n## Overview\n\nHierarchical cluster algorithms sequentially fuse neighboring points to form ever-larger clusters, starting from a full interpoint distance matrix. *Distance between clusters* is described by a \"linkage method\", of which there are many. For example, single linkage measures the distance between clusters by the smallest interpoint distance between the members of the two clusters, complete linkage uses the maximum interpoint distance, and average linkage uses the average of the interpoint distances. Wards linkage, which usually produces the best clustering solutions, defines the distance as the reduction in the within-group variance. A good discussion on cluster analysis and linkage can be found in @HOML, on [Wikipedia](https://en.wikipedia.org/wiki/Cluster_analysis) or any multivariate textbook.\n\n::: {.content-visible when-format=\"html\"}\n::: info\nHierarchical clustering is summarised by a dendrogram, which sequentially shows points being joined to form a cluster, with the corresponding distances. Breaking the data into clusters is done by cutting the dendrogram at the long edges.  \n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\infobox{Hierarchical clustering is summarised by a dendrogram, which sequentially shows points being joined to form a cluster, with the corresponding distances. Breaking the data into clusters is done by cutting the dendrogram at the long edges.}\n:::\n\n\nHere we will take a look at hierarchical clustering, using Wards linkage, on the `simple_clusters` data. The steps taken are to:\n\n1. Plot the data to check for presence of clusters and their shape.\n2. Compute the hierarchical clustering.\n3. Plot the dendrogram to help decide on an appropriate number of clusters, using the `dendro_data` function from the `ggdendro` package.\n4. Show the dendrogram overlaid on the data, calculated by the `hierfly` function in `mulgar`.\n5. Plot the clustering result, by colouring points in the plot of the data.\n\n\\index{cluster analysis!dendrogram}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load libraries\"}\nlibrary(ggplot2)\nlibrary(mulgar)\nlibrary(ggdendro)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tourr)\nlibrary(plotly)\nlibrary(htmlwidgets)\nlibrary(colorspace)\nlibrary(GGally)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndata(simple_clusters)\n\n# Compute hierarchical clustering with Ward's linkage\ncl_hw <- hclust(dist(simple_clusters[,1:2]),\n                method=\"ward.D2\")\ncl_ggd <- dendro_data(cl_hw, type = \"triangle\")\n\n# Compute dendrogram in the data\ncl_hfly <- hierfly(simple_clusters, cl_hw, scale=FALSE)\n\n# Show result\nsimple_clusters <- simple_clusters %>%\n  mutate(clw = factor(cutree(cl_hw, 2)))\n```\n:::\n\n\n\n@fig-hc-sim illustrates the hierarchical clustering approach for a simple simulated data set (a) with two well-separated clusters in 2D. The dendrogram (b) is a representation of the order that points are joined into clusters. The dendrogram strongly indicates two clusters because the two branches  representing the last join are much longer than all of the other branches. \n\nAlthough, the dendrogram is usually a good summary of the steps taken by the algorithm, it can be misleading. The dendrogram might indicate a clear clustering (big differences in heights of branches) but the result may be awful. You need to check this by examining the result on the data, called model-in-the-data space by @wickham2015. \n\nPlot (c) shows the dendrogram in 2D, overlaid on the data. The segments show how the points are joined to make clusters. In order to represent the dendrogram this way, new points (represented by a \"+\" here) need to be added corresponding to the centroid of groups of points that have been joined. These are used to draw the segments between other points and other clusters. We can see that the longest (two) edges stretches across the gap between the two clusters. This corresponds to the top of the dendrogram, the two long branches where we would cut it to make the two-cluster solution. This two-cluster solution is shown in plot (d).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to make the four plots\"}\n# Plot the data\npd <- ggplot(simple_clusters, aes(x=x1, y=x2)) +\n  geom_point(colour=\"#3B99B1\", size=2, alpha=0.8) +\n  ggtitle(\"(a)\") + \n  theme_minimal() +\n  theme(aspect.ratio=1) \n\n# Plot the dendrogram\nph <- ggplot() +\n  geom_segment(data=cl_ggd$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=cl_ggd$labels, aes(x=x, y=y),\n             colour=\"#3B99B1\", alpha=0.8) +\n  ggtitle(\"(b)\") + \n  theme_minimal() +\n  theme_dendro()\n\n# Plot the dendrogram on the data\npdh <- ggplot() +\n  geom_segment(data=cl_hfly$segments, \n                aes(x=x, xend=xend,\n                    y=y, yend=yend)) +\n  geom_point(data=cl_hfly$data, \n             aes(x=x1, y=x2,\n                 shape=factor(node),\n                 colour=factor(node),\n                 size=1-node), alpha=0.8) +\n  xlab(\"x1\") + ylab(\"x2\") +\n  scale_shape_manual(values = c(16, 3)) +\n  scale_colour_manual(values = c(\"#3B99B1\", \"black\")) +\n  scale_size(limits=c(0,17)) +\n  ggtitle(\"(c)\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Plot the resulting clusters\npc <- ggplot(simple_clusters) +\n  geom_point(aes(x=x1, y=x2, colour=clw), \n             size=2, alpha=0.8) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\",\n                                   nmax=5, rev=TRUE) +\n  ggtitle(\"(d)\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\npd + ph + pdh + pc + plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![Hierarchical clustering on simulated data: (a) data, (b) dendrogram, (c) dendrogram on the data, and (d) two cluster solution. The extra points corresponding to nodes of the dendrogram are indicated by + in (c). The last join in the dendrogram (b), can be seen to correspond to the edges connecting the gap, when displayed with the data (c). The other joins can be seen to be pulling together points within each clump.](8-hierarchical_files/figure-pdf/fig-hc-sim-1.pdf){#fig-hc-sim fig-pos='H' width=100%}\n:::\n:::\n\n\n\n::: {.content-visible when-format=\"html\"}\n::: info\nPlotting the dendrogram in the data space can help you understand how the hierarchical clustering has collected the points together into clusters. You can learn if the algorithm has been confused by nuisance patterns in the data, and how different choices of linkage method affects the result. \n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\infobox{Plotting the dendrogram in the data space can help you understand how the hierarchical clustering has collected the points together into clusters. You can learn if the algorithm has been confused by nuisance patterns in the data, and how different choices of linkage method affects the result.}\n:::\n\n## Common patterns which confuse clustering algorithms\n\n@fig-problems shows two examples of structure in data that will confuse hierarchical clustering: nuisance variables and nuisance cases. We usually do not know that these problems exist prior to clustering the data. Discovering these iteratively as you conduct a clustering analysis is important for generating useful results. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to make plots\"}\n# Nuisance observations\nset.seed(20190514)\nx <- (runif(20)-0.5)*4\ny <- x\nd1 <- data.frame(x1 = c(rnorm(50, -3), \n                            rnorm(50, 3), x),\n                 x2 = c(rnorm(50, -3), \n                            rnorm(50, 3), y),\n                 cl = factor(c(rep(\"A\", 50), \n                             rep(\"B\", 70))))\nd1 <- d1 %>% \n  mutate_if(is.numeric, function(x) (x-mean(x))/sd(x))\npd1 <- ggplot(data=d1, aes(x=x1, y=x2)) + \n  geom_point() +\n    ggtitle(\"Nuisance observations\") + \n  theme_minimal() +\n    theme(aspect.ratio=1) \n\n# Nuisance variables\nset.seed(20190512)\nd2 <- data.frame(x1=c(rnorm(50, -4), \n                            rnorm(50, 4)),\n                 x2=c(rnorm(100)),\n                 cl = factor(c(rep(\"A\", 50), \n                             rep(\"B\", 50))))\nd2 <- d2 %>% \n  mutate_if(is.numeric, function(x) (x-mean(x))/sd(x))\npd2 <- ggplot(data=d2, aes(x=x1, y=x2)) + \n  geom_point() +\n    ggtitle(\"Nuisance variables\") + \n  theme_minimal() +\n    theme(aspect.ratio=1)\n\npd1 + pd2 + plot_layout(ncol=2)\n```\n\n::: {.cell-output-display}\n![Two examples of data structure that causes problems for hierarchical clustering. Nuisance observations can cause problems because the close observations between the two clusters can cause some chaining in the hierarchical joining of observations.  Nuisance variables can cause problems because observations across the gap can seem closer than observations at the end of each cluster.](8-hierarchical_files/figure-pdf/fig-problems-1.pdf){#fig-problems fig-pos='H' width=80%}\n:::\n:::\n\n\n\nIf an outlier is a point that is extreme relative to other observations, an \"inlier\" is a point that is extreme relative to a cluster, but inside the domain of all of the observations. Nuisance observations are inliers, cases that occur between larger groups of points. If they were excluded there might be a gap between clusters. These can cause problems for clustering when distances between clusters are measured, and can be very problematic when single linkage hierarchical clustering is used. @fig-d1-s shows how nuisance observations affect single linkage but not Wards linkage hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to make plots\"}\n# Compute single linkage\nd1_hs <- hclust(dist(d1[,1:2]),\n                method=\"single\")\nd1_ggds <- dendro_data(d1_hs, type = \"triangle\")\npd1s <- ggplot() +\n  geom_segment(data=d1_ggds$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=d1_ggds$labels, aes(x=x, y=y),\n             colour=\"#3B99B1\", alpha=0.8) +\n  theme_minimal() +\n  ggtitle(\"(a) Single linkage dendrogram\") +\n  theme_dendro()\n\n# Compute dendrogram in data\nd1_hflys <- hierfly(d1, d1_hs, scale=FALSE)\n\npd1hs <- ggplot() +\n  geom_segment(data=d1_hflys$segments, \n                aes(x=x, xend=xend,\n                    y=y, yend=yend)) +\n  geom_point(data=d1_hflys$data, \n             aes(x=x1, y=x2,\n                 shape=factor(node),\n                 colour=factor(node),\n                 size=1-node), alpha=0.8) +\n  scale_shape_manual(values = c(16, 3)) +\n  scale_colour_manual(values = c(\"#3B99B1\", \"black\")) +\n  scale_size(limits=c(0,17)) +\n  ggtitle(\"(b) Dendrogram in data space\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Show result\nd1 <- d1 %>%\n  mutate(cls = factor(cutree(d1_hs, 2)))\npc_d1s <- ggplot(d1) +\n  geom_point(aes(x=x1, y=x2, colour=cls), \n             size=2, alpha=0.8) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\",\n                                   nmax=4, rev=TRUE) +\n  ggtitle(\"(c) Two-cluster solution\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Compute Wards linkage\nd1_hw <- hclust(dist(d1[,1:2]),\n                method=\"ward.D2\")\nd1_ggdw <- dendro_data(d1_hw, type = \"triangle\")\npd1w <- ggplot() +\n  geom_segment(data=d1_ggdw$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=d1_ggdw$labels, aes(x=x, y=y),\n             colour=\"#3B99B1\", alpha=0.8) +\n  ggtitle(\"(d) Ward's linkage dendrogram\") +\n  theme_minimal() +\n  theme_dendro()\n\n# Compute dendrogram in data\nd1_hflyw <- hierfly(d1, d1_hw, scale=FALSE)\n\npd1hw <- ggplot() +\n  geom_segment(data=d1_hflyw$segments, \n                aes(x=x, xend=xend,\n                    y=y, yend=yend)) +\n  geom_point(data=d1_hflyw$data, \n             aes(x=x1, y=x2,\n                 shape=factor(node),\n                 colour=factor(node),\n                 size=1-node), alpha=0.8) +\n  scale_shape_manual(values = c(16, 3)) +\n  scale_colour_manual(values = c(\"#3B99B1\", \"black\")) +\n  scale_size(limits=c(0,17)) +\n  ggtitle(\"(e) Dendrogram in data space\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Show result\nd1 <- d1 %>%\n  mutate(clw = factor(cutree(d1_hw, 2)))\npc_d1w <- ggplot(d1) +\n  geom_point(aes(x=x1, y=x2, colour=clw), \n             size=2, alpha=0.8) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\",\n                                   nmax=4, rev=TRUE) +\n  ggtitle(\"(f) Two-cluster solution\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\npd1s + pd1hs + pc_d1s + \n  pd1w + pd1hw + pc_d1w +\n  plot_layout(ncol=3)\n```\n\n::: {.cell-output-display}\n![The effect of nuisance observations on single linkage (a, b, c) and Ward's linkage hierarchical clustering (d, e, f). The single linkage dendrogram is very different to the Wards linkage dendrogram. When plotted with the data (b) we can see a pin cushion or asterisk pattern, where points are joined to others through a place in the middle of the line of nuisance observations. This results in the bad two cluster solution of a singleton cluster, and all the rest. Conversely, Ward's dendrogram (d) strongly suggests two clusters, although the final join corresponds to just a small gap when shown on the data (e) but results in two sensible clusters.](8-hierarchical_files/figure-pdf/fig-d1-s-1.pdf){#fig-d1-s fig-pos='H' width=80%}\n:::\n:::\n\n\n\nNuisance variables are ones that do not contribute to the clustering, such as `x2` here. When we look at this data we see a gap between two elliptically shape clusters, with the gap being only in the horizontal direction, `x1`. When we compute the distances between points, in order to start clustering, without knowing that `x2` is a nuisance variable, points across the gap might be considered to be closer than points within the same cluster. @fig-d2-c shows how nuisance variables affects complete linkage but not Wards linkage hierarchical clustering. (Wards linkage can be affected but it isn't for this data.) Interestingly, the dendrogram for complete linkage looks ideal, that it suggests two clusters. It is not until you examine the resulting clusters in the data that you can see the error, that it has clustered across the gap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute complete linkage\nd2_hc <- hclust(dist(d2[,1:2]),\n                method=\"complete\")\nd2_ggdc <- dendro_data(d2_hc, type = \"triangle\")\npd2c <- ggplot() +\n  geom_segment(data=d2_ggdc$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=d2_ggdc$labels, aes(x=x, y=y),\n             colour=\"#3B99B1\", alpha=0.8) +\n  ggtitle(\"(a) Complete linkage dendrogram\") +\n  theme_minimal() +\n  theme_dendro()\n\n# Compute dendrogram in data\nd2_hflyc <- hierfly(d2, d2_hc, scale=FALSE)\n\npd2hc <- ggplot() +\n  geom_segment(data=d2_hflyc$segments, \n                aes(x=x, xend=xend,\n                    y=y, yend=yend)) +\n  geom_point(data=d2_hflyc$data, \n             aes(x=x1, y=x2,\n                 shape=factor(node),\n                 colour=factor(node),\n                 size=1-node), alpha=0.8) +\n  scale_shape_manual(values = c(16, 3)) +\n  scale_colour_manual(values = c(\"#3B99B1\", \"black\")) +\n  scale_size(limits=c(0,17)) +\n  ggtitle(\"(b) Dendrogram in data space\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Show result\nd2 <- d2 %>%\n  mutate(clc = factor(cutree(d2_hc, 2)))\npc_d2c <- ggplot(d2) +\n  geom_point(aes(x=x1, y=x2, colour=clc), \n             size=2, alpha=0.8) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\",\n                                   nmax=4, rev=TRUE) +\n  ggtitle(\"(c) Two-cluster solution\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Compute Wards linkage\nd2_hw <- hclust(dist(d2[,1:2]),\n                method=\"ward.D2\")\nd2_ggdw <- dendro_data(d2_hw, type = \"triangle\")\npd2w <- ggplot() +\n  geom_segment(data=d2_ggdw$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=d2_ggdw$labels, aes(x=x, y=y),\n             colour=\"#3B99B1\", alpha=0.8) +\n  ggtitle(\"(d) Ward's linkage dendrogram\") +\n  theme_minimal() +\n  theme_dendro()\n\n# Compute dendrogram in data\nd2_hflyw <- hierfly(d2, d2_hw, scale=FALSE)\n\npd2hw <- ggplot() +\n  geom_segment(data=d2_hflyw$segments, \n                aes(x=x, xend=xend,\n                    y=y, yend=yend)) +\n  geom_point(data=d2_hflyw$data, \n             aes(x=x1, y=x2,\n                 shape=factor(node),\n                 colour=factor(node),\n                 size=1-node), alpha=0.8) +\n  scale_shape_manual(values = c(16, 3)) +\n  scale_colour_manual(values = c(\"#3B99B1\", \"black\")) +\n  scale_size(limits=c(0,17)) +\n  ggtitle(\"(e) Dendrogram in data space\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\n# Show result\nd2 <- d2 %>%\n  mutate(clw = factor(cutree(d2_hw, 2)))\npc_d2w <- ggplot(d2) +\n  geom_point(aes(x=x1, y=x2, colour=clw), \n             size=2, alpha=0.8) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\",\n                                   nmax=4, rev=TRUE) +\n  ggtitle(\"(f) Two-cluster solution\") + \n  theme_minimal() +\n  theme(aspect.ratio=1, legend.position=\"none\")\n\npd2c + pd2hc + pc_d2c + \n  pd2w + pd2hw + pc_d2w +\n  plot_layout(ncol=3)\n```\n\n::: {.cell-output-display}\n![Complete linkage clustering (a, b, c) on nuisance variables in comparison to Ward's linkage (d, e, f). The two dendrograms (a, d) look similar but when plotted on the data (b, e) we can see they are very different solutions. The complete linkage result breaks the data into clusters across the gap (c), which is a bad solution. It has been distract by the nuisance variables. Conversely, the Wards linkage two-cluster solution does as hoped, divided the data into two clusters separated by the gap (f).](8-hierarchical_files/figure-pdf/fig-d2-c-1.pdf){#fig-d2-c fig-pos='H' width=80%}\n:::\n:::\n\n\n\n::: {.content-visible when-format=\"html\"}\n::: info\nTwo dendrograms might look similar but the resulting clustering can be very different. They can also look very different but correspond to very similar clusterings. Plotting the dendrogram in the data space is important for understanding how the algorithm operated when grouping observations, even more so for high dimensions.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\infobox{Two dendrograms might look similar but the resulting clustering can be very different. They can also look very different but correspond to very similar clusterings. Plotting the dendrogram in the data space is important for understanding how the algorithm operated when grouping observations, even more so for high dimensions.}\n:::\n\n## Dendrograms in high-dimensions\n\nThe first step with any clustering with high dimensional data is also to check the data. You typically don't know whether there are clusters, or what shape they might be, or if there are nuisance observations or variables. A pairs plot like in @fig-penguins-pairs is a nice complement to using the tour (@fig-penguins-gt-pdf) for this. Here you can see three elliptical clusters, with one is further from the others.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code for scatterplot matrix\"}\nload(\"data/penguins_sub.rda\")\nggscatmat(penguins_sub[,1:4]) + \n  theme_minimal() +\n  xlab(\"\") + ylab(\"\")\n```\n\n::: {.cell-output-display}\n![Make a scatterplot matrix to check for the presence of clustering, shape of clusters and presence of nuisance observations and variables. In the penguins it appears that there might be three elliptically shaped clusters, with some nuisance observations.](8-hierarchical_files/figure-pdf/fig-penguins-pairs-1.pdf){#fig-penguins-pairs fig-pos='H' width=80%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to create tour\"}\nset.seed(20230329)\nb <- basis_random(4,2)\npt1 <- save_history(penguins_sub[,1:4], \n                    max_bases = 500, \n                    start = b)\nsave(pt1, file=\"data/penguins_tour_path.rda\")\n\n# To re-create the gifs\nload(\"data/penguins_tour_path.rda\")\nanimate_xy(penguins_sub[,1:4], \n           tour_path = planned_tour(pt1), \n           axes=\"off\", rescale=FALSE, \n           half_range = 3.5)\n\nrender_gif(penguins_sub[,1:4], \n           planned_tour(pt1), \n           display_xy(half_range=0.9, axes=\"off\"),\n           gif_file=\"gifs/penguins_gt.gif\",\n           frames=500,\n           loop=FALSE)\n```\n:::\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n::: {#fig-penguins-gt-html}\n\n![](gifs/penguins_gt.gif){fig-alt=\"Tour of many linear projections of the penguins data. You can see three elliptical clusters, one further apart from the other two.\" fig.align=\"center\"}\n\nUse a grand tour of your data to check for clusters, the shape of clusters and for nuisance observations and variables. Here the penguins data looks like it has possibly three elliptical clusters, one more separated than the other two, with some nuisance observations.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n![One frame from a grand tour being used to check for clusters, the shape of clusters and for nuisance observations and variables. Here the penguins data looks like it has possibly three elliptical clusters, one more separated than the other two, with some nuisance observations.](images/penguins_gt_59.png){#fig-penguins-gt-pdf fig-alt=\"A scatterplot of a 2D projection. You can see three elliptical clusters, one further apart from the other two.\" fig.align=\"center\"}\n:::\n\n\nThe process is the same as for the simpler example. We compute and draw the dendrogram in 2D, compute it in $p$-D and view with a tour. Here we have also chosen to examine the three cluster solution for single linkage and wards linkage clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\np_dist <- dist(penguins_sub[,1:4])\np_hcw <- hclust(p_dist, method=\"ward.D2\")\np_hcs <- hclust(p_dist, method=\"single\")\n\np_clw <- penguins_sub %>% \n  mutate(cl = factor(cutree(p_hcw, 3))) %>%\n  as.data.frame()\np_cls <- penguins_sub %>% \n  mutate(cl = factor(cutree(p_hcs, 3))) %>%\n  as.data.frame()\n\np_w_hfly <- hierfly(p_clw, p_hcw, scale=FALSE)\np_s_hfly <- hierfly(p_cls, p_hcs, scale=FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to draw dendrograms\"}\n# Generate the dendrograms in 2D\np_hcw_dd <- dendro_data(p_hcw)\npw_dd <- ggplot() +\n  geom_segment(data=p_hcw_dd$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=p_hcw_dd$labels, aes(x=x, y=y),\n             alpha=0.8) +\n  theme_dendro()\n\np_hcs_dd <- dendro_data(p_hcs)\nps_dd <- ggplot() +\n  geom_segment(data=p_hcs_dd$segments, \n               aes(x = x, y = y, \n                   xend = xend, yend = yend)) + \n  geom_point(data=p_hcs_dd$labels, aes(x=x, y=y),\n             alpha=0.8) +\n  theme_dendro()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to create tours of dendrogram in data\"}\nload(\"data/penguins_tour_path.rda\")\nglyphs <- c(16, 46)\npchw <- glyphs[p_w_hfly$data$node+1]\npchs <- glyphs[p_s_hfly$data$node+1]\n\nanimate_xy(p_w_hfly$data[,1:4], \n           #col=colw, \n           tour_path = planned_tour(pt1),\n           pch = pchw,\n           edges=p_w_hfly$edges, \n           axes=\"bottomleft\")\n\nanimate_xy(p_s_hfly$data[,1:4], \n           #col=colw, \n           tour_path = planned_tour(pt1),\n           pch = pchs,\n           edges=p_s_hfly$edges, \n           axes=\"bottomleft\")\n\nrender_gif(p_w_hfly$data[,1:4], \n           planned_tour(pt1),\n           display_xy(half_range=0.9,            \n                      pch = pchw,\n                      edges = p_w_hfly$edges,\n                      axes = \"off\"),\n           gif_file=\"gifs/penguins_hflyw.gif\",\n           frames=500,\n           loop=FALSE)\n\nrender_gif(p_s_hfly$data[,1:4], \n           planned_tour(pt1), \n           display_xy(half_range=0.9,            \n                      pch = pchs,\n                      edges = p_s_hfly$edges,\n                      axes = \"off\"),\n           gif_file=\"gifs/penguins_hflys.gif\",\n           frames=500,\n           loop=FALSE)\n\n# Show three cluster solutions\nclrs <- hcl.colors(3, \"Zissou 1\")\nw3_col <- clrs[p_w_hfly$data$cl[p_w_hfly$data$node == 0]]\nrender_gif(p_w_hfly$data[p_w_hfly$data$node == 0, 1:4], \n           planned_tour(pt1), \n           display_xy(half_range=0.9,   \n                      col=w3_col,\n                      axes = \"off\"),\n           gif_file=\"gifs/penguins_w3.gif\",\n           frames=500,\n           loop=FALSE)\n\ns3_col <- clrs[p_s_hfly$data$cl[p_w_hfly$data$node == 0]]\nrender_gif(p_s_hfly$data[p_w_hfly$data$node == 0,1:4], \n           planned_tour(pt1), \n           display_xy(half_range=0.9,   \n                      col=s3_col,\n                      axes = \"off\"),\n           gif_file=\"gifs/penguins_s3.gif\",\n           frames=500,\n           loop=FALSE)\n```\n:::\n\n\n\n@fig-penguins-ddw and @fig-penguins-hfly-pdf show results for single linkage and wards linkage clustering of the penguins data. fig-penguins-ddw shows the 2D dendrograms. The 2D dendrograms are very different. Wards linkage produces a clearer indication of clusters, with a suggestion of three, or possibly four or five clusters. The dendrogram for single linkage suggests two clusters, and has the classical waterfall appearance that is often seen with this type of linkage. (If you look carefully, though, you will see it is actually a three cluster solution. At the very top of the dendrogram there is another branch connecting one observation to the other two clusters.)\n\n@fig-penguins-hfly-pdf (a) and (b) show the dendrograms in 4D overlaid on the data. The two are starkly different. The single linkage clustering is like pins pointing to (three) centres, with some long extra edges.\n\nPlots (c) and (d) show the three cluster solutions, with Wards linkage almost recovering the clusters of the three species. Single linkage has two big clusters, and the singleton cluster. Although the Wards linkage produces the best result, single linkage does provide some interesting and useful information about the data. That singleton cluster is an outlier, an unusually-sized penguin. We can see it as an outlier just from the tour in @fig-penguins-gt-pdf but single linkage emphasizes it, bringing it more strongly to our attention. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Wards linkage (left) and single linkage (right).](8-hierarchical_files/figure-pdf/fig-penguins-ddw-1.pdf){#fig-penguins-ddw width=80%}\n:::\n:::\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-penguins-hfly-html layout-ncol=2}\n![Wards linkage](gifs/penguins_hflyw.gif){#fig-penguins-hflyw fig-alt=\"Tour showing the dendrogram for Wards linkage clustering on the penguins data in 4D. You can see that it connects points within each clump and then connects between clusters.\"}\n\n![Single linkage](gifs/penguins_hflys.gif){#fig-penguins-hflyw fig-alt=\"Tour showing the dendrogram for single linkage clustering on the penguins data in 4D. You can see that the connections are like asterisks, connecting towards the center of each clump and there are a couple of long connections between clusters.\"}\n\n![Wards linkage](gifs/penguins_w3.gif){#fig-penguins-w3}\n\n![Single linkage](gifs/penguins_s3.gif){#fig-penguins-s3}\n\nDendrograms for Wards and single linkage of the penguins data, shown in 2D (top) and in 4D (middle), and the three-cluster solution of each.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n::: {#fig-penguins-hfly-pdf layout-ncol=2}\n\n![Wards linkage](images/penguins_hflyw_59.png){#fig-penguins-hflyw fig-alt=\"Tour showing the dendrogram for Wards linkage clustering on the penguins data in 4D. You can see that it connects points within each clump and then connects between clusters.\"}\n\n![Single linkage](images/penguins_hflys_59.png){#fig-penguins-hflyw fig-alt=\"Tour showing the dendrogram for single linkage clustering on the penguins data in 4D. You can see that the connections are like asterisks, connecting towards the center of each clump and there are a couple of long connections between clusters.\"}\n\n![Wards linkage](images/penguins_w3_59.png){#fig-penguins-w3}\n\n![Single linkage](images/penguins_s3_59.png){#fig-penguins-s3}\n\nDendrograms for Wards and single linkage of the penguins data, shown in 2D (top) and in 4D (middle), and the three-cluster solution of each.\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: insight\nSingle linkage on the penguins has a very different joining pattern to Wards! While Wards provides the better result, single linkage provides useful information about the data, such as emphasizing the outlier.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\insightbox{Single linkage on the penguins has a very different joining pattern to Wards! While Wards provides the better result, single linkage provides useful information about the data, such as emphasizing the outlier.}\n:::\n\n::: {.content-visible when-format=\"html\"}\n@fig-penguins-hfly-plotly provides HTML objects of the dendrograms, so that they can be directly compared. The same tour path is used, so the sliders allow setting the view to the same projection in each plot.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to make html objects of the dendrogram in 4D\"}\nload(\"data/penguins_tour_path.rda\")\n# Create a smaller one, for space concerns\npt1i <- interpolate(pt1[,,1:5], 0.1)\npw_anim <- render_anim(p_w_hfly$data,\n                       vars=1:4,\n                       frames=pt1i, \n                       edges = p_w_hfly$edges,\n             obs_labels=paste0(1:nrow(p_w_hfly$data),\n                               p_w_hfly$data$cl))\n\npw_gp <- ggplot() +\n     geom_segment(data=pw_anim$edges, \n                    aes(x=x, xend=xend,\n                        y=y, yend=yend,\n                        frame=frame)) +\n     geom_point(data=pw_anim$frames, \n                aes(x=P1, y=P2, \n                    frame=frame, \n                    shape=factor(node),\n                    label=obs_labels), \n                alpha=0.8, size=1) +\n     xlim(-1,1) + ylim(-1,1) +\n     scale_shape_manual(values=c(16, 46)) +\n     coord_equal() +\n     theme_bw() +\n     theme(legend.position=\"none\", \n           axis.text=element_blank(),\n           axis.title=element_blank(),\n           axis.ticks=element_blank(),\n           panel.grid=element_blank())\n\npwg <- ggplotly(pw_gp, width=450, height=500,\n                tooltip=\"label\") %>%\n       animation_button(label=\"Go\") %>%\n       animation_slider(len=0.8, x=0.5,\n                        xanchor=\"center\") %>%\n       animation_opts(easing=\"linear\", transition = 0)\nhtmlwidgets::saveWidget(pwg,\n          file=\"html/penguins_cl_ward.html\",\n          selfcontained = TRUE)\n\n# Single\nps_anim <- render_anim(p_s_hfly$data, vars=1:4,\n                         frames=pt1i, \n                       edges = p_s_hfly$edges,\n             obs_labels=paste0(1:nrow(p_s_hfly$data),\n                               p_s_hfly$data$cl))\n\nps_gp <- ggplot() +\n     geom_segment(data=ps_anim$edges, \n                    aes(x=x, xend=xend,\n                        y=y, yend=yend,\n                        frame=frame)) +\n     geom_point(data=ps_anim$frames, \n                aes(x=P1, y=P2, \n                    frame=frame, \n                    shape=factor(node),\n                    label=obs_labels), \n                alpha=0.8, size=1) +\n     xlim(-1,1) + ylim(-1,1) +\n     scale_shape_manual(values=c(16, 46)) +\n     coord_equal() +\n     theme_bw() +\n     theme(legend.position=\"none\", \n           axis.text=element_blank(),\n           axis.title=element_blank(),\n           axis.ticks=element_blank(),\n           panel.grid=element_blank())\n\npsg <- ggplotly(ps_gp, width=450, height=500,\n                tooltip=\"label\") %>%\n       animation_button(label=\"Go\") %>%\n       animation_slider(len=0.8, x=0.5,\n                        xanchor=\"center\") %>%\n       animation_opts(easing=\"linear\", transition = 0)\nhtmlwidgets::saveWidget(psg,\n          file=\"html/penguins_cl_single.html\",\n          selfcontained = TRUE)\n```\n:::\n\n\n\n::: {.content-visible when-format=\"html\"}\n::: {#fig-penguins-hfly-plotly fig-align=\"center\"}\n\n<iframe width=\"500\" height=\"500\" src=\"html/penguins_cl_ward.html\" title=\"Animation of dendrogram from Wards linkage clustering of the penguins data.\"></iframe>\n\n<iframe width=\"500\" height=\"500\"  src=\"html/penguins_cl_single.html\" title=\"Animation of dendrogram from single linkage clustering of the penguins data.\"></iframe>\n\nAnimation of dendrogram from Wards (top) and single (bottom) linkage clustering of the penguins data.\n:::\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: info\nViewing the dendrograms in high-dimensions provides insight into how the observations have joined points to clusters. For example, single linkage often has edges leading to a single focal point, which might not be yield a useful clustering but might help to identify outliers. If the edges point to multiple focal points, with long edges bridging gaps in the data, the result is more likely yielding a useful clustering.\n:::\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\\infobox{Viewing the dendrograms in high-dimensions provides insight into how the observations have joined points to clusters. For example, single linkage often has edges leading to a single focal point, which might not be yield a useful clustering but might help to identify outliers. If the edges point to multiple focal points, with long edges bridging gaps in the data, the result is more likely yielding a useful clustering.}\n:::\n\n## Exercises {-}\n\n1. Compute complete linkage clustering for the **nuisance observations** data set. Does it perform more similarly to single linkage or Wards linkage?\n2. Compute single linkage clustering for the **nuisance variables** data. Does it perform more similarly to complete linkage or Wards linkage?\n3. Use hierarchical clustering with Euclidean distance and Wards linkage to split the `clusters_nonlin` data into four clusters. Look at the dendrogram in 2D and 4D. In 4D you can also include the cluster assignment as color. Does this look like a good solution?\n4. Repeat the same exercise using single linkage instead of Wards linkage. How does this solution compare to what we have found with Wards linkage? Does the solution match how you would cluster the data in a spin-and-brush approach?\n5. Argue why single linkage might not perform well for the `fake_trees` data. Which method do you think will work best with this data? Conduct hierarchical clustering with your choice of linkage method. Does the 2D dendrogram suggest 10 clusters for the 10 branches?  Take a look at the high-dimensional representation of the dendrogram. Has your chosen method captured the branches well, or not, explaining what you think worked well or poorly?\n6. What would a useful clustering of the first four PCs of the `aflw` data be? What linkage method would you expect works best to cluster it this way? Conduct the clustering. Examine the 2D dendrogram and decide on how many clusters should be used. Examine the cluster solution using a tour with points coloured by cluster.  \n7. Based on your assessment of the cluster structure in the challenge data sets, `c1`-`c7`, from the `mulgar` package, which linkage method would you recommend. Use your suggested linkage method to cluster each data set, and summarise how well it performed in detecting the clusters that you have seen.\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "8-hierarchical_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}