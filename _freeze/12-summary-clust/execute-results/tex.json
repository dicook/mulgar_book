{
  "hash": "3fe09556ad29982fcfa3cea2a60d643e",
  "result": {
    "engine": "knitr",
    "markdown": "# Summarising and comparing clustering results {#sec-clust-compare}\n\n\\index{cluster analysis!confusion table}\n\n<!--\n- Adding cluster summary, eg means\n- Linking between confusion matrix and tour\n- Using same tour path to examine cluster colour\n-->\n\n## Summarising results\n\nThe key elements for summarising cluster results are the centres of the clusters and the within-cluster variability of the observations. Adding cluster means to any plot, including tour plots, is easy. You add the additional rows, or a new data set, and set the point shape to be distinct. \n\nSummarising the variability is difficult. For model-based clustering, the shape of the clusters is assumed to be elliptical, so $p$-dimensional ellipses can be used to show the solution, as done in @sec-mclust. Generally, it is common to plot a convex hull of the clusters, as in @fig-penguins-chull-pdf. This can also be done in high-dimensions, using the R package `cxhull` to compute the $p$-D convex hull.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load libraries\"}\nlibrary(mclust) \nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(gt)\nlibrary(cxhull)\nlibrary(ggplot2)\nlibrary(colorspace)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to do clustering\"}\nlibrary(mclust) \nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(gt)\nlibrary(cxhull)\nlibrary(ggplot2)\nlibrary(colorspace)\nload(\"data/penguins_sub.rda\")\np_dist <- dist(penguins_sub[,1:4])\np_hcw <- hclust(p_dist, method=\"ward.D2\")\n\np_cl <- data.frame(cl_w = cutree(p_hcw, 3))\n\npenguins_mc <- Mclust(penguins_sub[,1:4], \n                      G=3, \n                      modelNames = \"EEE\")\np_cl <- p_cl %>% \n  mutate(cl_mc = penguins_mc$classification)\n\np_cl <- p_cl %>% \n  mutate(cl_w_j = jitter(cl_w),\n         cl_mc_j = jitter(cl_mc))\n\n# Arranging by cluster id is important to define edges \npenguins_cl <- penguins_sub %>%\n  mutate(cl_w = p_cl$cl_w,\n         cl_mc = p_cl$cl_mc) %>%\n  arrange(cl_w)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code for convex hulls in 2D\"}\n# Penguins in 2D\n# Duplicate observations need to be removed fo convex hull calculation\npsub <- penguins_cl %>%\n  select(bl, bd) \ndup <- duplicated(psub)\npsub <- penguins_cl %>%\n  select(bl, bd, cl_w) %>%\n  filter(!dup) %>%\n  arrange(cl_w)\n\nncl <- psub %>%\n  count(cl_w) %>%\n  arrange(cl_w) %>%\n  mutate(cumn = cumsum(n))\nphull <- NULL\nfor (i in unique(psub$cl_w)) {\n  x <- psub %>%\n    dplyr::filter(cl_w == i) %>%\n    select(bl, bd) \n  ph <- cxhull(as.matrix(x))$edges\n  if (i > 1) {\n    ph <- ph + ncl$cumn[i-1]\n  }\n  ph <- cbind(ph, rep(i, nrow(ph)))\n  phull <- rbind(phull, ph)\n}\nphull <- as.data.frame(phull)\ncolnames(phull) <- c(\"from\", \"to\", \"cl_w\") \nphull_segs <- data.frame(x = psub$bl[phull$from],\n                         y = psub$bd[phull$from],\n                         xend = psub$bl[phull$to],\n                         yend = psub$bd[phull$to],\n                         cl_w = phull$cl_w)\nphull_segs$cl_w <- factor(phull$cl_w) \npsub$cl_w <- factor(psub$cl_w)\np_chull2D <- ggplot() +\n  geom_point(data=psub, aes(x=bl, y=bd, \n                            colour=cl_w)) + \n  geom_segment(data=phull_segs, aes(x=x, xend=xend,\n                                    y=y, yend=yend,\n                                    colour=cl_w)) +\n  scale_colour_discrete_divergingx(palette = \"Zissou 1\") +\n  theme_minimal() +\n  theme(aspect.ratio = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to generate pD convex hull and view in tour\"}\nncl <- penguins_cl %>%\n  count(cl_w) %>%\n  arrange(cl_w) %>%\n  mutate(cumn = cumsum(n))\nphull <- NULL\nfor (i in unique(penguins_cl$cl_w)) {\n  x <- penguins_cl %>%\n    dplyr::filter(cl_w == i) \n  ph <- cxhull(as.matrix(x[,1:4]))$edges\n  if (i > 1) {\n    ph <- ph + ncl$cumn[i-1]\n  }\n  ph <- cbind(ph, rep(i, nrow(ph)))\n  phull <- rbind(phull, ph)\n}\nphull <- as.data.frame(phull)\ncolnames(phull) <- c(\"from\", \"to\", \"cl_w\") \nphull$cl_w <- factor(phull$cl_w)\npenguins_cl$cl_w <- factor(penguins_cl$cl_w)\n\nanimate_xy(penguins_cl[,1:4], col=penguins_cl$cl_w,\n           edges=as.matrix(phull[,1:2]), edges.col=phull$cl_w)\nrender_gif(penguins_cl[,1:4], \n           tour_path = grand_tour(),\n           display = display_xy(col=penguins_cl$cl_w,\n                                edges=as.matrix(phull[,1:2]),\n                                edges.col=phull$cl_w),\n           gif_file = \"gifs/penguins_chull.gif\",\n           frames = 500, \n           width = 400,\n           height = 400)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n::: {#fig-penguins-chull-html layout-ncol=2}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![2D](12-summary-clust_files/figure-pdf/fig-penguin-hull-2D-html-1.pdf){#fig-penguin-hull-2D-html width=80%}\n:::\n:::\n\n\n\n![4D](gifs/penguins_chull.gif){#fig-penguins-chull-pD}\n:::\n\nConvex hulls summarising the extent of Wards linkage clustering in 2D and 4D.\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n\n::: {#fig-penguins-chull-pdf layout-ncol=2}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![2D](12-summary-clust_files/figure-pdf/fig-penguin-hull-2D-pdf-1.pdf){#fig-penguin-hull-2D-pdf width=80%}\n:::\n:::\n\n\n\n![4D](){#fig-penguins-chull-pD}\n:::\n\nConvex hulls summarising the extent of Wards linkage clustering in 2D and 4D.\n:::\n\n## Comparing two clusterings\n\nEach cluster analysis will result in a vector of class labels for the data. To compare two results we would tabulate and plot the pair of integer variables. The labels given to each cluster will likely differ. If the two methods agree, there will be just a few cells with large counts among mostly empty cells. \n\nBelow is a comparison between the three cluster results of Wards linkage hierarchical clustering (rows) and model-based clustering (columns). The two methods mostly agree, as seen from the three cells with large counts, and most cells with zeros. They disagree only on eight penguins. These eight penguins would be considered to be part of cluster 1 by Wards, but model-based considers them to be members of cluster 2.\n\nThe two methods label them clusters differently: what Wards labels as cluster 3, model-based labels as cluster 2. The labels given by any algorithm are arbitrary, and can easily be changed to coordinate between methods. \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code for confusion table\"}\np_cl %>% \n  count(cl_w, cl_mc) %>% \n  pivot_wider(names_from = cl_mc, \n              values_from = n, \n              values_fill = 0) %>%\n  gt() %>%\n  tab_spanner(label = \"cl_mc\", columns=c(`2`, `3`, `1`)) %>%\n  cols_width(everything() ~ px(60))\n```\n\n::: {.cell-output-display}\n\\begin{longtable}{rrrr}\n\\toprule\n & \\multicolumn{3}{c}{cl\\_mc} \\\\ \n\\cmidrule(lr){2-4}\ncl\\_w & 2 & 3 & 1 \\\\ \n\\midrule\n1 & 8 & 0 & 149 \\\\ \n2 & 0 & 119 & 0 \\\\ \n3 & 57 & 0 & 0 \\\\ \n\\bottomrule\n\\end{longtable}\n\n:::\n:::\n\n\n\nWe can examine the disagreement by linking a plot of the table, with a tour plot. Here is how to do this with `liminal`. @fig-compare-clusters1 and @fig-compare-clusters2 show screenshots of the exploration of the eight penguins on which the methods disagree. It makes sense that there is some confusion. These penguins are part of the large clump of observations that don't separate cleanly into two clusters. The eight penguins are in the middle of this clump. Realistically, both methods result in a plausible clustering, and it is not clear how these penguins should be grouped.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to do linked brushing with liminal\"}\nlibrary(liminal)\nlimn_tour_link(\n  p_cl[,3:4],\n  penguins_cl,\n  cols = bl:bm,\n  color = cl_w\n)\n```\n:::\n\n\n\n![Linking the confusion table with a tour using liminal. Points are coloured according to Wards linkage. The disagreement on eight penguins is with cluster 1 from Wards and cluster 2 from model-based.](images/compare-clusters1.png){#fig-compare-clusters1}\n\n![Highlighting the penguins where the methods disagree so we can see where these observations are located relative to the two clusters.](images/compare-clusters2.png){#fig-compare-clusters2}\n\n## Exercises {-}\n\n1. Compare the results of the four cluster model-based clustering with that of the four cluster Wards linkage clustering of the penguins data.\n2. Compare the results from clustering of the `fake_trees` data for two different choices of $k$. (This follows from the exercise in @sec-kmeans.) Which choice of $k$ is best? And what choice of $k$ best captures the 10 known branches?\n3. Compare and contrast the cluster solutions for the first four PCs of the `aflw` data, conducted in @sec-hclust and @sec-kmeans. Which provides the most useful clustering of this data?\n4. Pick your two clusterings on one of the challenge data sets, `c1`-`c7` from the `mulgar` package, that give very different results. Compare and contrast the two solutions, and decide which is the better solution.\n\n## Project {-}\n\nMost of the time your data will not neatly separate into clusters, but partitioning it into groups of similar observations can still be useful. In this case our toolbox will be useful in comparing and contrasting different methods, understanding to what extend a cluster mean can describe the observations in the cluster, and also how the boundaries between clusters have been drawn. To explore this we will use survey data that examines the risk taking behavior of tourists. The data was collected in Australia in 2015 [@risk-survey] and includes six types of risks (recreational, health, career, financial, safety and social) with responses on a scale from 1 (never) to 5 (very often). You can download the data from <a href='https://dicook.github.io/mulgar_book/data/risk_MSA.rds'> risk_MSA.rds </a>.\n\n1. We first examine the data in a grand tour. Do you notice that each variable was measured on a discrete scale?\n2. Next we explore different solutions from hierarchical clustering of the data. For comparison we will keep the number of clusters fixed to 6 and we will perform the hierarchical clustering with different combinations of distance functions (Manhattan distance and Euclidean distance) and linkage (single, complete and Ward linkage). Which combinations make sense based on what we know about the method and the data?\n3. For each of the hierarchical clustering solutions draw the dendrogram in 2D and also in the data space. You can also map the grouping into 6 clusters to different colors. How would you describe the different solutions?\n4. Using the method introduced in this chapter, compare the solution using Manhattan distance and complete linkage to one using Euclidean distance and Ward linkage. First compute a confusion table and then use `liminal` to explore some of the differences. For example, you should be able to see how small subsets where the two clustering solutions disagree can be outlying and are grouped differently depending on the choices we make.\n5. Selecting your preferred solution from hierarchical clustering, we will now compare it to what is found using $k$-means clustering with $k=6$. Use a tour to show the cluster means together with the data points (make sure to pick an appropriate symbol for the data points to avoid too much overplotting). What can you say about the variation within the clusters? Can you match some of the clusters with the most relevant variables from following the movement of the cluster means during the tour?\n6. Use a projection pursuit guided tour to best separate the clusters identified with $k$-means clustering. How are the clusters related to the different types of risk?\n7. Use the approaches from this chapter to summarize and compare the $k$-means solution to your selected hierarchical clustering results. Are the groupings mostly similar?\nYou can also use convex hulls to better compare what part of the space is occupied. Either look at subsets (selected from the liminal display) or you could facet the display using `tourr::animate_groupxy`.\n8. Some other possible activities include examining how model-based methods would cluster the data. We expect it should be similar to Wards hierarchical or $k$-means, that it will partition into roughly equal chunks with an EII variance-covariance model being optimal. Also examining an SOM fit. SOM is not ideal for this data because the data fills the space. If the SOM model is fitted properly it should be a tangled net where the nodes (cluster means) are fairly evenly spread out. Thus the result should again be similar to Wards hierarchical or $k$-means. A common problem with fitting an SOM is that optimisation stops early, before fully capturing the data set. This is the reasons to use the tour for SOM. If the net is bunched  in one part of the data space, it means that the optimisation wasn't successful.\n\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "12-summary-clust_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{\"knit_meta_id\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"unnamed-chunk-8\",\"unnamed-chunk-8\",\"unnamed-chunk-8\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"booktabs\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"caption\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]},{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"name\",\"options\",\"extra_lines\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"latex_dependency\"]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"longtable\"]},{\"type\":\"NULL\"},{\"type\":\"NULL\"}]}]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}