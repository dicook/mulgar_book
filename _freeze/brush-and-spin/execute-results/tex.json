{
  "hash": "3ed112816ee11dcdc3e33088a4d07c0c",
  "result": {
    "markdown": "## Spin and brush approach {#sec-clust-graphics}\n\n\\index{brushing!persistent} \\index{tour}\n\\index{cluster analysis!spin and brush}\n\nWhen the data to be clustered is purely numeric, and if the clusters are well-separated, a purely graphical spin and brush approach to cluster analysis works well. This is true even when there are nuisance variables and/or cases, marked differences in variance structures between groups or when groups have non-linear boundaries. It does not work very well when there are clusters that overlap, or when there are no distinct clusters but rather\nwe simply wish to partition the data. In these situations it may be better to begin with a numerical solution and to use visual tools to evaluate it, perhaps making refinements subsequently. Several examples of the spin and brush approach are documented in the literature, such as @CBCH95 and @WWS99.\n\nThe spin and brush approach is simply:\n\n1. Run the (grand) tour.\n2. Stop when you see a separated cluster of points.\n3. Paint the cluster a chosen colour.\n4. Repeat 1-2 until the data is grouped, and when no other separated cluster is visible in any projection. You may need to re-paint some points if they appear to be grouped incorrectly in a different projection, or paint more points that after spinning most likely belong to an existing group.\n\nIt can help to be able to remove a cluster, to de-clutter the display, in order to find more clusters.\n\n## Using `plotly`\n\n@fig-penguins-brush-and-spin shows a fixed length grand tour produced using `plotly`, with a brush tool made available to colour points. The code is messy, but follows that of [animation-tour-basic.R](https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R) from @plotly2020. There are key pieces in the code:\n\n1. Create the sequence of tour projections, and the data object containing data projections and projection coordinates. Include an observation id in the data object.\n2. Specify that the `id` variable is to be used to mark observations across animation frames using `highlight_key`.\n3. Draw them using `plotly`, with a `frame` parameter which specifies the animation sequence. \n4. Add a brush colour palette and specific brushing control using `highlight` to the plotly plot.\n\nThe result is an HTML object which can be saved for sharing. The drawback of this approach is that the results of the user actions cannot be saved, so you cannot recover the clusters corresponding to the colours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Following https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R\n# TURN INTO A FUNCTION TO MAKE IT EASIER\nlibrary(tourr)\nlibrary(plotly)\nload(\"data/penguins_sub.rda\")\np_mat <- as.matrix(penguins_sub[,1:4])\ntour <- new_tour(p_mat, \n                 grand_tour(), NULL)\n\ntour_dat <- function(step_size) {\n  step <- tour(step_size)\n  proj <- center(p_mat %*% step$proj)\n  data.frame(x = proj[,1], y = proj[,2], \n             species = penguins_sub$species,\n             id = 1:nrow(penguins_sub))\n}\n\nproj_dat <- function(step_size) {\n  step <- tour(step_size)\n  data.frame(\n    x = step$proj[,1], y = step$proj[,2], measure = colnames(p_mat)\n )\n}\n\nsteps <- c(0, rep(1/15, 150))\nstepz <- cumsum(steps)\n\n# tidy version of tour data\ntour_dats <- lapply(steps, tour_dat)\ntour_datz <- Map(function(x, y) cbind(x, step = y),\n                 tour_dats, stepz)\ntour_data <- dplyr::bind_rows(tour_datz)\n\ntour_data <- highlight_key(tour_data, ~id)\n\n# tidy version of tour projection data\nproj_dats <- lapply(steps, proj_dat)\nproj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)\nproj_data <- dplyr::bind_rows(proj_datz)\nproj_data$x <- proj_data$x*3\nproj_data$y <- proj_data$y*3\n\nax <- list(\n  title = \"\",\n  range = c(-3, 3),\n  zeroline = FALSE\n)\n\n# Set colors\nclrs <- grDevices::hcl.colors(6, palette=\"Zissou 1\")\n  \n# for nicely formatted slider labels\noptions(digits = 2)\n\np_b_s <- proj_data %>%\n  plot_ly(x = ~x, y = ~y, frame = ~step, \n          color = I(\"gray80\"),\n          width=600, height=600) %>%\n  config(displaylogo = FALSE, \n         modeBarButtonsToRemove = c(\"sendDataToCloud\", \"editInChartStudio\", \"zoom2d\", \"zoomIn2d\", \"zoomOut2d\", \"pan2d\", \"drawclosedpath\", \"drawopenpath\", \"autoScale2d\", \"hoverClosestCartesian\", \"hoverCompareCartesian\", \"resetScale2d\")) %>%\n  add_segments(xend = 0, yend = 0) %>%\n  add_text(text = ~measure) %>%\n  add_markers(color = I(\"black\"), data = tour_data, text = ~id, ids = ~id, hoverinfo = \"text\") %>%\n  layout(xaxis = ax, yaxis = ax) %>%\n  hide_legend() %>%\n  animation_opts(50, transition = 0, redraw = FALSE) %>%\n  highlight(on = \"plotly_selected\", \n            off = \"plotly_doubleclick\",\n            color = clrs, \n            persistent = TRUE, \n            dynamic = TRUE, \n            opacityDim = 0.5)\nhtmlwidgets::saveWidget(p_b_s,\n          file=\"html/penguins_brush_and_spin.html\",\n          selfcontained = TRUE)\n```\n:::\n\n\n::: {#fig-penguins-brush-and-spin fig-align=\"center\"}\n\n::: {.content-hidden when-format=\"pdf\"}\n\n<iframe width=\"600\" height=\"650\" src=\"html/penguins_brush_and_spin.html\" title=\"Controls to brush and spin to discover the three clusters in the penguins data.\"></iframe>\n:::\n\nControls to brush and spin to discover the three clusters in the penguins data. Use the lasso brush to colour points persistently when you see a cluster. Spin and colour again as necessary to identify all the clusters.\n:::\n\n::: {#fig-penguins-bs-static fig-align=\"center\" layout-ncol=2}\n\n\n![](images/penguins-bs4.png){#fig-penguins-bs1 fig-alt=\"FIX ME\" fig.align=\"center\"}\n\n![](images/penguins-bs5.png){#fig-penguins-bs2 fig-alt=\"FIX ME\" fig.align=\"center\"}\n\nScreenshots of the spin and brush approach being used on the penguins data.\n:::\n\n## Using `detourr`\n\nSpin-and-brush can also be achieved using the `detourr` package, and the results can be saved for further analysis. The code is very easy, and then all the controls are interactive.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(detourr)\ngrDevices::hcl.colors(3, palette=\"Zissou 1\")\ndetour(penguins_sub[,1:4], \n       tour_aes(projection = bl:bm)) |>\n       tour_path(grand_tour(2), fps = 60, \n                 max_bases=20) |>\n       show_scatter(alpha = 0.7, \n                    axes = FALSE)\n```\n:::\n\n\n- `tour_aes(projection = bl:bm))` is `ggplot`-style syntax for specifying the variables `bl:bm` to include in the tour. \n- `tour_path(grand_tour(2), fps = 60, \n                 max_bases=20)` specifies 2D grand tour path, with a longer than default path set by `max_bases=20` and the `fps` argument sets the smoothness.\n- Brush interaction is set by choosing the square icon (4th from top), so when the cursor is moved over the window points are selected.\n- You can choose specific colours to brush, from the colour palette by using hexcolours to match your favourite palette. Here we've used colours from the Zissou palette.\n- The paintbrush icon sets the selected points to the current colour.\n- Save the final colour labels using the download icon. \n\n::: {#fig-penguins-bs-detourr fig-align=\"center\" layout-ncol=2}\n\n\n![First cluster cluster](images/penguins-bs6.png){#fig-penguins-bs3 fig-alt=\"FIX ME\" fig.align=\"center\" width=300}\n\n![Second cluster](images/penguins-bs7.png){#fig-penguins-bs4 fig-alt=\"FIX ME\" fig.align=\"center\" width=300}\n\n\nScreenshots of the spin and brush approach using `detourr` on the penguins data. \n:::\n\n@fig-penguins-bs-detourr shows the stages of spin and brush on the penguins data using detourr. The final results can be examined and used for later analysis. Because this data came with a class variable, the penguin species, it is interesting to see how close the spin-and-brush clustering approach came to recovering these: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nload(\"data/penguins_sub.rda\")\ndetourr_penguins <- read_csv(\"data/detourr_penguins.csv\")\ntable(penguins_sub$species, detourr_penguins$colour)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           \n            000000 3e9eb6 f5191c\n  Adelie       143      0      3\n  Chinstrap      6      0     62\n  Gentoo         2    117      0\n```\n:::\n:::\n\n\nIt's quite close! All but two of the 119 Gentoo penguins were identified as a cluster (labelled as \"3e9eb6\" from the chosen light blue hex colour), and all but three of the 146 Adelie penguins were identified as a cluster, (labelled as \"000000\" which is the unbrushed black group). Most of the Chinstrap species were recovered also (labelled as \"f5191c\" for the red hex colour).\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Exercises {-}\n\n1. Use the spin and brush approach to identify the  three clusters in the `mulgar::clusters` data set.\n2. Use the spin and brush approach to identify the six clusters in the `mulgar::multicluster` data set. (The code below using detourr could be useful.)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(detourr)\n\n# Use a random starting basis because the first two variables make it too easy\nstrt <- tourr::basis_random(10, 2)\ndetour(multicluster, \n       tour_aes(projection = -group)) |>\n       tour_path(grand_tour(2), start=strt, fps = 60) |>\n       show_scatter(alpha = 0.7, axes = FALSE)\n```\n:::\n\n\n3. Use the spin and brush technique to identify the branches of the `fake_trees` data available in the `liminal` package (originally from [PHATE](https://phate.readthedocs.io/en/stable/)). The result should look something like this:\n\n![Example solution after spin and brush on fake_trees data.](images/fake_trees_sb.png){#fig-fake-trees-sb}\n\nYou can use the download button to save the data with the colours. Tabulate the `branches` id variable in the original data with the `colour` groups created from brushing, to see how closely you have recovered the original classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(detourr)\nlibrary(liminal)\nlibrary(mulgar)\ndata(\"fake_trees\")\n\n# Original data is 100D, so need to reduce dimension using PCA first\nft_pca <- prcomp(fake_trees[,1:100], \n                 scale=TRUE, retx=TRUE)\nggscree(ft_pca)\ndetour(as.data.frame(ft_pca$x[,1:10]), \n       tour_aes(projection = PC1:PC10)) |>\n       tour_path(grand_tour(2), fps = 60, max_bases=50) |>\n       show_scatter(alpha = 0.7, axes = FALSE)\n\nft_sb <- read_csv(\"data/fake_trees_sb.csv\")\ntable(fake_trees$branches, ft_sb$colour)\n```\n:::\n\n\n<!--\n\\index{datasets!\\Data{PRIM7}}\n\nThis description of the spin and brush approach on \\Data{PRIM7}, a\nparticle physics dataset, follows that in \\citeasnoun{CBCH95}. The data\ncontains seven variables. We have no labels for the data, so when we\nbegin, all the points have the same color and glyph. Watch the data in a\ntour for a few minutes and you will see that there are no natural\nclusters, but there is clearly structure.\n\n\\index{projection pursuit!indexes}\n\\index{projection pursuit!indexes!holes}\n\\index{projection pursuit!indexes!central mass}\n\\index{principal component analysis}\n\nWe will use the projection pursuit guided tour to help us find that\nstructure. We will tour on the principal components, rather than the raw\nvariables, because that improves the performance of the projection\npursuit indexes. Two indexes are useful for detecting clusters: holes\nand central mass. The holes index is sensitive to projections where\nthere are few points (i.e., a hole) in the center. The central mass\nindex is the opposite: It is sensitive to projections that have too many\npoints in the center. These indexes are explained in @chap-toolbox.\n\nThe holes index is usually the most useful for clustering, but not for\nthe particle physics data, because it does not have a \\`\\`hole'' at the\ncenter. The central mass index is the most appropriate here. Alternate\nbetween optimization (a guided tour) and the unguided grand tour to find\nlocal maxima, each of which is a projection that is potentially useful\nfor revealing clusters. The process is illustrated in @fig-prim7-tour.\n\nThe top left plot shows the initial default projection, the second\nprincipal component plotted against the first. The plot next to it shows\nthe projected data corresponding to the first local maximum found by the\nguided tour. It has three strands of points stretching out from the\ncentral clump and several outliers. We brush the points along each\nstrand, in red, blue, and orange, and we paint the outliers with open\ncircles. (See the next two plots.) We continue by choosing a new random\nstart for the guided tour, and then waiting until new territory in the\ndata is discovered. \\index{brushing!persistent}\n\nThe optimization settles on a projection where there are three strands\nvisible, as observed in the leftmost plot in the second row. Two strands\nhave been previously brushed, but a new one has appeared; this is\npainted yellow.\n\nWe also notice that there is another new strand hidden below the red\nstrand. It is barely distinguishable from the red strand in this\nprojection, but the two strands separate widely in other projections. It\nis tricky to brush it, because it is not well separated in this\nprojection. We use a trick: Hide the red points, brush the new strand\ngreen, and \\`\\`unhide'' the red points again (middle plot in the second\nrow).\n\nFive clusters have been easily identified, and now finding new clusters\nin this data is increasingly difficult. After several more alternations\nbetween the grand tour and the guided tour, we find something new (shown\nin the rightmost plot in the second row): One more strand has emerged,\nand we paint it pink.\n\n% Figure 3\n\\begin{figure}[htp]\n\\centerline{{\\includegraphics[width=1.5in]{chap-clust/prim7-pp1.pdf}}\n {\\includegraphics[width=1.5in]{chap-clust/prim7-pp2.pdf}}\n {\\includegraphics[width=1.5in]{chap-clust/prim7-pp5.pdf}}}\n\\smallskip\n\\centerline{{\\includegraphics[width=1.5in]{chap-clust/prim7-pp7.pdf}}\n {\\includegraphics[width=1.5in]{chap-clust/prim7-pp8.pdf}}\n {\\includegraphics[width=1.5in]{chap-clust/prim7-pp9.pdf}}}\n\\centerline{{\\includegraphics[width=1.5in]{chap-clust/prim7-pp10.pdf}}\n  {\\includegraphics[width=1.5in]{chap-clust/prim7-pp11.pdf}}\n  {\\includegraphics[width=1.5in]{chap-clust/prim7-pp13.pdf}}}\n\\caption[Stages of ``spin and brush'' on \\Data{PRIM7}]{Stages of spin\nand brush on \\Data{PRIM7}.  The high-dimensional geometry emerges as\nthe clusters are painted.}\n\\label{prim7-tour}\n\\end{figure}\n\nThe results at this stage are summarized by the bottom row of plots.\nThere is a very visible triangular component (in gray) revealed when all\nof the colored points are hidden. We check the shape of this cluster by\ndrawing lines between outer points to contain the inner ones. Touring\nafter the lines are drawn helps to check how well they match the shape\nof the clusters. The colored groups pair up at each vertex, and we draw\nin the shape of these too --- a single line matches the structures\nreasonably well.\n\nThe final step of the spin and brush clustering is to clean up this\nsolution, touching up the color groups by continuing to tour, and\nrepainting a point here and there. When we finish, we have found seven\nclusters in this data that form a very strong geometric object in the\ndata space: a two-dimensional (2D) triangle, with two one-dimensional\n(1D) strands extending in different directions from each vertex. The\nlines confirm our understanding of this object's shape, because the\npoints stay close to the lines in all of the projections observed in a\ntour.\n\n% Figure 4\n\\begin{figure}\n\\centerline{\n   \\includegraphics[width=1.5in]{chap-clust/prim7-pp13-model.pdf}\n   \\includegraphics[width=3in]{chap-clust/prim7-par.pdf}\n}\n\\caption[The \\Data{PRIM7} model summarized]{The \\Data{PRIM7} model\nsummarized.  The model summary {\\bf (left)} was formed by adding line\nsegments manually.  In the parallel coordinate plot, the profiles\nhighlighted in dark gray correspond to the points in the 2D triangle\nat the center of the model.  }\n\\label{prim7-model}\n\\end{figure}\n\nThe next stage of cluster analysis is to characterize the nature of the\nclusters. To do that, we would calculate summary statistics for each\ncluster, and plot the clusters (@fig-prim7-model). When we plot the\nclusters of the particle physics data, we find that the 2D triangle\nexists primarily in the plane defined by X3 and X5. If you do the same,\nnotice that the variance in measurements for the gray group is large in\nvariables X3 and X5, but negligible in the other variables. The linear\npieces can also be characterized by their distributions on each of the\nvariables. With this example, we have shown that it is possible to\nuncover very unusual clusters in data without any domain knowledge.\n\nHere are several tips about the spin and brush approach.\n\n-   Save the dataset frequently during the exploration of a complex\n    dataset, being sure to save your colors and glyphs, because it may\n    take several sessions to arrive at a final clustering.\\\n-   Manual controls are useful for refining the optimal projection\n    because another projection in the neighborhood may be more\n    revealing.\\\n-   The holes index is usually the most successful projection pursuit\n    index for finding clusters.\n-   Principal component coordinates may provide a better starting point\n    than the raw variables.\n\nFinally, the spin and brush method will not work well if there are no\nclear separations in the data, and the clusters are high-dimensional,\nunlike the low-dimensional clusters found in this example.\n-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}