{
  "hash": "f9434680b90de430bcae9a1fa064d5ef",
  "result": {
    "engine": "knitr",
    "markdown": "## Spin-and-brush approach {#sec-clust-graphics}\n\n\\index{brushing!persistent} \\index{tour}\n\\index{cluster analysis!spin-and-brush}\n\nSeveral examples of the spin-and-brush approach are documented in the literature, such as @CBCH95 and @WWS99. The steps are:\n\n1. Run the (grand) tour.\n2. Stop when you see a separated cluster of points.\n3. Paint the cluster a chosen colour.\n4. Repeat 1-2 until the data is grouped, and when no other separated cluster is visible in any projection. You may need to re-paint some points if they appear to be grouped incorrectly in a different projection, or paint more points that after spinning most likely belong to an existing group.\n\nSpin-and-brush is useful for exploring clustering when the data is numeric, and contains well-separated clusters. Patterns that adversely affect numerical techniques, such as nuisance variables or cases, differences in variances or shapes between clusters, don't pose any problems for spin-and-brush. It is also effective if the data has connected low-dimensional (1D or 2D) clusters in high dimensions. \n\nIt will not work very well when there are no distinct clusters and the purpose of clustering is to partition the data into subsets. Here, you could begin with a solution provided by some numerical clustering algorithm, and to use visual tools to evaluate it, with goal of refining the results.\n\nWith a complex problem where there are many clusters, one can work sequentially, and remove each cluster after it is brushed, to de-clutter the display, in order to find more clusters.\n\n\nSpin-and-brush is best achieved using a fully interactive graphics system like in the `detourr` package, where the results can be saved for further analysis. The code is very easy, and then all the controls are interactive.\n\n\\index{software!detourr}\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(detourr)\ngrDevices::hcl.colors(3, palette=\"Zissou 1\")\ndetour(penguins_sub[,1:4], \n       tour_aes(projection = bl:bm)) |>\n       tour_path(grand_tour(2), fps = 60, \n                 max_bases=20) |>\n       show_scatter(alpha = 0.7, \n                    axes = FALSE)\n```\n:::\n\n\n\n\n\n\n- `tour_aes(projection = bl:bm))` is `ggplot`-style syntax for specifying the variables `bl:bm` to include in the tour. \n- `tour_path(grand_tour(2), fps = 60, max_bases=20)` specifies 2D grand tour path, with a longer than default path set by `max_bases=20` and the `fps` argument sets the smoothness.\n- Brush interaction is set by choosing the square icon (4th from top), so when the cursor is moved over the window points are selected.\n- You can choose specific colours to brush, from the colour palette by using hexcolours to match your favourite palette. Here we've used colours from the Zissou palette.\n- The paintbrush icon sets the selected points to the current colour.\n- Save the final colour labels using the download icon. \n\n::: {#fig-penguins-bs-detourr fig-align=\"center\" layout-ncol=2}\n\n\n![One cluster painted](images/penguins-bs6.png){#fig-penguins-bs3 fig-alt=\"Projected view where one cluster can be distinguished and is brushed in blue.\" fig.align=\"center\" width=270}\n\n![Another cluster painted](images/penguins-bs7.png){#fig-penguins-bs4 fig-alt=\"Projection where a second cluster can be distinguished and is brushed in red.\" fig.align=\"center\" width=270}\n\n\nScreenshots of the spin-and-brush approach using `detourr` on the penguins data. \n:::\n\n@fig-penguins-bs-detourr shows the stages of spin-and-brush on the penguins data using detourr. The final results can be examined and used for later analysis. Because this data came with a class variable, the penguin species, it is interesting to see how close the spin-and-brush clustering approach came to recovering these: \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Code to make confusion matrix\"}\nlibrary(readr)\nload(\"data/penguins_sub.rda\")\ndetourr_penguins <- read_csv(\"data/detourr_penguins.csv\")\ntable(penguins_sub$species, detourr_penguins$colour)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           \n            000000 3e9eb6 f5191c\n  Adelie       143      0      3\n  Chinstrap      6      0     62\n  Gentoo         2    117      0\n```\n\n\n:::\n:::\n\n\n\n\n\n\nIt's quite close! All but two of the 119 Gentoo penguins were identified as a cluster (labelled as \"3e9eb6\" from the chosen light blue hex colour), and all but three of the 146 Adelie penguins were identified as a cluster, (labelled as \"000000\" which is the unbrushed black group). Most of the Chinstrap species were recovered also (labelled as \"f5191c\" for the red hex colour).\n\n## Exercises {-}\n\n\\index{data!clusters}\n\\index{data!multicluster}\n\\index{data!fake trees}\n\n1. Use the spin-and-brush approach to identify the three clusters in the `mulgar::clusters` data set.\n2. Use the spin-and-brush approach to identify the six clusters in the `mulgar::multicluster` data set. (The code below using detourr could be useful.)\n3. Use spin-and-brush on the challenge data sets, `c1`-`c7` from the `mulgar` package. How many clusters do you detect in each?\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(detourr)\n\n# Use a random starting basis because the \n# first two variables make it too easy\nstrt <- tourr::basis_random(10, 2)\ndetour(multicluster, \n       tour_aes(projection = -group)) |>\n       tour_path(grand_tour(2), \n                 start=strt, fps = 60) |>\n       show_scatter(alpha = 0.7, \n                    axes = FALSE)\n```\n:::\n\n\n\n\n\n\n4. Use the spin-and-brush technique to identify the branches of the `fake_trees` data. The result should look something like this:\n\n![Example solution after spin-and-brush on fake trees data.](images/fake_trees_sb.png){#fig-fake-trees-sb fig-alt=\"Projection where some clusters extend in different direction, with point colors indicating the user-identified clusters.\"}\n\nYou can use the download button to save the data with the colours. Tabulate the `branches` id variable in the original data with the `colour` groups created from brushing, to see how closely you have recovered the original classes.\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Project {-}\n\nThis exercise continues from the project in Chapter 5, to check your choice of NLDR representation. Using your best NLDR representation, cluster the data into as many clusters or clumps as you can see. Save the clusters. Now use spin-and-brush in `detourr` to colour as many clusters in the high dimensions as you can find. Save your clusters. How closely do these two approaches agree? \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}