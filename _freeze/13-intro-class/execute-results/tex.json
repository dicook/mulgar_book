{
  "hash": "22d6e34389ae89caefba99f4da7b8260",
  "result": {
    "markdown": "# Overview\n\n<!--\n- overview of supervised classification, model structure\n- refer to the ISLR language\n- basics of training/testing for model building\n- model components needed from all\n- common tasks: checking clusters relative to class labels, looking at boundaries\n-->\n\nMethods for supervised classification originated in the field of Statistics in the early nineteenth century, under the moniker *discriminant analysis* (see, for example, @Fi36). An increase in the collection of data, and storage in databases, in the late twentieth century has inspired a growing desire to extract knowledge from data, particularly to be able accurately predict the class labels. This has contributed to an explosion of research on new methods, especially on algorithms that focus on accurate prediction of new data based on training samples.\n\n\\index{classification!supervised}\n\nIn contrast to unsupervised classification, the class label (categorical response variable) is known, in the training sample. The training sample is used to build the prediction model, and also to estimate the accuracy, or inversely error, of the model for future data. It is also important to understand the model and to interpret it, so that we can know how predictions are made. High-dimensional visualisation can help with this, and helps to tackle questions like:\n\n- Are the classes well separated in the data space, so that they\ncorrespond to distinct clusters?  If so, what are the shapes of the clusters?  Is each cluster sufficiently ellipsoidal so that we can assume that the data arises from a mixture of multivariate normal distributions?  Do the clusters exhibit characteristics that suggest one algorithm in preference to others?\n- Where does the boundary between classes fall?  Are the classes\nlinearly separable, or does the difference between classes suggest\na non-linear boundary?  How do changes in the input parameters affect these boundaries? How do the boundaries generated by different methods vary?\n- What cases are misclassified, or have more uncertain predictions?  Are there places in the data space where predictions are especially good or bad?\n- Which predictors most contribute to the model predictions? Is it possible to reduce the set of explanatory variables?\n \nAddressing these types of queries also motivate the emerging field called explainable artificial intelligence (XAI), which goes beyond predictive accuracy to more completely satisfy the *desire to extract knowledge from data*. \n\nAlthough we focus on categorical response, some of the techniques here can be modified or adapted for problems with a numeric, or continuous, response variable. With a categorical response, and numerical predictors, we map colour to the response variable and use the tour to examine the relationship between predictors, and the different classes. \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Examples of supervised classification patterns: (a) linearly separable, (b) linear but not completely separable, (c) non-linearly separable, (d) non-linear, but not completely separable.](13-intro-class_files/figure-pdf/fig-sup-example-1.pdf){#fig-sup-example width=80%}\n:::\n:::\n\n\n\n@fig-sup-example shows some 2D examples where the two classes are (a) linearly separable, (b) not completely separable but linearly different, (c) non-linearly separable and (d) not completely separable but with a non-linear difference. We can also see that in (a) only the horizontal variable would be important for the model because the two classes are completely separable in this direction. Although the pattern in (c) is separable classes, most models would have difficulty capturing the separation. It is for this reason that it is important to understand the boundary between classes produced by a fitted model. In each of b, c, d it is likely that some observations would be misclassified. Identifying these cases, and inspecting where they are in the data space is important for understanding the model's future performance. \n",
    "supporting": [
      "13-intro-class_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}