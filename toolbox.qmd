# Toolbox {#toolbox}


## Using tours in the `tourr` package

### Installation

You can install the released version of `tourr` from [CRAN](https://CRAN.R-project.org) with:

``` r
install.packages("tourr")
```

and the development version from github with:

``` r
# install.packages("remotes")
remotes::install_github("ggobi/tourr")
```

### Getting started

To run a tour in R, use one of the animate functions. This code will show a 2D tour displayed as a scatterplot on a 6D data set with three labelled classes. 

``` r
animate_xy(flea[,-7], col=flea$species)
```

@tourr remains a good reference for learning more about this package.

### Different tours

There are two main components of the tour algorithm:

1. The dimension of the projection, which will impact the type of display to use.
2. The algorithm that delivers the projections to show. 

#### Dimension of projection and display

- `display_dist()`: choice of density, histogram or average shifted histogram (ash) display of the 1D projections.
- `display_xy()`, `display_density2d()`, `display_groupxy()`, `display_pca()`, `display_sage()`, `display_slice()`, `display_trails()`: choices in display of 2D projections.
- `display_depth()`, `display_stereo()`: choices to display 3D projections. 
- `display_pcp()`, `display_scatmat()`, `display_stars()`, `display_faces()`: choices for displaying three or more variables.
- `display_image()`: to use with multispectral images, where different combinations of spectral bands are displayed. See @WPS98 and @Symanzik2002NewAO for applications.
- `dependence_tour()`: displaying two groups of variables as in multiple regression, or multivariate regression or canonical correlation analysis, as two independent 1D projections.
- `display_andrews()`: 1D projections as Andrews curves.

#### Algorithms for projection delivery

- `grand_tour()`: Smooth sequence of random projections to view all possible projections as quickly as possible. Good for getting an overview of the high-dimensional data, especially when you don't know what you are looking for. 
- `guided_tour()`: Follow a projection pursuit optimisation to find projections that have particular patterns. This is used when you want to learn if the data has particular patterns, such as clustering or outliers. Use the `holes()` index to find projections with gaps that allow one to see clusters, or `lda_pp()` or `pda_pp()` when class labels are known and you want to find the projections where the clusters are separated. 
- `little_tour()`: Smoothly interpolate between pairs of variables, to show all the marginal views of the data.
- `local_tour()`: Makes small movements around a chosen projections to explore a small neighbourhood. Very useful to learn if small distances away from a projection change the pattern substantially or not.
- `radial_tour()`: Interpolates a chosen variable out of the projection, and then back into the projection. This is useful for assessing importance of variables to pattern in a projection. If the pattern changes a lot when the variable is rotated out, then the variable is important for producing it.
- `dependendence_tour()`: Delivers two sequences of 1D grand tours, to examine associations between two sets of variables.
- `frozen_tour()`: This is an interesting one! it allows the coefficient for some variables to be fixed, and others to vary.

### The importance of scale



### Saving your tour

Working with many dimensions, how to adapt 

Grand tour, and show paths on the space, starting with 1D. How more time gives more coverage of the sphere. Then the torus and paths on torus.

Different types of tours, and when to use them.

And finally how to save tours, and make plot of single projection

Need to include
- half_range
- standardizing variables

### Understanding your tour path

## What not to do

- Categorical data, or discrete data
- When time or space is a variable

## Tours in other software

Also include other software now available

- detourr
- langevitour
- woylier
- spinifex
- ferrn

