# Hierarchical clustering {#chap-hclust}

\index{cluster analysis!algorithms}

\index{cluster analysis!hierarchical} \index{cluster analysis!intercluster distance (linkage)}

## Explanation of the algorithm

Hierarchical cluster algorithms sequentially fuse neighboring points to form ever-larger clusters, starting from a full interpoint distance matrix. @fig-hc-sim illustrates the hierarchical clustering approach for a simple simulated data set (a) with two well-separated clusters in 2D. The dendrogram (b) is a representation of the order that points are joined into clusters. The dendrogram strongly indicates two clusters because there are two branches branches representing the last join are much longer than all of the other branches. Although, the dendrogram is usually a good summary of the steps taken by the algorithm, it can be misleading. The dendrogram might strongly suggest a clustering but it might be a terrible solution. To check this we need to show the model with the data, as shown in plot (c). The segments show how the points and clusters are joined. Note that once points are joined into a cluster, the centroid of that cluster is used as the join location with other points or other clusters, and this is represented by a "+". We can see that the longest edge is the one stretching across the gap between the two clusters, which is the location where the dendrogram would be cut to produce the two-cluster solution. This two-cluster solution is shown in plot (d).

```{r}
#| label: hc-libraries
#| message: FALSE
library(ggplot2)
library(mulgar)
library(ggdendro)
library(dplyr)
library(patchwork)
library(tourr)
library(plotly)
library(htmlwidgets)
```

```{r}
#| label: fig-hc-sim
#| eval: true
#| message: false
#| warning: false
#| fig-cap: "Hierarchical clustering on simulated data: (a) data, (b) dendrogram, (c) dendrogram on the data, and (d) two cluster solution. Nodes of the dendrogram indicated by `+` when it is drawn on the data."
#| fig-width: 5
#| fig-height: 5
data(simple_clusters)
# Data has two well-separated clusters
pd <- ggplot(simple_clusters, aes(x=x1, y=x2)) +
  geom_point(colour="orange", size=2, alpha=0.8) +
  ggtitle("(a)") +
  theme(aspect.ratio=1) 

# Compute hierarchical clustering with Ward's linkage
cl_hw <- hclust(dist(simple_clusters[,1:2]),
                method="ward.D2")
cl_ggd <- dendro_data(cl_hw, type = "triangle")
ph <- ggplot() +
  geom_segment(data=cl_ggd$segments, 
               aes(x = x, y = y, 
                   xend = xend, yend = yend)) + 
  geom_point(data=cl_ggd$labels, aes(x=x, y=y),
             colour="orange", alpha=0.8) +
  ggtitle("(b)") +
  theme_dendro()

# Compute dendrogram in data
cl_hfly <- hierfly(simple_clusters, cl_hw, scale=FALSE)

pdh <- ggplot() +
  geom_segment(data=cl_hfly$segments, 
                aes(x=x, xend=xend,
                    y=y, yend=yend)) +
  geom_point(data=cl_hfly$data, 
             aes(x=x1, y=x2,
                 shape=factor(node),
                 colour=factor(node),
                 size=1-node), alpha=0.8) +
  scale_shape_manual(values = c(16, 3)) +
  scale_colour_manual(values = c("orange", "black")) +
  scale_size(limits=c(0,17)) +
  ggtitle("(c)") +
  theme(aspect.ratio=1, legend.position="none")

# Show result
simple_clusters <- simple_clusters %>%
  mutate(clw = factor(cutree(cl_hw, 2)))
pc <- ggplot(simple_clusters) +
  geom_point(aes(x=x1, y=x2, colour=clw), 
             size=2, alpha=0.8) +
  scale_colour_brewer(palette="Set1") +
  ggtitle("(d)") +
  theme(aspect.ratio=1, legend.position="none")

pd + ph + pdh + pc + plot_layout(ncol=2)
```

Clustering algorithms are all prone to being confused by different problems occurring in data. For hierarchical clustering, plotting the dendrogram on the data provides another way to assess the solution. For hierarchical clustering additional the complications arise from a range of choices for defining distance once points have been joined into clusters.

*Distance between clusters* is described by a "linkage method", of which there are many. For example, single linkage measures the distance between clusters by the smallest interpoint distance between the members of the two clusters clusters, complete linkage uses the maximum interpoint distance, and average linkage uses the average of the interpoint distances. Wards linkage, which usually produces the best clustering solutions, defines the distance as the reduction in the within-group variance. A good discussion on cluster analysis and linkage can be found in @HOML, on [Wikipedia](https://en.wikipedia.org/wiki/Cluster_analysis) or any multivariate textbook.

## Why you should look at the dendrogram on the data

```{r}
#| label: fig-problems
#| eval: true
#| message: false
#| warning: false
#| fig-cap: "Two examples of data structure that causes problems for hierarchical clustering. Nuisance observations can cause problems because the close observations between the two clusters can cause some chaining in the hierarchical joining of observations.  Nuisance variables can cause problems because observations across the gap can seem closer than observations at the end of each cluster."
#| fig-width: 8
#| fig-height: 4
# Nuisance observations
set.seed(20190514)
x <- (runif(20)-0.5)*4
y <- x
d1 <- data.frame(x1 = c(rnorm(50, -3), 
                            rnorm(50, 3), x),
                 x2 = c(rnorm(50, -3), 
                            rnorm(50, 3), y),
                 cl = factor(c(rep("A", 50), 
                             rep("B", 70))))
d1 <- d1 %>% 
  mutate_if(is.numeric, function(x) (x-mean(x))/sd(x))
pd1 <- ggplot(data=d1, aes(x=x1, y=x2)) + 
  geom_point() +
    ggtitle("Nuisance observations") +
    theme(aspect.ratio=1) 

# Nuisance variables
set.seed(20190512)
d2 <- data.frame(x1=c(rnorm(50, -4), 
                            rnorm(50, 4)),
                 x2=c(rnorm(100)),
                 cl = factor(c(rep("A", 50), 
                             rep("B", 50))))
d2 <- d2 %>% 
  mutate_if(is.numeric, function(x) (x-mean(x))/sd(x))
pd2 <- ggplot(data=d2, aes(x=x1, y=x2)) + 
  geom_point() +
    ggtitle("Nuisance variables") +
    theme(aspect.ratio=1)

pd1 + pd2 + plot_layout(ncol=2)
```

```{r}
#| label: fig-d1-s
#| eval: true
#| message: false
#| warning: false
#| fig-cap: "Single linkage clustering on nuisance cases in comparison to Ward's linkage."
#| fig-width: 9
#| fig-height: 6
# Compute single linkage
d1_hs <- hclust(dist(d1[,1:2]),
                method="single")
d1_ggds <- dendro_data(d1_hs, type = "triangle")
pd1s <- ggplot() +
  geom_segment(data=d1_ggds$segments, 
               aes(x = x, y = y, 
                   xend = xend, yend = yend)) + 
  geom_point(data=d1_ggds$labels, aes(x=x, y=y),
             colour="orange", alpha=0.8) +
  ggtitle("(a) Single linkage dendrogram") +
  theme_dendro()

# Compute dendrogram in data
d1_hflys <- hierfly(d1, d1_hs, scale=FALSE)

pd1hs <- ggplot() +
  geom_segment(data=d1_hflys$segments, 
                aes(x=x, xend=xend,
                    y=y, yend=yend)) +
  geom_point(data=d1_hflys$data, 
             aes(x=x1, y=x2,
                 shape=factor(node),
                 colour=factor(node),
                 size=1-node), alpha=0.8) +
  scale_shape_manual(values = c(16, 3)) +
  scale_colour_manual(values = c("orange", "black")) +
  scale_size(limits=c(0,17)) +
  ggtitle("(b) Dendrogram in data") +
  theme(aspect.ratio=1, legend.position="none")

# Show result
d1 <- d1 %>%
  mutate(cls = factor(cutree(d1_hs, 2)))
pc_d1s <- ggplot(d1) +
  geom_point(aes(x=x1, y=x2, colour=cls), 
             size=2, alpha=0.8) +
  scale_colour_brewer(palette="Set1") +
  ggtitle("(c) Two-cluster solution") +
  theme(aspect.ratio=1, legend.position="none")

# Compute Wards linkage
d1_hw <- hclust(dist(d1[,1:2]),
                method="ward.D2")
d1_ggdw <- dendro_data(d1_hw, type = "triangle")
pd1w <- ggplot() +
  geom_segment(data=d1_ggdw$segments, 
               aes(x = x, y = y, 
                   xend = xend, yend = yend)) + 
  geom_point(data=d1_ggdw$labels, aes(x=x, y=y),
             colour="orange", alpha=0.8) +
  ggtitle("(d) Ward's linkage dendrogram") +
  theme_dendro()

# Compute dendrogram in data
d1_hflyw <- hierfly(d1, d1_hw, scale=FALSE)

pd1hw <- ggplot() +
  geom_segment(data=d1_hflyw$segments, 
                aes(x=x, xend=xend,
                    y=y, yend=yend)) +
  geom_point(data=d1_hflyw$data, 
             aes(x=x1, y=x2,
                 shape=factor(node),
                 colour=factor(node),
                 size=1-node), alpha=0.8) +
  scale_shape_manual(values = c(16, 3)) +
  scale_colour_manual(values = c("orange", "black")) +
  scale_size(limits=c(0,17)) +
  ggtitle("(e) Dendrogram in data") +
  theme(aspect.ratio=1, legend.position="none")

# Show result
d1 <- d1 %>%
  mutate(clw = factor(cutree(d1_hw, 2)))
pc_d1w <- ggplot(d1) +
  geom_point(aes(x=x1, y=x2, colour=clw), 
             size=2, alpha=0.8) +
  scale_colour_brewer(palette="Set1") +
  ggtitle("(f) Two-cluster solution") +
  theme(aspect.ratio=1, legend.position="none")

pd1s + pd1hs + pc_d1s + 
  pd1w + pd1hw + pc_d1w +
  plot_layout(ncol=3)
```

```{r}
#| label: fig-d2-c
#| eval: true
#| message: false
#| warning: false
#| fig-cap: "Complete linkage clustering on nuisance variables in comparison to Ward's linkage. The complete linkage dendrogram looks quite reasonably suggesting a two-cluster solution, but when it is plotted amongst the data that it is clearly not a good two-cluster solution."
#| fig-width: 9
#| fig-height: 6
# Compute complete linkage
d2_hc <- hclust(dist(d2[,1:2]),
                method="complete")
d2_ggdc <- dendro_data(d2_hc, type = "triangle")
pd2c <- ggplot() +
  geom_segment(data=d2_ggdc$segments, 
               aes(x = x, y = y, 
                   xend = xend, yend = yend)) + 
  geom_point(data=d2_ggdc$labels, aes(x=x, y=y),
             colour="orange", alpha=0.8) +
  ggtitle("(a) Complete linkage dendrogram") +
  theme_dendro()

# Compute dendrogram in data
d2_hflyc <- hierfly(d2, d2_hc, scale=FALSE)

pd2hc <- ggplot() +
  geom_segment(data=d2_hflyc$segments, 
                aes(x=x, xend=xend,
                    y=y, yend=yend)) +
  geom_point(data=d2_hflyc$data, 
             aes(x=x1, y=x2,
                 shape=factor(node),
                 colour=factor(node),
                 size=1-node), alpha=0.8) +
  scale_shape_manual(values = c(16, 3)) +
  scale_colour_manual(values = c("orange", "black")) +
  scale_size(limits=c(0,17)) +
  ggtitle("(b) Dendrogram in data") +
  theme(aspect.ratio=1, legend.position="none")

# Show result
d2 <- d2 %>%
  mutate(clc = factor(cutree(d2_hc, 2)))
pc_d2c <- ggplot(d2) +
  geom_point(aes(x=x1, y=x2, colour=clc), 
             size=2, alpha=0.8) +
  scale_colour_brewer(palette="Set1") +
  ggtitle("(c) Two-cluster solution") +
  theme(aspect.ratio=1, legend.position="none")

# Compute Wards linkage
d2_hw <- hclust(dist(d2[,1:2]),
                method="ward.D2")
d2_ggdw <- dendro_data(d2_hw, type = "triangle")
pd2w <- ggplot() +
  geom_segment(data=d2_ggdw$segments, 
               aes(x = x, y = y, 
                   xend = xend, yend = yend)) + 
  geom_point(data=d2_ggdw$labels, aes(x=x, y=y),
             colour="orange", alpha=0.8) +
  ggtitle("(d) Ward's linkage dendrogram") +
  theme_dendro()

# Compute dendrogram in data
d2_hflyw <- hierfly(d2, d2_hw, scale=FALSE)

pd2hw <- ggplot() +
  geom_segment(data=d2_hflyw$segments, 
                aes(x=x, xend=xend,
                    y=y, yend=yend)) +
  geom_point(data=d2_hflyw$data, 
             aes(x=x1, y=x2,
                 shape=factor(node),
                 colour=factor(node),
                 size=1-node), alpha=0.8) +
  scale_shape_manual(values = c(16, 3)) +
  scale_colour_manual(values = c("orange", "black")) +
  scale_size(limits=c(0,17)) +
  ggtitle("(e) Dendrogram in data") +
  theme(aspect.ratio=1, legend.position="none")

# Show result
d2 <- d2 %>%
  mutate(clw = factor(cutree(d2_hw, 2)))
pc_d2w <- ggplot(d2) +
  geom_point(aes(x=x1, y=x2, colour=clw), 
             size=2, alpha=0.8) +
  scale_colour_brewer(palette="Set1") +
  ggtitle("(f) Two-cluster solution") +
  theme(aspect.ratio=1, legend.position="none")

pd2c + pd2hc + pc_d2c + 
  pd2w + pd2hw + pc_d2w +
  plot_layout(ncol=3)
```

## Dendrograms in high-dimensions

Check the data: pretend we don't know the clusters. Think you can see three elliptical clusters. One is further from the others.

```{r}
#| label: penguins
#| code-fold: true
load("data/penguins_sub.rda")
```

```{r}
#| label: penguins-gt
#| eval: false
#| code-fold: false
set.seed(20230329)
b <- basis_random(4,2)
pt1 <- save_history(penguins_sub[,1:4], 
                    max_bases = 500, 
                    start = b)
save(pt1, file="data/penguins_tour_path.rda")
animate_xy(penguins_sub[,1:4], 
           tour_path = planned_tour(pt1), 
           axes="off", rescale=FALSE, 
           half_range = 3.5)
```

```{r}
#| label: penguins-gif
#| eval: false
load("data/penguins_tour_path.rda")
render_gif(penguins_sub[,1:4], 
           planned_tour(pt1), 
           display_xy(half_range=0.9, axes="off"),
           gif_file="gifs/penguins_gt.gif",
           frames=500,
           loop=FALSE)
```

![Grand tour of the penguins data](gifs/penguins_gt.gif){#fig-penguins-gt fig-alt="Tour of many linear projections of the penguins data. You can see three elliptical clusters, one further apart from the other two." fig.align="center"}

```{r}
#| label: penguins-hclust
p_dist <- dist(penguins_sub[,1:4])
p_hcw <- hclust(p_dist, method="ward.D2")
p_hcs <- hclust(p_dist, method="single")

p_clw <- penguins_sub %>% 
  mutate(cl = factor(cutree(p_hcw, 3)))
p_cls <- penguins_sub %>% 
  mutate(cl = factor(cutree(p_hcs, 3)))

p_w_hfly <- hierfly(p_clw, p_hcw, scale=FALSE)
p_s_hfly <- hierfly(p_cls, p_hcs, scale=FALSE)
```

```{r}
#| label: penguins-hfly
#| eval: FALSE
load("data/penguins_tour_path.rda")
# library(RColorBrewer)
#pal <- brewer.pal(length(unique(p_w_hfly$data$cl)), "Set2")
#colw <- pal[p_w_hfly$data$cl]
#cols <- pal[p_s_hfly$data$cl]
glyphs <- c(16, 46)
pchw <- glyphs[p_w_hfly$data$node+1]
pchs <- glyphs[p_s_hfly$data$node+1]

animate_xy(p_w_hfly$data[,1:4], 
           #col=colw, 
           tour_path = planned_tour(pt1),
           pch = pchw,
           edges=p_w_hfly$edges, 
           axes="bottomleft")

animate_xy(p_s_hfly$data[,1:4], 
           #col=colw, 
           tour_path = planned_tour(pt1),
           pch = pchs,
           edges=p_s_hfly$edges, 
           axes="bottomleft")

render_gif(p_w_hfly$data[,1:4], 
           planned_tour(pt1),
           display_xy(half_range=0.9,            
                      pch = pchw,
                      edges = p_w_hfly$edges,
                      axes = "off"),
           gif_file="gifs/penguins_hflyw.gif",
           frames=500,
           loop=FALSE)

render_gif(p_s_hfly$data[,1:4], 
           planned_tour(pt1), 
           display_xy(half_range=0.9,            
                      pch = pchs,
                      edges = p_s_hfly$edges,
                      axes = "off"),
           gif_file="gifs/penguins_hflys.gif",
           frames=500,
           loop=FALSE)

```

::: {#fig-penguins-hfly layout-ncol=2}

![Wards linkage](gifs/penguins_hflyw.gif){#fig-penguins-hflyw fig-alt="Tour showing the dendrogram for Wards linkage clustering on the penguins data in 4D. You can see that it connects points within each clump and then connects between clusters."}

![Single linkage](gifs/penguins_hflys.gif){#fig-penguins-hflyw fig-alt="Tour showing the dendrogram for single linkage clustering on the penguins data in 4D. You can see that the connections are like asterisks, connecting towards the center of each clump and there are a couple of long connections between clusters."}

Dendrogram for Wards linkage of the penguins data
:::

```{r}
#| label: penguins-hfly-plotly
#| eval: FALSE
load("data/penguins_tour_path.rda")
# Create a smaller one, for space concerns
pt1i <- interpolate(pt1[,,1:5], 0.1)
pw_anim <- render_anim(p_w_hfly$data,
                       vars=1:4,
                       frames=pt1i, 
                       edges = p_w_hfly$edges,
             obs_labels=paste0(1:nrow(p_w_hfly$data),
                               p_w_hfly$data$cl))

pw_gp <- ggplot() +
     #geom_path(data=pw_anim$circle, 
     #          aes(x=c1, y=c2,
     #              frame=frame), linewidth=0.1) +
     #geom_segment(data=pw_anim$axes, 
     #             aes(x=x1, y=y1, 
     #                 xend=x2, yend=y2, 
     #                 frame=frame), 
     #             linewidth=0.1) +
     #geom_text(data=pw_anim$axes, 
     #          aes(x=x2, y=y2, 
     #              frame=frame, 
     #              label=axis_labels), 
     #          size=5) +
     geom_segment(data=pw_anim$edges, 
                    aes(x=x, xend=xend,
                        y=y, yend=yend,
                        frame=frame)) +
     geom_point(data=pw_anim$frames, 
                aes(x=P1, y=P2, 
                    frame=frame, 
                    shape=factor(node),
                    label=obs_labels), 
                alpha=0.8, size=1) +
     xlim(-1,1) + ylim(-1,1) +
     scale_shape_manual(values=c(16, 46)) +
     coord_equal() +
     theme_bw() +
     theme(legend.position="none", 
           axis.text=element_blank(),
           axis.title=element_blank(),
           axis.ticks=element_blank(),
           panel.grid=element_blank())

pwg <- ggplotly(pw_gp, width=450, height=500) %>%
       animation_button(label="Go") %>%
       animation_slider(len=0.8, x=0.5,
                        xanchor="center") %>%
       animation_opts(easing="linear", transition = 0)
htmlwidgets::saveWidget(pwg,
          file="html/penguins_cl_ward.html",
          selfcontained = TRUE)

# Single
ps_anim <- render_anim(p_s_hfly$data, vars=1:4,
                         frames=pt1i, 
                       edges = p_s_hfly$edges,
             obs_labels=paste0(1:nrow(p_s_hfly$data),
                               p_s_hfly$data$cl))

ps_gp <- ggplot() +
     #geom_path(data=pw_anim$circle, 
     #          aes(x=c1, y=c2,
     #              frame=frame), linewidth=0.1) +
     #geom_segment(data=pw_anim$axes, 
     #             aes(x=x1, y=y1, 
     #                 xend=x2, yend=y2, 
     #                 frame=frame), 
     #             linewidth=0.1) +
     #geom_text(data=pw_anim$axes, 
     #          aes(x=x2, y=y2, 
     #              frame=frame, 
     #              label=axis_labels), 
     #          size=5) +
     geom_segment(data=ps_anim$edges, 
                    aes(x=x, xend=xend,
                        y=y, yend=yend,
                        frame=frame)) +
     geom_point(data=ps_anim$frames, 
                aes(x=P1, y=P2, 
                    frame=frame, 
                    shape=factor(node),
                    label=obs_labels), 
                alpha=0.8, size=1) +
     xlim(-1,1) + ylim(-1,1) +
     scale_shape_manual(values=c(16, 46)) +
     coord_equal() +
     theme_bw() +
     theme(legend.position="none", 
           axis.text=element_blank(),
           axis.title=element_blank(),
           axis.ticks=element_blank(),
           panel.grid=element_blank())

psg <- ggplotly(ps_gp, width=450, height=500) %>%
       animation_button(label="Go") %>%
       animation_slider(len=0.8, x=0.5,
                        xanchor="center") %>%
       animation_opts(easing="linear", transition = 0)
htmlwidgets::saveWidget(psg,
          file="html/penguins_cl_single.html",
          selfcontained = TRUE)
```

::: {#fig-penguins-hfly-plotly}

<iframe width="500" height="500" src="html/penguins_cl_ward.html" title="Animation of dendrogram from Wards linkage clustering of the penguins data."></iframe>

<iframe width="500" height="500"  src="html/penguins_cl_single.html" title="Animation of dendrogram from single linkage clustering of the penguins data."></iframe>

Animation of dendrogram from Wards (top) and single (bottom) linkage clustering of the penguins data.
:::


````{=html}
<!--
--THIS STUFF IS THE OLD MATERIAL--

@fig-prim7-hier contains several plots that illustrate the results of the hierarchical clustering of the particle physics data; we used Euclidean interpoint distances and the average linkage method. This is computed by:

```
> library(rggobi)
> d.prim7 <- read.csv("prim7.csv")
> d.prim7.dist <- dist(d.prim7)
> d.prim7.dend <- hclust(d.prim7.dist, method="average")
> plot(d.prim7.dend)
```

\index{cluster analysis!dendrogram}

\noindent The dendrogram at the top shows the result of the clustering process. Several large clusters were fused late in the process, with heights (indicated by the height of the horizontal segment connecting two
clusters) well above those of the first joins; we will want to look at these.  Two points were fused with the rest at the very last stages, which indicates that they are outliers and have been assigned to
singleton clusters.

% Figure 5
\begin{figure*}[htbp]
\centerline{{\includegraphics[width=3.5in]{chap-clust/prim7-dendrogram.pdf}}}
\smallskip
\centerline{{\includegraphics[width=1.2in]{chap-clust/prim7-clust1.pdf}}
 {\includegraphics[width=1.2in]{chap-clust/prim7-clust2.pdf}}
 {\includegraphics[width=1.2in]{chap-clust/prim7-clust3.pdf}}}
\smallskip
\centerline{{\includegraphics[width=1.2in]{chap-clust/prim7-clust5.pdf}}
 {\includegraphics[width=1.2in]{chap-clust/prim7-clust6.pdf}}
 {\includegraphics[width=1.2in]{chap-clust/prim7-clust7.pdf}}}
\caption[Hierarchical clustering of the particle physics
data]{Hierarchical clustering of the particle physics data.  The
dendrogram shows the results of clustering the data using average
linkage.  Clusters 1, 2, and 3 carve up the base triangle of the data;
clusters 5 and 6 divide one of the arms; and cluster 7 is a singleton.
}
\label{prim7-hier}
\end{figure*}

\index{outliers}
\index{animation}
\index{brushing!transient}
We cut the dendrogram to produce nine clusters because we would expect to see seven clusters and a few outliers based on our observations from the spin and brush approach, and our choice looks reasonable given the structure of the dendrogram.  (In practice, we would usually explore the clusters corresponding to several different cuts of the dendrogram.) We assign each cluster an integer identifier, and in the following plots, you see the results of highlighting one cluster at a time and then running the grand tour to focus on the placement of that cluster within the data. This R code follows this sequence of actions:

```
> gd <- ggobi(d.prim7)[1]
> clust9 <- cutree(d.prim7.dend, k=9)
> glyph_color(gd)[clust9==1] <- 9 # highlight triangle
> glyph_color(gd)[clust9==1] <- 1 # reset color
> glyph_color(gd)[clust9==2] <- 9 # highlight cluster 2
```

The top three plots show, respectively, clusters 1, 2, and 3: These clusters roughly divide the main triangular section of the data into three. The bottom row of plots show clusters labeled 5, and 6, which
lie along the linear pieces, and cluster 7, which is a singleton cluster corresponding to an outlier in the data.

The results are reasonably easy to interpret. Recall that the basic geometry underlying this data is that there is a 2D triangle with two linear strands extending from each vertex.  The hierarchical average
linkage clustering of the particle physics data using nine clusters essentially divides the data into three chunks in the neighborhood of each vertex (clusters 1, 2, and 3), three pieces at the ends of the six linear strands (4, 5, and 6), and three clusters containing
outliers (7, 8, and 9).  This data provides a big challenge for any cluster algorithm - low-dimensional pieces embedded in high-dimensional space - and we are not surprised that no algorithm that we have tried will extract the structure we found using interactive tools.

The particle physics dataset is ill-suited to hierarchical clustering, but this extreme failure is an example of a common problem.  When performing cluster analysis, we want to group the observations into clusters without knowing the distribution of the data.  How many clusters are appropriate? What do the clusters look like?  Could we just as confidently divide the data in several different ways and get
very different but equally valid interpretations? Graphics can help us assess the results of a cluster analysis by helping us explore the distribution of the data and the characteristics of the clusters.

-->
````
