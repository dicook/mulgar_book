<!--
## Using `plotly`

@fig-penguins-brush-and-spin shows a fixed length grand tour produced using `plotly`, with a brush tool made available to colour points. The code is messy, but follows that of [animation-tour-basic.R](https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R) from @plotly2020. There are key pieces in the code:

1. Create the sequence of tour projections, and the data object containing data projections and projection coordinates. Include an observation id in the data object.
2. Specify that the `id` variable is to be used to mark observations across animation frames using `highlight_key`.
3. Draw them using `plotly`, with a `frame` parameter which specifies the animation sequence. 
4. Add a brush colour palette and specific brushing control using `highlight` to the plotly plot.

The result is an HTML object which can be saved for sharing. The drawback of this approach is that the results of the user actions cannot be saved, so you cannot recover the clusters corresponding to the colours.

```{r}
#| eval: false
#| message: false
# Following https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R
# TURN INTO A FUNCTION TO MAKE IT EASIER
library(tourr)
library(plotly)
load("data/penguins_sub.rda")
p_mat <- as.matrix(penguins_sub[,1:4])
tour <- new_tour(p_mat, 
                 grand_tour(), NULL)

tour_dat <- function(step_size) {
  step <- tour(step_size)
  proj <- center(p_mat %*% step$proj)
  data.frame(x = proj[,1], y = proj[,2], 
             species = penguins_sub$species,
             id = 1:nrow(penguins_sub))
}

proj_dat <- function(step_size) {
  step <- tour(step_size)
  data.frame(
    x = step$proj[,1], y = step$proj[,2], measure = colnames(p_mat)
 )
}

steps <- c(0, rep(1/15, 150))
stepz <- cumsum(steps)

# tidy version of tour data
tour_dats <- lapply(steps, tour_dat)
tour_datz <- Map(function(x, y) cbind(x, step = y),
                 tour_dats, stepz)
tour_data <- dplyr::bind_rows(tour_datz)

tour_data <- highlight_key(tour_data, ~id)

# tidy version of tour projection data
proj_dats <- lapply(steps, proj_dat)
proj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)
proj_data <- dplyr::bind_rows(proj_datz)
proj_data$x <- proj_data$x*3
proj_data$y <- proj_data$y*3

ax <- list(
  title = "",
  range = c(-3, 3),
  zeroline = FALSE
)

# Set colors
clrs <- grDevices::hcl.colors(6, palette="Zissou 1")
  
# for nicely formatted slider labels
options(digits = 2)

p_b_s <- proj_data %>%
  plot_ly(x = ~x, y = ~y, frame = ~step, 
          color = I("gray80"),
          width=600, height=600) %>%
  config(displaylogo = FALSE, 
         modeBarButtonsToRemove = c("sendDataToCloud", "editInChartStudio", "zoom2d", "zoomIn2d", "zoomOut2d", "pan2d", "drawclosedpath", "drawopenpath", "autoScale2d", "hoverClosestCartesian", "hoverCompareCartesian", "resetScale2d")) %>%
  add_segments(xend = 0, yend = 0) %>%
  add_text(text = ~measure) %>%
  add_markers(color = I("black"), data = tour_data, text = ~id, ids = ~id, hoverinfo = "text") %>%
  layout(xaxis = ax, yaxis = ax) %>%
  hide_legend() %>%
  animation_opts(50, transition = 0, redraw = FALSE) %>%
  highlight(on = "plotly_selected", 
            off = "plotly_doubleclick",
            color = clrs, 
            persistent = TRUE, 
            dynamic = TRUE, 
            opacityDim = 0.5)
htmlwidgets::saveWidget(p_b_s,
          file="html/penguins_brush_and_spin.html",
          selfcontained = TRUE)

```

::: {.content-hidden when-format="pdf"}

::: {#fig-penguins-brush-and-spin fig-align="center"}

<iframe width="600" height="650" src="html/penguins_brush_and_spin.html" title="Controls to brush and spin to discover the three clusters in the penguins data."></iframe>

Controls to brush and spin to discover the three clusters in the penguins data. Use the lasso brush to colour points persistently when you see a cluster. Spin and colour again as necessary to identify all the clusters.
:::

:::

::: {#fig-penguins-bs-static fig-align="center" layout-ncol=2}


![](images/penguins-bs4.png){#fig-penguins-bs1 fig-alt="FIX ME" fig.align="center"}

![](images/penguins-bs5.png){#fig-penguins-bs2 fig-alt="FIX ME" fig.align="center"}

Screenshots of the spin-and-brush approach being used on the penguins data.
:::

## Using `detourr`
-->
