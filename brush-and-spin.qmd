## Spin and brush approach {#sec-clust-graphics}

\index{brushing!persistent} \index{tour}
\index{cluster analysis!spin and brush}

When the data to be clustered is purely numeric, and if the clusters are well-separated, a purely graphical spin and brush approach to cluster analysis works well. This is true even when there are nuisance variables and/or cases, marked differences in variance structures between groups or when groups have non-linear boundaries. It does not work very well when there are clusters that overlap, or when there are no distinct clusters but rather
we simply wish to partition the data. In these situations it may be better to begin with a numerical solution and to use visual tools to evaluate it, perhaps making refinements subsequently. Several examples of the spin and brush approach are documented in the literature, such as @CBCH95 and @WWS99.

The spin and brush approach is simply:

1. Run the (grand) tour.
2. Stop when you see a separated cluster of points.
3. Paint the cluster a chosen colour.
4. Repeat 1-2 until the data is grouped, and when no other separated cluster is visible in any projection. You may need to re-paint some points if they appear to be grouped incorrectly in a different projection, or paint more points that after spinning most likely belong to an existing group.

It can help to be able to remove a cluster, to de-clutter the display, in order to find more clusters.

## Using `plotly`

@fig-penguins-brush-and-spin shows a fixed length grand tour produced using `plotly`, with a brush tool made available to colour points. The code is messy, but follows that of [animation-tour-basic.R](https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R) from @plotly2020. There are key pieces in the code:

1. Create the sequence of tour projections, and the data object containing data projections and projection coordinates. Include an observation id in the data object.
2. Specify that the `id` variable is to be used to mark observations across animation frames using `highlight_key`.
3. Draw them using `plotly`, with a `frame` parameter which specifies the animation sequence. 
4. Add a brush colour palette and specific brushing control using `highlight` to the plotly plot.

The result is an HTML object which can be saved for sharing. The drawback of this approach is that the results of the user actions cannot be saved, so you cannot recover the clusters corresponding to the colours.

```{r}
#| eval: false
#| message: false
# Following https://github.com/plotly/plotly.R/blob/master/demo/animation-tour-basic.R
# TURN INTO A FUNCTION TO MAKE IT EASIER
library(tourr)
library(plotly)
load("data/penguins_sub.rda")
p_mat <- as.matrix(penguins_sub[,1:4])
tour <- new_tour(p_mat, 
                 grand_tour(), NULL)

tour_dat <- function(step_size) {
  step <- tour(step_size)
  proj <- center(p_mat %*% step$proj)
  data.frame(x = proj[,1], y = proj[,2], 
             species = penguins_sub$species,
             id = 1:nrow(penguins_sub))
}

proj_dat <- function(step_size) {
  step <- tour(step_size)
  data.frame(
    x = step$proj[,1], y = step$proj[,2], measure = colnames(p_mat)
 )
}

steps <- c(0, rep(1/15, 150))
stepz <- cumsum(steps)

# tidy version of tour data
tour_dats <- lapply(steps, tour_dat)
tour_datz <- Map(function(x, y) cbind(x, step = y),
                 tour_dats, stepz)
tour_data <- dplyr::bind_rows(tour_datz)

tour_data <- highlight_key(tour_data, ~id)

# tidy version of tour projection data
proj_dats <- lapply(steps, proj_dat)
proj_datz <- Map(function(x, y) cbind(x, step = y), proj_dats, stepz)
proj_data <- dplyr::bind_rows(proj_datz)
proj_data$x <- proj_data$x*3
proj_data$y <- proj_data$y*3

ax <- list(
  title = "",
  range = c(-3, 3),
  zeroline = FALSE
)

# Set colors
clrs <- grDevices::hcl.colors(6, palette="Zissou 1")
  
# for nicely formatted slider labels
options(digits = 2)

p_b_s <- proj_data %>%
  plot_ly(x = ~x, y = ~y, frame = ~step, 
          color = I("gray80"),
          width=600, height=600) %>%
  config(displaylogo = FALSE, 
         modeBarButtonsToRemove = c("sendDataToCloud", "editInChartStudio", "zoom2d", "zoomIn2d", "zoomOut2d", "pan2d", "drawclosedpath", "drawopenpath", "autoScale2d", "hoverClosestCartesian", "hoverCompareCartesian", "resetScale2d")) %>%
  add_segments(xend = 0, yend = 0) %>%
  add_text(text = ~measure) %>%
  add_markers(color = I("black"), data = tour_data, text = ~id, ids = ~id, hoverinfo = "text") %>%
  layout(xaxis = ax, yaxis = ax) %>%
  hide_legend() %>%
  animation_opts(50, transition = 0, redraw = FALSE) %>%
  highlight(on = "plotly_selected", 
            off = "plotly_doubleclick",
            color = clrs, 
            persistent = TRUE, 
            dynamic = TRUE, 
            opacityDim = 0.5)
htmlwidgets::saveWidget(p_b_s,
          file="html/penguins_brush_and_spin.html",
          selfcontained = TRUE)

```

::: {.content-hidden when-format="pdf"}

::: {#fig-penguins-brush-and-spin fig-align="center"}

<iframe width="600" height="650" src="html/penguins_brush_and_spin.html" title="Controls to brush and spin to discover the three clusters in the penguins data."></iframe>

Controls to brush and spin to discover the three clusters in the penguins data. Use the lasso brush to colour points persistently when you see a cluster. Spin and colour again as necessary to identify all the clusters.
:::

:::

::: {#fig-penguins-bs-static fig-align="center" layout-ncol=2}


![](images/penguins-bs4.png){#fig-penguins-bs1 fig-alt="FIX ME" fig.align="center"}

![](images/penguins-bs5.png){#fig-penguins-bs2 fig-alt="FIX ME" fig.align="center"}

Screenshots of the spin and brush approach being used on the penguins data.
:::

## Using `detourr`

Spin-and-brush can also be achieved using the `detourr` package, and the results can be saved for further analysis. The code is very easy, and then all the controls are interactive.


```{r}
#| eval: false
#| code-fold: false
library(detourr)
grDevices::hcl.colors(3, palette="Zissou 1")
detour(penguins_sub[,1:4], 
       tour_aes(projection = bl:bm)) |>
       tour_path(grand_tour(2), fps = 60, 
                 max_bases=20) |>
       show_scatter(alpha = 0.7, 
                    axes = FALSE)
```

- `tour_aes(projection = bl:bm))` is `ggplot`-style syntax for specifying the variables `bl:bm` to include in the tour. 
- `tour_path(grand_tour(2), fps = 60, 
                 max_bases=20)` specifies 2D grand tour path, with a longer than default path set by `max_bases=20` and the `fps` argument sets the smoothness.
- Brush interaction is set by choosing the square icon (4th from top), so when the cursor is moved over the window points are selected.
- You can choose specific colours to brush, from the colour palette by using hexcolours to match your favourite palette. Here we've used colours from the Zissou palette.
- The paintbrush icon sets the selected points to the current colour.
- Save the final colour labels using the download icon. 

::: {#fig-penguins-bs-detourr fig-align="center" layout-ncol=2}


![First cluster cluster](images/penguins-bs6.png){#fig-penguins-bs3 fig-alt="FIX ME" fig.align="center" width=300}

![Second cluster](images/penguins-bs7.png){#fig-penguins-bs4 fig-alt="FIX ME" fig.align="center" width=300}


Screenshots of the spin and brush approach using `detourr` on the penguins data. 
:::

@fig-penguins-bs-detourr shows the stages of spin and brush on the penguins data using detourr. The final results can be examined and used for later analysis. Because this data came with a class variable, the penguin species, it is interesting to see how close the spin-and-brush clustering approach came to recovering these: 

```{r}
#| message: false
library(readr)
load("data/penguins_sub.rda")
detourr_penguins <- read_csv("data/detourr_penguins.csv")
table(penguins_sub$species, detourr_penguins$colour)
```

It's quite close! All but two of the 119 Gentoo penguins were identified as a cluster (labelled as "3e9eb6" from the chosen light blue hex colour), and all but three of the 146 Adelie penguins were identified as a cluster, (labelled as "000000" which is the unbrushed black group). Most of the Chinstrap species were recovered also (labelled as "f5191c" for the red hex colour).


```{r}
#| eval: false
#| echo: false
# remotes::install_github("pfh/langevitour")
# remotes::install_github("plotly/plotly.R")
library(langevitour)
library(crosstalk)
shared <- SharedData$new(penguins_sub)

langevitourWidget <- langevitour(
    penguins_sub[,1:4], 
    link=shared,  
    pointSize=2,
    width=700, height=700)

library(liminal)
limn_tour(fake_trees, dim1:dim10)
```



## Exercises {-}

1. Use the spin and brush approach to identify the  three clusters in the `mulgar::clusters` data set.
2. Use the spin and brush approach to identify the six clusters in the `mulgar::multicluster` data set. (The code below using detourr could be useful.)

```{r}
#| eval: false
#| code-fold: false
library(detourr)

# Use a random starting basis because the first two variables make it too easy
strt <- tourr::basis_random(10, 2)
detour(multicluster, 
       tour_aes(projection = -group)) |>
       tour_path(grand_tour(2), start=strt, fps = 60) |>
       show_scatter(alpha = 0.7, axes = FALSE)

```

3. Use the spin and brush technique to identify the branches of the `fake_trees` data available in the `liminal` package (originally from [PHATE](https://phate.readthedocs.io/en/stable/)). The result should look something like this:

![Example solution after spin and brush on fake_trees data.](images/fake_trees_sb.png){#fig-fake-trees-sb}

You can use the download button to save the data with the colours. Tabulate the `branches` id variable in the original data with the `colour` groups created from brushing, to see how closely you have recovered the original classes.

```{r}
#| eval: false
library(detourr)
library(liminal)
library(mulgar)
data("fake_trees")

# Original data is 100D, so need to reduce dimension using PCA first
ft_pca <- prcomp(fake_trees[,1:100], 
                 scale=TRUE, retx=TRUE)
ggscree(ft_pca)
detour(as.data.frame(ft_pca$x[,1:10]), 
       tour_aes(projection = PC1:PC10)) |>
       tour_path(grand_tour(2), fps = 60, max_bases=50) |>
       show_scatter(alpha = 0.7, axes = FALSE)

ft_sb <- read_csv("data/fake_trees_sb.csv")
table(fake_trees$branches, ft_sb$colour)
```

<!--
\index{datasets!\Data{PRIM7}}

This description of the spin and brush approach on \Data{PRIM7}, a
particle physics dataset, follows that in \citeasnoun{CBCH95}. The data
contains seven variables. We have no labels for the data, so when we
begin, all the points have the same color and glyph. Watch the data in a
tour for a few minutes and you will see that there are no natural
clusters, but there is clearly structure.

\index{projection pursuit!indexes}
\index{projection pursuit!indexes!holes}
\index{projection pursuit!indexes!central mass}
\index{principal component analysis}

We will use the projection pursuit guided tour to help us find that
structure. We will tour on the principal components, rather than the raw
variables, because that improves the performance of the projection
pursuit indexes. Two indexes are useful for detecting clusters: holes
and central mass. The holes index is sensitive to projections where
there are few points (i.e., a hole) in the center. The central mass
index is the opposite: It is sensitive to projections that have too many
points in the center. These indexes are explained in @chap-toolbox.

The holes index is usually the most useful for clustering, but not for
the particle physics data, because it does not have a \`\`hole'' at the
center. The central mass index is the most appropriate here. Alternate
between optimization (a guided tour) and the unguided grand tour to find
local maxima, each of which is a projection that is potentially useful
for revealing clusters. The process is illustrated in @fig-prim7-tour.

The top left plot shows the initial default projection, the second
principal component plotted against the first. The plot next to it shows
the projected data corresponding to the first local maximum found by the
guided tour. It has three strands of points stretching out from the
central clump and several outliers. We brush the points along each
strand, in red, blue, and orange, and we paint the outliers with open
circles. (See the next two plots.) We continue by choosing a new random
start for the guided tour, and then waiting until new territory in the
data is discovered. \index{brushing!persistent}

The optimization settles on a projection where there are three strands
visible, as observed in the leftmost plot in the second row. Two strands
have been previously brushed, but a new one has appeared; this is
painted yellow.

We also notice that there is another new strand hidden below the red
strand. It is barely distinguishable from the red strand in this
projection, but the two strands separate widely in other projections. It
is tricky to brush it, because it is not well separated in this
projection. We use a trick: Hide the red points, brush the new strand
green, and \`\`unhide'' the red points again (middle plot in the second
row).

Five clusters have been easily identified, and now finding new clusters
in this data is increasingly difficult. After several more alternations
between the grand tour and the guided tour, we find something new (shown
in the rightmost plot in the second row): One more strand has emerged,
and we paint it pink.

% Figure 3
\begin{figure}[htp]
\centerline{{\includegraphics[width=1.5in]{chap-clust/prim7-pp1.pdf}}
 {\includegraphics[width=1.5in]{chap-clust/prim7-pp2.pdf}}
 {\includegraphics[width=1.5in]{chap-clust/prim7-pp5.pdf}}}
\smallskip
\centerline{{\includegraphics[width=1.5in]{chap-clust/prim7-pp7.pdf}}
 {\includegraphics[width=1.5in]{chap-clust/prim7-pp8.pdf}}
 {\includegraphics[width=1.5in]{chap-clust/prim7-pp9.pdf}}}
\centerline{{\includegraphics[width=1.5in]{chap-clust/prim7-pp10.pdf}}
  {\includegraphics[width=1.5in]{chap-clust/prim7-pp11.pdf}}
  {\includegraphics[width=1.5in]{chap-clust/prim7-pp13.pdf}}}
\caption[Stages of ``spin and brush'' on \Data{PRIM7}]{Stages of spin
and brush on \Data{PRIM7}.  The high-dimensional geometry emerges as
the clusters are painted.}
\label{prim7-tour}
\end{figure}

The results at this stage are summarized by the bottom row of plots.
There is a very visible triangular component (in gray) revealed when all
of the colored points are hidden. We check the shape of this cluster by
drawing lines between outer points to contain the inner ones. Touring
after the lines are drawn helps to check how well they match the shape
of the clusters. The colored groups pair up at each vertex, and we draw
in the shape of these too --- a single line matches the structures
reasonably well.

The final step of the spin and brush clustering is to clean up this
solution, touching up the color groups by continuing to tour, and
repainting a point here and there. When we finish, we have found seven
clusters in this data that form a very strong geometric object in the
data space: a two-dimensional (2D) triangle, with two one-dimensional
(1D) strands extending in different directions from each vertex. The
lines confirm our understanding of this object's shape, because the
points stay close to the lines in all of the projections observed in a
tour.

% Figure 4
\begin{figure}
\centerline{
   \includegraphics[width=1.5in]{chap-clust/prim7-pp13-model.pdf}
   \includegraphics[width=3in]{chap-clust/prim7-par.pdf}
}
\caption[The \Data{PRIM7} model summarized]{The \Data{PRIM7} model
summarized.  The model summary {\bf (left)} was formed by adding line
segments manually.  In the parallel coordinate plot, the profiles
highlighted in dark gray correspond to the points in the 2D triangle
at the center of the model.  }
\label{prim7-model}
\end{figure}

The next stage of cluster analysis is to characterize the nature of the
clusters. To do that, we would calculate summary statistics for each
cluster, and plot the clusters (@fig-prim7-model). When we plot the
clusters of the particle physics data, we find that the 2D triangle
exists primarily in the plane defined by X3 and X5. If you do the same,
notice that the variance in measurements for the gray group is large in
variables X3 and X5, but negligible in the other variables. The linear
pieces can also be characterized by their distributions on each of the
variables. With this example, we have shown that it is possible to
uncover very unusual clusters in data without any domain knowledge.

Here are several tips about the spin and brush approach.

-   Save the dataset frequently during the exploration of a complex
    dataset, being sure to save your colors and glyphs, because it may
    take several sessions to arrive at a final clustering.\
-   Manual controls are useful for refining the optimal projection
    because another projection in the neighborhood may be more
    revealing.\
-   The holes index is usually the most successful projection pursuit
    index for finding clusters.
-   Principal component coordinates may provide a better starting point
    than the raw variables.

Finally, the spin and brush method will not work well if there are no
clear separations in the data, and the clusters are high-dimensional,
unlike the low-dimensional clusters found in this example.
-->